[
  {
    "objectID": "session_2.html#welcome",
    "href": "session_2.html#welcome",
    "title": "",
    "section": "Welcome",
    "text": "Welcome\nThese slides available at: https://arcus.github.io/first_steps_in_r_rstudio_skills_series/session_2.html\n\nUse keyboard arrow keys to\n\nadvance ( → ) and\ngo back ( ← )\n\nType “s” to see speaker notes\nType “?” to see other keyboard shortcuts\n\n\nAs we prepare to get started, I’d like to encourage you to open these slides on your own browser, so you will have them available to refer to later. There are also a number of links you may want to click on. I’ll copy paste that URL, where the slide deck is located, into chat, so everyone has it.\nThis first slide is just to help you navigate this slide deck if you look at these slides on your own! And yes, there are ample speaker notes, so if you missed something I said, chances are it’s going to be in the speaker notes of the slide."
  },
  {
    "objectID": "session_2.html#about-arcus-your-presenter",
    "href": "session_2.html#about-arcus-your-presenter",
    "title": "",
    "section": "About Arcus / Your Presenter",
    "text": "About Arcus / Your Presenter\n\n\nArcus is an initiative by the Research Institute aimed at promoting data discovery and reuse and increasing research reproducibility.\n\nArcus app: https://arcus.chop.edu\nArcus Sharepoint site: https://chop365.sharepoint.com/sites/Arcus\n\nAmong the many teams in Arcus, I represent Arcus Education!\n\n\n\n\n\nThanks again for joining us, and welcome to our session today! My name is ______ [add pronouns here if you want], and I’ll be leading today’s session.\nI’ve already talked a bit about Arcus in the first session of this Skills Series, so I’ll just skip most of that this time and simply say that Arcus is an initiative by the Research Institute aimed at promoting data discovery and reuse and increasing research reproducibility.\nYou can find out more by checking out these links.\nAnd finally, a little more about me: I work in Arcus Education. Our role is to support CHOP scientists by helping researchers acquire data science skills. That’s why we have Skills Series like this one!"
  },
  {
    "objectID": "session_2.html#arcus-education",
    "href": "session_2.html#arcus-education",
    "title": "",
    "section": "Arcus Education",
    "text": "Arcus Education\n\n\n\n\nArcus education provides data science training to researchers …\n(and often this is useful to non-researchers too!).\nhttps://arcus.chop.edu/i-want-to/arcus-education\nEmail us! arcus-education@chop.edu\n\n\nThe Arcus Education team does lots of different kinds of education. Again, we talked about this in our first session, so I’m going to skip most of this.\nPlease check out that education page that is linked here to find out more about some of our services. You can also email us at arcus dash education at chop dot edu."
  },
  {
    "objectID": "session_2.html#first-steps-in-r-and-rstudio",
    "href": "session_2.html#first-steps-in-r-and-rstudio",
    "title": "",
    "section": "First Steps in R and RStudio",
    "text": "First Steps in R and RStudio\nArcus Education provides “Skills Series” for the entire CHOP community.\nThis Skills Series is a 5-session series aimed at helping you take your first steps in R and RStudio!\n\nSession 1: Review and Setup\nSession 2: Projects and File Ingestion\nSession 3: Exploring Data Visually, Using ggplot2\nSession 4: Selecting Data Using dplyr\nSession 5: Putting it All Together: Communicating\n\n\nJust a reminder about what you’re in today.\nIn this series, we’re going to take five sessions to help you make your first steps in R and RStudio. If you’ve never coded in R or used the RStudio software, and you want some support to get started, this is a great workshop series for you.\nAfter you finish these five sessions, you’ll have a little experience with R and RStudio. The goal is to help you feel more confident and have enough experience to be able to keep learning specialized skills titrated to your needs. If we were to compare learning R to learning to drive, this series is the equivalent of having you drive around a parking lot, under supervision, in a controlled situation."
  },
  {
    "objectID": "session_2.html#session-2-itinerary",
    "href": "session_2.html#session-2-itinerary",
    "title": "",
    "section": "Session 2 Itinerary",
    "text": "Session 2 Itinerary\nProjects and File Ingestion\n\nFile systems can be challenging to navigate\nProjects in RStudio\nInstalling and loading packages\nTabular data ingestion from .csv files\nFunctions in R\n\nGoals:\n\nBe able to explain when to use install.packages() and when to use library()\nIngest data from a .csv and look at it\nRender a quarto document to an output format (html)\n\n\nSo let’s get started with this second session. In this session we’re going to hit the ground running. You need to already have a Posit.cloud account, so if you don’t have that, it is absolutely critical that you pay attention in the next slide.\nWe’re going to have you go into your Posit account and start a new project. We’ll explain why projects are so useful, and go over installing and loading packages, ingesting data, and functions in R.\nHere are our goals. I want you to be able to explain when you’ll use install dot packages and when you’ll use library, I want you to be able to ingest data from a .csv file and examine that data in RStudio, and I want you to be able to render a quarto document."
  },
  {
    "objectID": "session_2.html#posit.cloud-for-learning",
    "href": "session_2.html#posit.cloud-for-learning",
    "title": "",
    "section": "Posit.Cloud (for learning)",
    "text": "Posit.Cloud (for learning)\nhttps://posit.cloud is a great place for learning or practice with public (NOT CHOP!) datasets.\nPlease open your First Steps in R and RStudio Exercises project in Posit.cloud now.\nIf you did not already set up a Posit.cloud account with the exercise files in the first session of this Series, please do the following, now:\n\nMake sure you have a Cloud Free tier account at https://posit.cloud. See last session’s slides for help.\nCreate a new project that clones our exercise files.\n\n\n\n\n−+\n02:00\n\n\n\n\nPosit.cloud is an online, cloud based service provided by Posit, the company that makes the RStudio software. It’s easy reliable for learners. As teachers, we can concentrate on our learners really acquiring the skills around R and RStudio, without being bogged down by weird individual installation differences from computer to computer.\nUsing Posit.cloud is a requirement for your continued participation in this workshop, because we can’t help you troubleshoot details of your particular computer and its installation details. If you set things up in the first session of the Series, please log in to Posit.cloud and open the project with the Skills Series exercise files. If you didn’t set things up yet, please do that now. I’ll copy and paste those two bullet points into chat so you have those. [Do it].\nLet’s take just a few minutes to make sure we’re all set up. I’ll give folks a few minutes to do that!"
  },
  {
    "objectID": "session_2.html#where-are-your-files",
    "href": "session_2.html#where-are-your-files",
    "title": "",
    "section": "Where are your files?",
    "text": "Where are your files?\n\nKnowing where your files are can be tricky\nRStudio / Posit.cloud “Projects” can help\nProjects are directories that hold analysis scripts, data, and project info close together\n\n\n\nIn Posit.cloud, “New Project” is a big blue button: \n\nIn RStudio Desktop on your computer, you have to go to the File menu and choose “New Project”: \n\n\nOK, before we get started working with our exercise files, let’s talk about some common struggles. One of the biggest challenges some people have, especially if they’ve never worked in the command line, is finding their own files. They know they downloaded it, or they double clicked on a .csv file attachment in Outlook and they’re not sure where that file lives.\nWorking in Projects is a great way to help keep your data really close to your analysis scripts, so it’s a lot easier to find your data. Projects are directories that RStudio creates in which your data and your analysis, as well as some information about your project, are all stored together in a single folder. And you can have 2, or three, or a dozen different Projects, all kept separate from each other, to keep from mixing up your files.\nIn Posit.cloud, Projects are the way you have to organize your work, so it’s really easy to use Projects there. On your own computer, you’re not forced to use Projects, but you should use them. If you’re working in your own computer, you have to have the discipline to not just make new R scripts right away, but rather, first make a new Project to hold related files together, and then within that project make your analysis scripts."
  },
  {
    "objectID": "session_2.html#file-paths-the-where",
    "href": "session_2.html#file-paths-the-where",
    "title": "",
    "section": "File Paths – the “where”",
    "text": "File Paths – the “where”\n\nA few tips:\n\n/ means “go into a child directory” (\\ in Windows)\n/ as the first symbol means “start at the root”\n. means “this directory”\n.. means “the parent directory of this directory”\n~ means “my home directory”\n\nRelative path – “directions from here”\nAbsolute path – “directions from anywhere”\nWorking directory – R’s “starting place”\n\nGreat module on Directories and File Paths\n\nIf you have already worked in the command line, you might not have any problem finding files on your computer, but some of you might find it tricky.\nWe’re going to offer a brief handful of tips for understanding file paths, and this is true for all files, not just related to R or data analysis.\nFirst off, Windows is a weird operating system and is unlike the rest of the world’s major operating systems, like Unix, Linux, and MacOS, in how it does file paths. Most file paths use forward slashes, not backward slashes. A slash means you’re going into a new subdirectory or subfolder.\nAnd a few other special symbols are useful to know. A single dot means “this directory”, two dots means “go into the directory that holds the one I’m in now”, and a tilde means “my home directory”, which will differ from user to user on a shared system like a server.\nIn your analysis scripts, you’ll often have to decide if you want to use what’s called a “relative path” or an “absolute path” to tell R where a file is. There are advantages and disadvantages to both, but if we’re using Projects, we can usually use relative paths more easily.\nA relative path assumes that we’re starting in the same place and have common knowledge. So if I was at home, describing where my keyboard is, I’d say “go upstairs to the second floor, and then on the street side of the house, there’s my office. Then go inside and you’ll find the keyboard on my desk.” That makes sense if you’re also inside my house.\nBut if you’re NOT in my house, you’re in your house, which doesn’t have a second floor, you would say, “hey, your directions to go to the second floor don’t make sense. Path not found.” A relative path doesn’t work when we’re not starting in the same place.\nAnd that brings us to the idea of a working directory. Any time you are working in R, it’s running with a starting point, its working directory. The great thing about RStudio Projects is that when you open a project, R automatically makes the working directory that project directory, so relative paths are easy. Everyone has the same starting point, so to speak.\nAn absolute path is a path that includes enough detail so that the location is clear from anywhere in the computer. For example, in the physical world, an absolute path would be if I said, “go to 123 Main Street, Philadelphia, go inside, go to the second floor, go to the street side, open the door, go inside, and look on the desk. The keyboard is there.” Now, the benefit is that it’s very precise. But the downside is that it’s lengthy and annoying to construct sometimes, and if you move the whole folder of your project, you’ve changed addresses, essentially, and messed things up.\nIf you want to learn more, we’ve created a module all about file paths that you might find useful, so check that out if you’re interested!"
  },
  {
    "objectID": "session_2.html#advantages-to-using-projects",
    "href": "session_2.html#advantages-to-using-projects",
    "title": "",
    "section": "Advantages to using Projects",
    "text": "Advantages to using Projects\n\nKeeping track of your files gets easier\nProjects allow you to keep your various efforts separated (wait, which “my_data” is this?)\nMultiple sessions of RStudio open on your computer that don’t interfere with each other.\n\n\nLet’s sum up the major advantages of using Projects.\nIf you’re like me, you might work on several different analysis projects at a time. And if you just have one RStudio window open, which means one R session, you can accidentally trip over yourself. Let’s say you have two different R scripts, each of which creates the object my_data, or cleaned_data, or a similar kind of generic name. Maybe you’re doing work for two different research projects. What happens when you go back and forth between these files? You end up clobbering yourself and saving the audiology data in the onco project or something like that.\nIt’s much cleaner and safer to work using Projects, in which all the related analysis and data files for a given effort are stored in the same directory. RStudio can also dedicate a session per project if you want to have several projects open at a time. For example, on my computer, I might have two or three copies of RStudio open at a time, each one in a separate Project, and each one is completely isolated from the other. I can go back and forth and I can have an onco dataset I call “my_data” and an audiology dataset I call “my_data”, and RStudio will keep them totally separate, because they’re in different Projects."
  },
  {
    "objectID": "session_2.html#creating-a-project-in-posit",
    "href": "session_2.html#creating-a-project-in-posit",
    "title": "",
    "section": "Creating a Project in Posit",
    "text": "Creating a Project in Posit\nPlease go to http://posit.cloud and make a free account and create a new project from the Git repository at https://github.com/arcus/first_steps_r_rstudio_exercises\n\n\n\n\n−+\n02:00\n\n\n\n\nOK, we’re going to start a new project in Posit.cloud. This is your first hands-on work in this workshop, so get ready!\nYou’re going to find the “New Project” button in the upper right. It’s big and dark blue and it stands out a lot. It’s not quite so visible when you have RStudio on your own computer, just as a heads-up.\nYou’ll see there are a few options for a new Project. You want to choose “New Project from Git Repository.”\nWhat that means is that you’re going to copy some files from an existing location that my team uses to store the exercise files, also known as a repository. In the future, if we change anything to those files in the repository, you can update your copy, too, to stay up to date.\nIt will ask you for the URL of the repository. That’s where you want to type the URL shown in the slide: https://github.com/arcus/first_steps_r_rstudio_exercises. I’ll copy and paste that into the chat so you have it.\nLater on, you can create other kinds of Projects in your Posit.cloud account using the other options that show up when you click New Project, so that you get a feel for how the other project types work. But I’ll let you do that in your own time.\nFor now, I want to give you a couple of minutes to do these steps. Please do this now! When you’re done creating that new project, give me a nice thumbs up in the chat. [Add “I’ve created my new project from the Git repository” comment to chat]\nSo I’ll share my Posit.cloud window with you now and I’ll do the same thing, in case anyone is stuck. I’m going to log in to my posit.cloud account, and click the New Project button [NOTE: before the session, make sure you have space to make a new project!]. I’ll choose the “from a Git Repo” option.\nNow I’ll copy and paste in the URL of the repository my team maintains, like this.\nAnd then it will think for a couple of minutes and then create a new project and include some files for me that were in the repo. And that’s that!"
  },
  {
    "objectID": "session_2.html#importing-data",
    "href": "session_2.html#importing-data",
    "title": "",
    "section": "Importing Data",
    "text": "Importing Data\n\nImporting / Ingesting data is the first step to analyzing it!\nYou can use “base R” (the factory settings) to ingest data\nBut we suggest using an add-on package called tidyverse instead.\n\n\nGreat, so you have a Project in Posit.cloud. And among the files in that project, we’ve supplied you with some data, some real research data that’s publicly available, to get you started. The first step in the data analysis pipeline is to bring in, or import, or ingest, these are all synonyms that mean the same thing, the data into your R session.\nBase R is the language by itself, and base R has some data ingestion tools, but we like some of the packages that have been built to enrich R and make it better. We really like tidyverse, and this is what lots of people use today in R to work with tabular data, with data that comes in rows and columns. So we’re going to use tidyverse to ingest data and work with data in this series of workshops."
  },
  {
    "objectID": "session_2.html#csv",
    "href": "session_2.html#csv",
    "title": "",
    "section": "CSV",
    "text": "CSV\n\n\nWe’re supplying you with .csv data.\n\n\n\n\nWe’re giving you some CSV data. CSV stands for comma-separated values.\nA .csv file is a plain text file, which means you can open it in a text editor and look at it. Now, this isn’t how we normally open CSVs. Usually we open them not in a text editor, but rather in Microsoft Excel or another spreadsheet program. In case you’ve never seen the plain text version of a CSV, here is an example of what raw csv data looks like when we open it in a text editor. See how it’s literally made up of values, separated by commas? That’s why it’s a comma separated values file!\nHere we have a screenshot of a .csv file with human subject IDs, information about the intervention they received, and some clinical information about them like whether they have ascites or edema and measures like their cholesterol and platelet count.\nThis data structure is called rectangular or “tabular” because it falls into rows and columns, often called a table, where each row has the same number of columns, and each columns has the same number of rows.\nAlso note that this particular .csv file has a header row that instead of data, has a name for each column. .csv files often have such a header row and unless we specify otherwise, when we import this data, R assumes the first line is a header row. Not all .csv files have headers, however, so be aware that you might run across these at some point."
  },
  {
    "objectID": "session_2.html#tidyverse",
    "href": "session_2.html#tidyverse",
    "title": "",
    "section": "Tidyverse",
    "text": "Tidyverse\n\n\n\nA consistent way to organize data\nHuman readable, concise, consistent code\nBuild pipelines from atomic data analysis steps\n\n\n\n\n\nTo import our CSV data, we need some additional data analysis tools. In this course, we will be leveraging the Tidyverse.\nThe Tidyverse is a set of tools that a lot of people use for working with rectangular, or tabular data, the kind of data that comes with rows and columns. Many people, myself included, think that using the tidyverse is the best way to work with tabular data.\nWe won’t explain what tidy data is right now, but the idea of working in a tidy way with tidy data is obviously very central to this group of tools!\nThe tidyverse tries to provide a consistent way to work with data that has clean, easy to read code. And one of the most important things it can provide is the ability to make pipelines that connect small data analysis steps together. We’ll talk about all of this in the next few weeks."
  },
  {
    "objectID": "session_2.html#installing-a-package",
    "href": "session_2.html#installing-a-package",
    "title": "",
    "section": "Installing a Package",
    "text": "Installing a Package\n\n\n(You probably did this already!)\n\nLook in “Files” tab.\n\nGo into the “solutions” folder\nClick on “setup.qmd”.\n\nRun the only code chunk there (green triangle “play” button)\n\n\n\n\n\n\n\n−+\n01:00\n\n\n\n\nIf you were in our first session, you probably already installed tidyverse, and you don’t need to do this. You’re welcome to do it again if you like. But in case something went wrong last time, or you couldn’t make it, I wanted to include this slide today.\nIn the lower right pane of your project, you should see a “Files” tab. Go into the “solutions” folder there and click on “setup.qmd”. That will open up our version of the setup document. If you made your own setup file in the exercises folder, your version might will look a little different than the one we built, and that’s okay.\nGo ahead and open that file and run the only cell there, by clicking the green play button in the code cell, the green triangle button.\nYou will get a lot of output in your console window if you’re installing this for the first time, and that’s usually just fine. I’ll give you a minute to do this.\nI’ll also say that this is the last time we’ll pause to do the setup. After this, I’m going to assume that in sessions 3, 4, and 5, everyone is ready to go, and I won’t slow down to make sure people have Posit.cloud set up and ready to go."
  },
  {
    "objectID": "session_2.html#installing-and-loading-packages",
    "href": "session_2.html#installing-and-loading-packages",
    "title": "",
    "section": "Installing and Loading Packages",
    "text": "Installing and Loading Packages\n\n\n\n\ninstall.packages(\"tidyverse\") downloads the package (do once)\nlibrary(tidyverse) loads the package (do once per session)\n\n\nThe tidyverse is package. A package is a collection of functions, sometimes some data, and often some really useful help documentation that we can use to extend the basic R language, also known as “base R”. Tidyverse is kind of a special package because it in fact contains multiple other packages that work together to do a number of tasks related to importing, reshaping, visualizing, and analyzing data. It’s a package of packages.\nYou can download and install a package with the command install.packages. For example, to install the tidyverse package, you would use install.packages(\"tidyverse\"). Each package you want to use needs to be installed only once on each computer or each Posit.cloud project for any given version of that package.\nMake sure you include the quotes around package names when you use install.packages. Learning when to use quotes is kind of a trial and error thing in R, but you should use it here.\nAfter you’ve installed the package, in order to use the functions that it provides, you also need to tell R to load the package into memory. This is done with the command library. And you want to use library every single time you start a new R session, and usually we do that by adding the library command to the top of any script we write that will use that package. We’re going to talk about a function in the next couple of slides that comes from the tidyverse, for example. To use that function, we have to use library(tidyverse) to make sure we have access to it."
  },
  {
    "objectID": "session_2.html#read_csv",
    "href": "session_2.html#read_csv",
    "title": "",
    "section": "read_csv()",
    "text": "read_csv()\ndata_frame &lt;- read_csv(file_name)\n\nread_csv ingests a file, creating an object that exists in your R environment\nYou have to ingest (import, bring in, other synonym…) data into the R environment to work with it\n\n\n\nWe can ingest or import CSV files using the read_csv() function.\nWe use read_csv and other data ingestion functions to bring data into our R environment, because we have to bring data into R to be able to work with the data.\nLet’s go over this read_csv function, which reads a CSV file into what we call a data frame object.\nA data frame is a type of object in R that holds tabular data. “Tabular” is just a word that means “table shaped”, with rows and columns."
  },
  {
    "objectID": "session_2.html#functions",
    "href": "session_2.html#functions",
    "title": "",
    "section": "Functions",
    "text": "Functions\ndata_frame &lt;- read_csv(file_name)\n\nread_csv is the function name\n\n\nNow is a good moment to explain functions in the context of programming languages like R.\nread_csv() is a function. Functions are defined in base R and also in packages. In our case, read_csv belongs to a package called “readr”, which the one of the packages that is included in the tidyverse suite of packages. In our case, let’s say we’ve already installed and loaded tidyverse. That means we can use read_csv.\nYou may be familiar with functions from math class. A function takes an input, say an ‘x’ value, and returns an output, say a ‘y’ value. Functions in computer programming also take inputs and return outputs.\nFor the read_csv function, the input is the file name of a CSV file; and the output is a data frame, a new object created in your R environment, which contains the contents of that .csv file."
  },
  {
    "objectID": "session_2.html#functions-1",
    "href": "session_2.html#functions-1",
    "title": "",
    "section": "Functions",
    "text": "Functions\ndata_frame &lt;- read_csv(file_name)\n\nread_csv is the function name\nfile_name is an argument passed to the function.\n\n\nIn the snippet of code that reads in a csv to create a data frame, we have a function with an argument that creates an object.\nThe input that goes into a function is called an argument. The argument to a function gets put in parentheses.\nA function can have zero, one, or many arguments. If there is more than one argument, we use commas to separate them."
  },
  {
    "objectID": "session_2.html#functions-2",
    "href": "session_2.html#functions-2",
    "title": "",
    "section": "Functions",
    "text": "Functions\ndata_frame &lt;- read_csv(file_name)\n\nread_csv is the function name\nfile_name is an argument passed to the function.\ndata_frame is a named object that will receive the output of the function.\n\n\nThe output of the read_csv function is a data frame object. You want to store that data inside of a named object so you can use it in R later for other things. For example, after you read in your csv, you might want to summarize or visualize your data.\nI can choose to name this data frame what I want, but there are some good standards for how to name things that you’ll read about in today’s exercise files. I could read in data and just call it “my_data”, but it’s probably better to call it “flu_trends” or some other descriptive name."
  },
  {
    "objectID": "session_2.html#functions-3",
    "href": "session_2.html#functions-3",
    "title": "",
    "section": "Functions",
    "text": "Functions\ndata_frame &lt;- read_csv(file_name)\n\nread_csv is the function name\nfile_name is an argument passed to the function.\ndata_frame is a named object that will receive the output of the function.\n&lt;- is the assignment operator that makes what’s on the right be assigned to the named object on the right\n\n\nTo put the output of the read_csv function into a named object, we use the assignment operator.\nThe assignment operator is a less than symbol followed by a dash and resembles an arrow pointing left."
  },
  {
    "objectID": "session_2.html#read_csv-1",
    "href": "session_2.html#read_csv-1",
    "title": "",
    "section": "read_csv()",
    "text": "read_csv()\n\n\nLet’s put these pieces together to load our covid data set.\nConsider this line of code. We could speak aloud the line of code above saying “covid underscore testing gets read underscore csv of covid underscore testing dot csv”, or we could gloss over the underscores and just say “covid testing” and “read csv”. When we talk with others about R, this is often what we do, so just be aware that you sometimes have to intuit underscores when someone is reading aloud or talking through a code issue.\nYou might notice that one of our “covid testing” objects is put in quotes and the other one isn’t.\nTo be honest, quotes in R can be super confusing. A couple of rules are:\n\nNames of objects in R’s environment don’t get quotes.\nLiteral file names are always put in quotes.\nWhen you’re referring to a string value, like “abc123” or “jones”, you have to use quotes.\nNames of packages, when you’re installing especially, use quotes\nBut in library, putting the package name in quotes is optional!\n\nSometimes, either quoting or not quoting works. This is one of the things where you will get a good sense but not until after some trial and error. If a line of code you’re working on doesn’t seem to be working as you expect, sometimes adding or removing quotes can be a good place to start when trying to figure it out."
  },
  {
    "objectID": "session_2.html#qa-was-this-effective",
    "href": "session_2.html#qa-was-this-effective",
    "title": "",
    "section": "Q&A / Was This Effective?",
    "text": "Q&A / Was This Effective?\nIn our team, we like to measure our effectiveness.\nGoals:\n\nBe able to explain when to use install.packages() and when to use library()\nIngest data from a .csv and look at it\nRender a quarto document to an output format (html)\n\n\nNow, this is not the final slide, but we’re a group that likes to measure our effectiveness and make changes based on what we learn. So before we do questions and answers, we like to make sure to give our learners a poll to see if we made a good use of your time. We’re going to ask if we were effective in reaching our goals today, and those goals are on the screen in order to help you answer that question. Once you answer that poll, feel free to type a question into chat."
  },
  {
    "objectID": "session_1.html#welcome",
    "href": "session_1.html#welcome",
    "title": "",
    "section": "Welcome",
    "text": "Welcome\nThese slides available at: https://arcus.github.io/first_steps_in_r_rstudio_skills_series/session_1.html\n\nUse keyboard arrow keys to\n\nadvance ( → ) and\ngo back ( ← )\n\nType “s” to see speaker notes\nType “?” to see other keyboard shortcuts\n\n\nAs we prepare to get started, I’d like to encourage you to open these slides on your own browser, so you will have them available to refer to later. There are also a number of links you may want to click on. I’ll copy paste that URL, where the slide deck is located, into chat, so everyone has it.\nThis first slide is just to help you navigate this slide deck if you look at these slides on your own! And yes, there are ample speaker notes, so if you missed something I said, chances are it’s going to be in the speaker notes of the slide."
  },
  {
    "objectID": "session_1.html#about-arcus-your-presenter",
    "href": "session_1.html#about-arcus-your-presenter",
    "title": "",
    "section": "About Arcus / Your Presenter",
    "text": "About Arcus / Your Presenter\n\n\nArcus is an initiative by the Research Institute aimed at promoting data discovery and reuse and increasing research reproducibility.\n\nArcus app: https://arcus.chop.edu\nArcus Sharepoint site: https://chop365.sharepoint.com/sites/Arcus\n\nAmong the many teams in Arcus, I represent Arcus Education!\n\n\n\n\n\nThanks again for joining us, and welcome to our session today! I’d like to begin by briefly introducing myself and introducing Arcus, for those of you who may not be familiar with us. My name is ______ [add pronouns here if you want], and I’ll be leading today’s session.\nArcus is an initiative by the Research Institute aimed at promoting data discovery and reuse and increasing research reproducibility throughout the research lifecycle, as you can see in the graphic on the right. [Pause, give folks a few secs to peruse the image].\nChanging the paradigm of research is a big undertaking, and it requires a broad approach.\nWe aim to improve data reuse and research reproducibility at CHOP through technology, including Arcus labs and applied data science, through the use of data archiving and cataloging, and by way of education.\nYou can find out more by checking out the Arcus application website (please note, there are some pre-requisites to using the app, such as human subjects protection training and signing our terms of use). I’ve added just a very small screenshot of part of what the Arcus application website looks like on the slide on the left side. [Pause].\nYou can also, without any prerequisites, look at our Arcus Sharepoint site, which has a calendar of events and lots more information about Arcus.\nAnd finally, a little more about me: I work in Arcus Education. Our role is to support CHOP scientists by helping researchers acquire data science skills. That’s why we have Skills Series like this one!"
  },
  {
    "objectID": "session_1.html#arcus-education",
    "href": "session_1.html#arcus-education",
    "title": "",
    "section": "Arcus Education",
    "text": "Arcus Education\n\n\n\n\nArcus education provides data science training to researchers …\n(and often this is useful to non-researchers too!).\nhttps://arcus.chop.edu/i-want-to/arcus-education\nEmail us! arcus-education@chop.edu\n\n\nThe Arcus Education team does lots of different kinds of education. We’ve been around since 2017, and we work one on one with researchers in office hours, we write how-to guides to help people understand how to use Arcus tools, we create asynchronous modules that people can use to acquire skills in their own time, and we do synchronous events like this one.\nSometimes we focus on Arcus customers, on researchers at CHOP who are doing research within the Arcus data sharing paradigm, and sometimes we broaden our reach to larger audiences, because we know that helping everyone acquire data science skills will help improve the conduct of science at CHOP and help build a data-driven workforce.\nPlease check out that education page and find out more about some of our services. You can see I’ve added a screenshot of that page to the slide here on the left side. You can also email us at arcus dash education at chop dot edu."
  },
  {
    "objectID": "session_1.html#first-steps-in-r-and-rstudio",
    "href": "session_1.html#first-steps-in-r-and-rstudio",
    "title": "",
    "section": "First Steps in R and RStudio",
    "text": "First Steps in R and RStudio\nArcus Education provides “Skills Series” for the entire CHOP community.\nThis Skills Series is a 5-session series aimed at helping you take your first steps in R and RStudio!\n\nSession 1: Review and Setup\nSession 2: Projects and File Ingestion\nSession 3: Exploring Data Visually, Using ggplot2\nSession 4: Selecting Data Using dplyr\nSession 5: Putting it All Together: Communicating Findings\n\n\nOne of our methods in Education is the Skills Series, and that’s what you’re in today.\nIn this series, we’re going to take five sessions to help you make your first steps in R and RStudio. If you’ve never coded in R or used the RStudio software, and you want some support to get started, this is a great workshop series for you.\nAfter you finish these five sessions, you’ll have a little experience with R and RStudio, and you’ll have done things like ingest data, made data visualizations, and subset specific data you want to study more closely."
  },
  {
    "objectID": "session_1.html#session-1-itinerary",
    "href": "session_1.html#session-1-itinerary",
    "title": "",
    "section": "Session 1 Itinerary",
    "text": "Session 1 Itinerary\nReview and Setup (see also: Demystifying R and RStudio)\n\nQuick review of R, RStudio, and “literate statistical programming”\nPosit.cloud: our environment for this course\nGit and GitHub: Out of scope but very useful!\nYour first Quarto Document\n\nGoals:\n\nUse Source and Visual views in RStudio to experiment with how markdown gets rendered into attractive and descriptive text\nCreate a new code chunk in a Quarto document\nRun a code chunk in a Quarto document\n\n\nSo let’s get started with this first session. In this session we’re going to very rapidly review the basics about what R and RStudio are, along with some basics about literate statistical programming, Quarto, and Posit.cloud. Those were all the subjects of a previous Skills Series entitled “Demystifying R and RStudio”, so if today feels too fast, you can always go back and review that material.\nWe’ll also quickly describe what Git and GitHub provide.\nOur goals for today are three-fold.\nBy the end of the session I want you to use source and visual mode in RStudio to work with markdown, I want you to create a new code chunk in Quarto, and I want you to run a code chunk in Quarto. And don’t worry if you don’t know what any of that means! We’ll get there together."
  },
  {
    "objectID": "session_1.html#r-vs-rstudio",
    "href": "session_1.html#r-vs-rstudio",
    "title": "",
    "section": "R Vs RStudio",
    "text": "R Vs RStudio\n\n\n\n\n\n\n\n\nR Programming language for data analysis\n\nRStudio Integrated development environment (IDE)\n\n\nLet’s begin by distinguishing between R and RStudio.\nThe first logo you see here is for R. R is a statistical programming language that’s great for doing data analysis. There are several features that make R attractive for people who work with data.\nSo that’s R, it’s a language with a lot of benefits.\nThen, there’s RStudio. RStudio was the original name of a company as well as the name of a piece of software the company makes. A couple of years ago, the company changed its name from RStudio to Posit, but they kept the old name on at least some of their software.\nYou can think of RStudio (the software) as a fancy text editor for writing R code. The technical term for a fancy text editor for writing code is “Integrated Development Environment”, or I-D-E.\nOne of the things you can do in RStudio really well is write code in a particular paradigm called literate statistical programming, and that’s what we’re going to talk about next."
  },
  {
    "objectID": "session_1.html#lsp-example-quarto",
    "href": "session_1.html#lsp-example-quarto",
    "title": "",
    "section": "LSP Example (Quarto)",
    "text": "LSP Example (Quarto)\n\n\n\n\nIn Literate Statistical Programming, we not only use code, but also describe what we do in human language, with things like headers, bullet points, and other formatting to make it easier for humans to make sense of the code.\n\n\nLiterate statistical programming is computer code (that’s what makes it programming) that analyzes data (that’s what makes it statistical), and does so interlaced with detailed human language that describes what’s happening in the code (that’s what makes it literate). Here’s an example.\nHere is a snippet of a script my team wrote, and you can see that it has some description of what the code is doing, to help humans. We put things like a header, a paragraph, and a bulleted list, to make things very readable. And then we also wrote the code, which is what we compose for the computer.\nThis is what literate statistical programming looks like, and working in R and RStudio is a great way to get started working this way. This kind of document, by the way, is called a Quarto document. It includes R language but also includes text that has special formatting called “markdown”. You may have also heard the term “R Markdown”, which is practically the same thing. It’s an older term that preceded the word “Quarto”.\nI want to get you creating Quarto documents as soon as possible, so let’s transition to talking about how to get you started working with R and RStudio right away!"
  },
  {
    "objectID": "session_1.html#posit.cloud-for-learning-only",
    "href": "session_1.html#posit.cloud-for-learning-only",
    "title": "",
    "section": "Posit.Cloud (for learning only!)",
    "text": "Posit.Cloud (for learning only!)\nYou can use R and RStudio using online services like https://posit.cloud. Sign up for your ‘Cloud Free’ tier, it’s what we’ll use for this series.\nPosit.cloud is a great place for learning or practice with public datasets, BUT is not a safe or compliant place to put your regulated data.\n\n\n\n\n\n\n\n\n\n−+\n02:00\n\n\n\n\nWhen we teach R and RStudio, it can be next to impossible to deal with everyone’s different kinds of installation issues while they’re trying to get set up and deal with IS, get issues ironed out with their access permissions, and so on.\nThat’s why we have our students use Posit.cloud to learn R and RStudio. Posit.cloud is an online, cloud based service provided by Posit, the company that makes the RStudio software. It’s really reliable and it has a very generous free tier! It means that as teachers we can concentrate on our learners really acquiring skills without being bogged down by download and install problems. Using Posit.cloud makes things a lot easier for everyone. Even if you already have R and RStudio installed locally, please use Posit.cloud for this Skills Series, because we do not have the time in a webinar with this many students to help you with your particular setup.\nHOWEVER, we want to make one thing very clear! Posit.cloud is absolutely NOT an appropriate place for regulated health care data. It’s for practicing and learning using public datasets. If you’re going to use R for CHOP data, you should start the process of getting R and RStudio installed on your CHOP device so that you can transfer those skills to real-life work right away. If you want to learn more about that, there are slides about that in the Demystifying R and RStudio Skills Series that will help you figure out how to work with DTS to get that software installed.\nFor now, please, if you already have a Posit.cloud account, please log in to it. If you don’t have a Posit account, please go to https://posit.cloud and create a free account, that’s the lowest tier. You want FREE, not basic. Free. When you have your Posit account created, please give us a thumbs up on the comment in the chat, so I can measure progress. I’ll give you two minutes to start and we’ll see where we stand. [Click the timer, and copy/paste the comment “I have a Posit.cloud account and I’m logged in there!” into chat]."
  },
  {
    "objectID": "session_1.html#git-and-github-out-of-scope",
    "href": "session_1.html#git-and-github-out-of-scope",
    "title": "",
    "section": "Git and GitHub: Out of scope",
    "text": "Git and GitHub: Out of scope\n… but very useful version control software.\nVersion control allows you to track, for text-based files:\n\nWhat changed (the file name, the line numbers, the actual text)\nWhen (date and time)\nBy whom (username / ID)\nWhy (the person changing will add a message)\n\n(And that means no more analysis_final.R, analysis_final_with_changes.R, analysis_final_final_final_please_why.R)\n\nGit and GitHub are complex and very useful software. We could do a skills series, or in fact several skills series, just on these! If anyone uses them for work and wants to let us know how often they use it or what they use it for, drop a message in chat. I’m curious to see how other people use version control at CHOP!\nVersion control software allows you to record changes to text-based files, including what changed in the file or files, when the change was made, who made the change, and why. Much like the relationship between R and RStudio, Git is the original software and GitHub was built to make using Git easier, and helpful but not necessary.\nWe won’t go into all the details about how to use these software packages, but we use them daily in my team including for managing the files for these workshops. When we start hands-on coding, you’ll be hearing me mention GitHub. You’ll get the exercise files from there to work with. If there’s one thing I hope you remember about Git and GitHub, it’s that they are very useful, and if you find them a real pain in the neck at first, hang in there, because they really truly are worth the effort to learn.\nAnd the reason I’m bringing this up will become evident in the next couple of slides. I’m going to recommend that if you get R and RStudio installed that you also get Git and GitHub Desktop installed on your CHOP computer as well. Let’s briefly talk about getting things installed at CHOP."
  },
  {
    "objectID": "session_1.html#working-with-r-at-chop",
    "href": "session_1.html#working-with-r-at-chop",
    "title": "",
    "section": "Working with R at CHOP",
    "text": "Working with R at CHOP\n\nWe work with regulated data\nIRB protocols and other regulations might override what I say here!\nYou can work with R and RStudio on a CHOP device\n\nYou will probably have to request an install via a service ticket\nYou’ll need a cost center / grant / project number (even though there’s no cost)\nYes, this software has been used at CHOP before\nYou’ll need to give a reason (“I need to analyze data for my job…”)\nYou’ll need to provide the MAC address of your computer\n\n\n\nFirst, a few caveats to keep in mind. At CHOP, we work with sensitive data, whether that’s health care data, research data, or trade secrets about our enterprise. We want to be careful. You will almost certainly need to put in a ticket to get the right software installed on your CHOP device. At this point, if you’re not already following along in the slides, I’m going to really encourage you to grab this slide link because this slide and the next will have important information that will be useful for you when you decide to work with R and RStudio. I will also point out that I do not work for DTS and I cannot approve or install software for you… you have to go through the formal channels here and I don’t have any shortcuts!\nEven though all of these software are free, you’ll need a Cost Center (or grant fund) to add to your request. Get that from your manager, administrative staff, or other leadership within your area. There will be no charge, but DTS uses this information for tracking resource utilization. You’ll be asked if this is software that’s already in use at CHOP – it certainly is. You’ll be asked to provide a justification, and that’s usually that you need this to do data analysis for your job. And finally, you’ll have to provide information about your workstation, including the MAC address of your computer."
  },
  {
    "objectID": "session_1.html#what-to-get-installed",
    "href": "session_1.html#what-to-get-installed",
    "title": "",
    "section": "What To Get Installed",
    "text": "What To Get Installed\nWhat I recommend you install / get installed on your own CHOP device:\n\nR – the language we use to clean, analyze, and visualize data\nRStudio Desktop – an IDE for writing R\nGit – version control software that will allow you to easily get the latest version of our course materials and will also be helpful for tracking changes in your own projects\nGitHub Desktop – a helper, or “client” software that makes working with Git easier\n\n\nWe’ve already talked about all of these products. In addition to R and RStudio, I also highly recommend getting Git and GitHub Desktop installed as well. They work really well with RStudio, and even if you’re not ready to work with version control software now, you might want to work with these programs in the future, so it can be helpful to have everything installed all at once. Each of these links can take you to more information about installing these programs, which can be helpful for talking to DTS or your boss."
  },
  {
    "objectID": "session_1.html#researchers-only-at-chop",
    "href": "session_1.html#researchers-only-at-chop",
    "title": "",
    "section": "Researchers ONLY at CHOP",
    "text": "Researchers ONLY at CHOP\n(You’ll need a research cost center to refer to for most of these)\n\nIf you work with the High Performance Compute cluster (HPC or Respublica), you can request an RStudio session by logging in to Interactive Apps and choosing RStudio.\nYou can request a VDI that includes RStudio.\nYou can request an Arcus lab for a well-defined research project you’re planning. The Arcus lab includes RStudio.\n\n\nIf you’re a researcher at CHOP, there are additional places you might want to use R and RStudio. I won’t go into these in detail, but each of these are links that take you to more information. As a researcher, you can request access to the HPC, also known as Respublica, you can request a VDI, or you can request an Arcus lab. All of these can be ways you can get access to R and RStudio without having to install them on your local computer. And especially if you work with very big data, or you do complex, high-memory data modeling, you might have to use some of these resources, if your computer just doesn’t have enough RAM to do the job. But as always, please make sure that wherever you work with your data, you are in compliance with your IRB protocol and any other regulation."
  },
  {
    "objectID": "session_1.html#qa-was-this-effective",
    "href": "session_1.html#qa-was-this-effective",
    "title": "",
    "section": "Q&A / Was This Effective?",
    "text": "Q&A / Was This Effective?\nWe like to measure our effectiveness (and analyze it in R!)\nGoals:\n\nUse Source and Visual views in RStudio to experiment with how markdown gets rendered into attractive and descriptive text\nCreate a new code chunk in a Quarto document\nRun a code chunk in a Quarto document\n\n\nThe Arcus education team is a group that likes to measure our effectiveness and make changes based on what we learn. So before we do questions and answers and our final slides, we like to make sure to give our learners a poll to see if we made a good use of your time. We’re going to ask if we were effective in reaching our goals today, and those goals are on the screen in order to help you answer that question. Once you answer that poll, feel free to type a question into chat or come off mute and ask to clarify anything I can explain a bit better."
  },
  {
    "objectID": "session_1.html#creating-a-project-in-posit",
    "href": "session_1.html#creating-a-project-in-posit",
    "title": "",
    "section": "Creating a Project in Posit",
    "text": "Creating a Project in Posit\n\nGo to http://posit.cloud (you already have a free account, right?)\nCreate a new project from a Git repository\nURL is https://github.com/arcus/first_steps_in_r_rstudio_exercises (Click OK)\nLook around your RStudio environment!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n−+\n02:00\n\n\n\n\nOK, we’re going to start a new project in Posit.cloud. This is the work that lays the foundation for everything else you’re going to do in this workshop, so get ready!\nWhen you log in to Posit.cloud, you’re going to find the “New Project” button in the upper right. It’s big and dark blue and it stands out a lot. It’s not quite so visible when you use RStudio Desktop on your own computer, just as a heads-up – you have to find “New Project” in the menu system, it’s not a big button like it is in Posit.cloud.\nYou’ll see there are a few options for a new Project. You want to choose “New Project from Git Repository.”\nWhat that means is that you’re going to copy some files from an existing location that my team uses to store the exercise files. This location is known as a repository. In the future, if we change anything to those files in the repository, you can update your copy, too, to stay up to date.\nIt will ask you for the URL of the repository. That’s where you want to type the URL shown in the slide: https://github.com/arcus/first_steps_in_r_rstudio_exercises. I’ll copy and paste that into the chat so you have it.\nLater on, you can create other kinds of Projects in your Posit.cloud account using the other options that show up when you click New Project, so that you get a feel for how the other project types work. But I’ll let you do that in your own time.\nFor now, I want to give you a couple of minutes to do these steps. Please do this now! When you’re done creating that new project, give me a nice thumbs up in the chat. [Add “I’ve created my new project from the Git repository” comment to chat]\nSo I’ll share my Posit.cloud window with you now [Do this] and I’ll do the same thing, in case anyone is stuck. I’m going to log in to my Posit.cloud account, and click the New Project button [NOTE: before the session, make sure you have space to make a new project!]. I’ll choose the “from a Git Repo” option.\nNow I’ll copy and paste in the URL of the repository my team maintains, like this.\nAnd then it will think for a couple of minutes and then create a new project and include some files for me that were in the repo. And that’s that!\nLet’s take a look around at the panes here.\nIn the lower right, you have a file browser, that shows all the files included in this project. It looks like we have a data directory, an exercises directory, a solutions directory, and a few other things that may seem unfamiliar, like a README and a couple of special files.\nOn the left, we see the R console, and that tells us about the version of R we’re running. In the upper right, we have a pane that shares a information about the environment of our project right now, but there’s nothing there yet, really, because we haven’t started working.\nThere’s a really helpful menu across the top, and I want to draw your attention to the Help item, which is the last menu option in the toolbar. If I click there, and go to Cheat Sheets, there are lots of useful one-page cheat sheets to help me remember how to do stuff in R and RStudio. Now, in my bottom right, you can see that my files disappeared, because the “Help” tab is now selected. I can just click on “Files” to bring that file viewer back.\nOK, so that’s it for cloning our project. You now have your own copy of our exercises, and you’re ready to start working on them! So let’s go back to the slide deck.\n[Go back to sharing the slide deck]"
  },
  {
    "objectID": "session_1.html#run-your-first-line-of-code",
    "href": "session_1.html#run-your-first-line-of-code",
    "title": "",
    "section": "Run Your First Line of Code!",
    "text": "Run Your First Line of Code!\nWe’ll go over what this actually accomplishes in Session 2.\nIn your R console (the lower left pane in RStudio), enter the following:\ninstall.packages(\"tidyverse\")\n\n\n\n−+\n02:00\n\n\n\n\nSo this time, I’ll do this first so you can see what it looks like, and then I’ll ask you to do it. In your Posit.Cloud or RStudio Project, the console is one place you can type code. It’s in the lower left pane of your window, and if it’s really small, collapsed into one small line, you can click on it to make it bigger. [Demonstrate what it looks like when the Console is small, if you can]. See how there are tabs that say “Console” and “Terminal” here? I want to be in Console.\nI’m going to go into my Posit.cloud console now and type install dot packages parenthesis quote tidyverse quote parenthesis, being really careful to use the right syntax, with the quotation marks and the right capitalization. [Demonstrate in Posit.Cloud console]. What I’m asking R to do is to go to a central download center and get some extra software that enriches and expands the capacity of R. This extra software is called a package. And this particular package is called “tidyverse”. It’s a really important one, and it’s one you’ll hear us talk about a lot.\nI’ll give you all a couple of minutes to do that now! You might get a lot of output in your console window, and that’s usually just fine. You’ll know it installed properly if ……"
  },
  {
    "objectID": "session_1.html#summary-of-today",
    "href": "session_1.html#summary-of-today",
    "title": "",
    "section": "Summary of Today",
    "text": "Summary of Today\nToday, you:\n\nLearned about R and RStudio\nLearned about Literate Statistical Programming\nSigned up for (or logged into) Posit.cloud\nCloned (copied) our exercise files from GitHub into a new Project\nInstalled the tidyverse package into that Project\n\nThat’s a lot! Give yourselves a round of applause.\n\nOK, so that’s session 1. Today, we talked about R and RStudio and how to acquire R and RStudio, along with Git and GitHub, using CHOP’s software installation request form. We also presented the idea of literate statistical programming, which is a way to write code that is interlaced with rich, descriptive human language that describes and contextualizes the code. And you did a lot of work, too!\nYou either signed up for Posit.cloud for the first time, or you logged in. You created a new project, basing it on a GitHub repository. The technical word for copying a GitHub project is cloning. And you did a package installation as well, using the R console in your Project. Good work!"
  },
  {
    "objectID": "session_1.html#next-session",
    "href": "session_1.html#next-session",
    "title": "",
    "section": "Next Session",
    "text": "Next Session\nProjects and File Ingestion\n\nFile systems can be challenging to navigate\nProjects in RStudio\nInstalling and loading packages\nTabular data ingestion from .csv files\nFunctions in R\n\n\nIn our next session, we’re going to talk about projects, ingesting data, and functions in R. You’ll get to work with real clinical data from the University of California, Irvine Machine Learning Data Repository, so next session is when things start to get fun. Thanks so much for your time, and I look forward to seeing you next time!\n\n\n\n\n\nArcus Education, Children’s Hospital of Philadelphia"
  },
  {
    "objectID": "session_2.html#bonus-content-file-paths-the-where",
    "href": "session_2.html#bonus-content-file-paths-the-where",
    "title": "",
    "section": "Bonus Content: File Paths – the “where”",
    "text": "Bonus Content: File Paths – the “where”\n\nA few tips:\n\n/ means “go into a child directory” (\\ in Windows)\n/ as the first symbol means “start at the root”\n. means “this directory”\n.. means “the parent directory of this directory”\n~ means “my home directory”\n\nRelative path – “directions from here”\nAbsolute path – “directions from anywhere”\nWorking directory – R’s “starting place”\n\nGreat module on Directories and File Paths\n\n[This is bonus content, that I have sort if in my back pocket in case we have time to cover it… choose one option below…]\nOption 1: I won’t go over this slide, but if understanding file paths is interesting to you, there’s a great link there for you to learn more.\nOption 2: Read below.\nIf you have already worked in the command line, you might not have any problem finding files on your computer, but some of you might find it tricky.\nWe’re going to offer a brief handful of tips for understanding file paths, and this is true for all files, not just related to R or data analysis.\nFirst off, Windows is a weird operating system and is unlike the rest of the world’s major operating systems, like Unix, Linux, and MacOS, in how it does file paths. Most file paths use forward slashes, not backward slashes. A slash means you’re going into a new subdirectory or subfolder.\nAnd a few other special symbols are useful to know. A single dot means “this directory”, two dots means “go into the directory that holds the one I’m in now”, and a tilde means “my home directory”, which will differ from user to user on a shared system like a server.\nIn your analysis scripts, you’ll often have to decide if you want to use what’s called a “relative path” or an “absolute path” to tell R where a file is. There are advantages and disadvantages to both, but if we’re using Projects, we can usually use relative paths more easily.\nA relative path assumes that we’re starting in the same place and have common knowledge. So if I was at home, describing where my keyboard is, I’d say “go upstairs to the second floor, and then on the street side of the house, there’s my office. Then go inside and you’ll find the keyboard on my desk.” That makes sense if you’re also inside my house.\nBut if you’re NOT in my house, you’re in your house, which doesn’t have a second floor, you would say, “hey, your directions to go to the second floor don’t make sense. Path not found.” A relative path doesn’t work when we’re not starting in the same place.\nAnd that brings us to the idea of a working directory. Any time you are working in R, it’s running with a starting point, its working directory. The great thing about RStudio is that it does a good job of guessing what you want the working directory to be, based on the file you’re working on. Everyone has the same starting point, so to speak.\nAn absolute path is a path that includes enough detail so that the location is clear from anywhere in the computer. For example, in the physical world, an absolute path would be if I said, “go to 123 Main Street, Philadelphia, go inside, go to the second floor, go to the street side, open the door, go inside, and look on the desk. The keyboard is there.” Now, the benefit is that it’s very precise. But the downside is that it’s lengthy and annoying to construct sometimes, and if you move the whole folder of your project, you’ve changed addresses, essentially, and messed things up.\nIf you want to learn more, we’ve created a module all about file paths that you might find useful, so check that out if you’re interested!"
  },
  {
    "objectID": "session_1.html#create-your-first-r-code",
    "href": "session_1.html#create-your-first-r-code",
    "title": "",
    "section": "Create Your First R Code!",
    "text": "Create Your First R Code!\nThis is what we’re going to do:\n\nCreate a new Quarto Document\nAdd a bit of description describing what you’re planning to do\nAdd a “Code Chunk” doing the thing (in our case, installing tidyverse and rmarkdown)\nRun that code chunk to make sure it works\nSave that Quarto document as setup.qmd in your Exercises folder.\n\n\nThe best way to get started is to just jump in, so that’s what we’re going to do, step by step together. This is what we’re going to do.\nWe’re going to create a new Quarto document, and we’re going to start right away using a literate style. So we’re going to describe what we’re doing, then do the thing, make sure it works, then save our file.\nSo, take just a minute to look at those bullet points, and then I’ll show you some screenshots to guide you on the next few slides. So don’t worry if these instructions are too vague. You’ll get more guidance in just a sec."
  },
  {
    "objectID": "session_1.html#step-1-create-a-new-quarto-document",
    "href": "session_1.html#step-1-create-a-new-quarto-document",
    "title": "",
    "section": "Step 1: Create a New Quarto Document",
    "text": "Step 1: Create a New Quarto Document\n\nGo to File, New File, Quarto Document.\nGive it the title “Setup” and click “Create”.\nTry clicking on “Visual” and “Source” and scrolling up and down!\nYou might get a “Visual mode” pop up box – give it a read.\n\n\n\n\n\n\n\n\n\n\n−+\n01:00\n\n\n\n\nOK, so with each step, I’ll give you about a minute to do this, and then I’ll show you what it looks like and demo it live.\nFirst, please use the File, New File menu option to create a new Quarto document. You’ll be asked to provide a title. Make that title “Setup”. You can put your name in as Author if you want, but don’t change anything else. Then click the “Create” button at the bottom right. When your new file creates, please don’t click anything else, even if you see a yellow banner that is prompting you to install a program. I want you to wait, please. And try both the source and visual view to look at that new file!\nI’ll give you a minute, and then I’ll share my screen and do the same thing as you.\n[Click countdown timer].\nOK, so let me switch my screen over to my own Posit.cloud account, where I’ve got the project open. I’m going to click on File, then New File, and then Quarto Document. I’ll add the word “Setup” to the Title, and click “Create”. Simple as that.\nNow, I want to point out that there’s a banner there that is offering you a shortcut. I do NOT want you to take this shortcut. If you did already, that’s okay, but I want to show you the manual way to install packages, so please don’t click in that yellow banner. It’s a useful message, however, because it’s telling you, hey, for me to be fully effective, you need to install a package, specifically the rmarkdown package. So we’ll use this data in just a sec. \nNow, I’m going to click on these two buttons, Visual and Source, to see two different ways this sample file looks. I’ll get an informational pop up telling me “oh hey, you’re about to enter into Visual mode, here’s some info about that.” If you want to read that later, you can, but just uncheck that box so you can make it pop up again!\nYou can see that the RStudio software has given me some sample code to help guide me. This sample code is something you might hear people call “boilerplate” code. We don’t need this code, but it helps give us a guide to follow. I’m going to scroll up and down, and look at it in both Visual mode and Source mode. This will help you understand how markdown works. You can see the raw markdown by clicking on the Source button, and see things like triangle brackets and double asterisks and hash marks, and then click on Visual to see how that markdown gets rendered into html to have the formatting we want.\nDoes it matter what you use? Source or Visual? Well, for this course we’re going to have you use Source, just so we’re all doing the same thing. But for your future work, it doesn’t really matter. Use what you prefer! Or go back and forth between Source and Visual, to try things out and see what they look like. So for now, click on Source so we’re all seeing the same thing.\nOK, let’s go back to the slides for our next step.\n[Go back to slides.]"
  },
  {
    "objectID": "session_1.html#step-2-add-a-bit-of-description",
    "href": "session_1.html#step-2-add-a-bit-of-description",
    "title": "",
    "section": "Step 2: Add a bit of description",
    "text": "Step 2: Add a bit of description\n\nRemove the existing markdown and code\nStart a new header (“Installing Packages”) with two hash marks (#)\nEnter a blank line\nThen type a description of installing packages\n\n\n\n\n\n\n\n\n−+\n01:00\n\n\n\n\nAgain, I’ll give you about a minute to do this. Delete all the stuff from the line with the header “quarto” (that’s line 7 or 8 if you’re looking in the Source view). Then add a new header and description. I’ll start the timer to give you a chance to do it, then I’ll demo this for you.\n[Click countdown timer].\nOK, so let me switch my screen over to my own Posit.cloud account, where I’ve got the project open.\nI’m going to make sure I’m in “Source” view, and I’m going to put my cursor at the start of line 7. I’ll highlight everything here from line 7 and below, and just hit backspace or delete to remove it.\nNow I’ll put in two hashmarks, which, if you’re an HTML person, will make an H2 header, and put a space after the hashmarks. And I’ll put the text of the header, which can be whatever you want, but I want this to say “Installing Packages.”\nI’ll hit enter two times after this, so that there’s a blank line after my header, and then I’ll just start typing. Maybe I’ll say something like “We need to install some packages.” Now, I’ll explain in session 2 about installing packages and when you need to do that, so don’t worry if you’re not sure what this is actually doing.\nIf I want to see what this kind of formatting looks like when it is rendered into HTML, I can click on the Visual button at the top to see what it looks like. Yep, a header, and some explanatory text below that. Perfect! I’ll go back to Source view for now, and then we can go back to the slides.\n[Go back to slides.]"
  },
  {
    "objectID": "session_1.html#step-3-add-a-code-chunk",
    "href": "session_1.html#step-3-add-a-code-chunk",
    "title": "",
    "section": "Step 3: Add a Code Chunk",
    "text": "Step 3: Add a Code Chunk\n\nPosition your cursor after your explanatory text\nHit enter to make sure there’s a blank line\nThen use the green “+C” button to add a code chunk\nInside that code chunk, type this, exactly: install.packages(c(\"rmarkdown\", \"tidyverse\"))\n\n\n\n\n\n\n\n\n\n\n−+\n01:00\n\n\n\n\nAs usual, I’ll give you a minute to do this. You’re going to add a code chunk. Now, you can certainly do this by typing in all the symbols for a code chunk manually, BUT it’s much easier if you find the “Add a Code Chunk” button, which is a green button with the letter C, and click that.\nOnce you have an empty code chunk, I want you to copy the code there exactly as written, and I’ll explain it in a bit. Go ahead and try it! After a minute I’ll do it, too.\n[Click countdown timer].\nOK, so let me switch my screen over. I’m going to hit enter and move my cursor so that my code chunk is placed after my descriptive text, and after a bit of white space, too. I’ll click on the add a code chunk button.\nDepending on your setup, when you click the “add chunk” button, you might be asked, “what language are you using? What kind of chunk do you want?” And that’s because you can use other languages in RStudio, not just R. But here, we’re just using R. And in this project, it’s going to default to just giving me an R language chunk.\nLet’s look at the anatomy of this empty code chunk.\nFirst, it starts with three backticks (this symbol is NOT the same as a single quote!). Then, there’s the designation of what programming language is going to appear in this code chunk. We’re using the R language, so we’re going to leave this be, with the letter “r” in curly braces.\nThere’s a space to add code, and then the code chunk ends with three more back ticks.\nAnd you can see that visually, it’s grey, to give a little bit of help so we can distinguish between where the code is and where the description is.\nNow, I’m going to type in this code. First, I’ll start by typing install dot packages. As I type, predictive text might appear, and I can just hit enter to accept the suggestion.\nSo I have install.packages and a set of parentheses. Now, inside those parentheses, I want to put in a list. In r, we commonly use what’s called a concatenation to designate a list. And that’s just the letter c, followed by a set of parentheses. So I’ll put c, open parenthesis, and look, the closed parenthesis appears for free. [ Note: you should have install.packages(c())].\nAnd inside that concatenation, I want to put a comma delimited list of package names, with quotes. There are two packages I know I need. From the banner above, I know I need “rmarkdown”. I also know that later in our work together we’re going to use a lot of functionality from the tidyverse set of packages, so I’ll add “tidyverse”.\nTake a look and make sure your code chunk looks like mine.\nOK, let’s go back to the slides! [go back to slides]"
  },
  {
    "objectID": "session_1.html#step-4-run-that-code-chunk",
    "href": "session_1.html#step-4-run-that-code-chunk",
    "title": "",
    "section": "Step 4: Run that Code Chunk",
    "text": "Step 4: Run that Code Chunk\n\nUse the green triangle (“Play” button) on the chunk to run the chunk\nLook in the “Console” for output. It will be verbose, and take a while.\nYou’ll know it’s finished when the prompt &gt; appears in the Console and the Stop sign disappears!\n\n\n\n\n\n\n\n\n\n\n−+\n00:30\n\n\n\n\nAgain, you’ll do this first, then I’ll demo. You’re going to run this code by clicking on the “play” button in the code chunk, and these packages will install. It’ll take a while! And if you mistyped something, you might get an error message. If that happens, don’t panic. Read the error message and see if you can figure out what it’s trying to communicate. I’ll give you just a few seconds to find and click that button, then I’ll demonstrate this step.\n[Click countdown timer].\nOK, so let me switch my screen over. Your code is probably still running, and that’s okay. Let me move my mouse over to the top of my code chunk at the top right corner, and find that green “play” button. I’ll click there, and in the console, I can watch a lot happen.\n[Do the thing]\nOK, so while this is going on I’ll explain that if there are any packages that are dependencies, things that are required to be installed before the packages we want to install can be successfully installed, those will come along for free. So you’re going to see not just rmarkdown and tidyverse get installed, but lots of other underlying packages, too, which rmarkdown and tidyverse rely on and need. When the install is still running, you’ll see a stop sign in the Console, which you can click if you need the process to stop.\nOnce things finish, there will be a prompt in the Console, ready for the next command.\nNow, this is a moment where sometimes people have error messages, so let’s pause here in case there are issues, before we go on.\n[Note – if ppl have issues there is a file in solutions called setup.qmd that they can run instead, so you don’t get bogged down in fixing it]\n…\nOK, so let’s go back to the slides.\n[Go back to slides]"
  },
  {
    "objectID": "session_1.html#step-5-save-that-quarto-document",
    "href": "session_1.html#step-5-save-that-quarto-document",
    "title": "",
    "section": "Step 5: Save that Quarto Document",
    "text": "Step 5: Save that Quarto Document\n\nClick on File, Save\nName your file “setup” (you don’t have to add “.qmd”, but you can!)\nSave it inside the “exercises” folder\n\n\n\n\n\n−+\n00:30\n\n\n\n\nOK, last step! I’m going to ask you to save this file. You shouldn’t ever have to run this code again for this project, but it might be handy to hang on to it anyway. Please use the File menu to save this file. Give it the name setup and save it in “exercises”.\nYou do it, then I’ll do it.\n[Click countdown timer].\nOK, that’s time. I’ll share my Posit.cloud window now, and I want you to notice that my file name here is red and has an asterisk, which is telling me there are unsaved changes. So let’s go into File, then Save. I’m going to type “setup” in the file name, choose “exercises” for the file location, and then “Save”.\nWhen I do that, my file name is no longer red, it’s black, and that is a good visual indicator that I’m caught up, that there are no unsaved changes.\n[Optionally, if there is time, talk about help. This will be covered in Session 2 but in case you need to fill time…\nWhile we’re here, I want to go over getting help in R and RStudio. There are a few places to look.\n\nissue ?install.packages in the console\ntalk about help files and how reading the code at the top and the examples at the bottom can be a good place to start reading help files\nIn the help tab, use the upper right search (not the lower left search-in-topic search) to search for “cor” to find cor.test\nRemind people about the cheat sheets in the Help menu]\n\nLet’s go back to the slides."
  },
  {
    "objectID": "session_1.html#your-chop-kit-optional",
    "href": "session_1.html#your-chop-kit-optional",
    "title": "",
    "section": "Your CHOP Kit (Optional)",
    "text": "Your CHOP Kit (Optional)\nWhat you might want to install / get installed on your own CHOP device:\n\nR – the language we use to clean, analyze, and visualize data\nRStudio Desktop – an IDE for writing R\nGit – version control software that will allow you to easily get the latest version of our course materials and will also be helpful for tracking changes in your own projects\nGitHub Desktop – a helper, or “client” software that makes working with Git easier\n\n\nI said I’d talk about what to do if you wanted to work on your own CHOP device with R and RStudio installed locally, to work safely with CHOP data for work. In addition to R and RStudio, I also highly recommend getting Git and GitHub Desktop installed as well. They work really well with RStudio, and even if you’re not ready to work with version control software now, you might want to work with these programs in the future, so it can be helpful to have everything installed all at once. Each of these links can take you to more information about installing these programs, which can be helpful for talking to DTS or your boss."
  },
  {
    "objectID": "session_2.html#hands-on",
    "href": "session_2.html#hands-on",
    "title": "",
    "section": "Hands-on",
    "text": "Hands-on\n\n\n \n\n\nGo into your First Steps in R and RStudio Exercises project in Posit.cloud\nGo into the File tab in the lower right pane\nFind the “Exercises” folder\nClick on “session_2_exercise.qmd”.\nRead through that file and complete the exercises!\nWe’ll give you a few minutes to complete this.\n\n\n\n\n\n−+\n12:00\n\n\n\n\nOkay, so I want you to spend a big chunk of your time today doing hands-on work. So what you’re going to do is open your Posit.cloud project with the First steps in R and RStudio exercises, and then in the file browser, go to the exercises folder and find session_2_exercise and open it. Then just read that file and do what it says!\nI’ll start the timer here. (You should be around minute 25-30 at this point. You can adjust as needed)\n—– when time is up —-\nOK, so you may not be finished, but I want to demo this, in case anyone had issues. If you did have problems, there is a solutions folder, and you can navigate there by clicking on the File tab in the lower right pane, then “project” in the bread crumbs at the top grey bar of the file navigator, then in the file browser you should see “solutions”. Click there, and then you’ll see solutions for each session.\nBut let’s go through this together. I’m going to open the exercise file and go through it.\n[Go through each thing… it should be pretty straightforward… but leave 5 minutes for the poll / Q&A at least]"
  },
  {
    "objectID": "session_3.html#welcome",
    "href": "session_3.html#welcome",
    "title": "",
    "section": "Welcome",
    "text": "Welcome\nThese slides available at: https://arcus.github.io/first_steps_in_r_rstudio_skills_series/session_2.html\n\nUse keyboard arrow keys to\n\nadvance ( → ) and\ngo back ( ← )\n\nType “s” to see speaker notes\nType “?” to see other keyboard shortcuts\n\n\nAs always, I’d like to encourage you to open these slides on your own browser, and this first slide helps with tips for you to use the slide deck."
  },
  {
    "objectID": "session_3.html#about-arcus-your-presenter",
    "href": "session_3.html#about-arcus-your-presenter",
    "title": "",
    "section": "About Arcus / Your Presenter",
    "text": "About Arcus / Your Presenter\n\n\nArcus is an initiative by the Research Institute aimed at promoting data discovery and reuse and increasing research reproducibility.\n\nArcus app: https://arcus.chop.edu\nArcus Sharepoint site: https://chop365.sharepoint.com/sites/Arcus\n\nAmong the many teams in Arcus, I represent Arcus Education!\n\n\n\n\n\nThanks again for joining us, and welcome to our session today! My name is ______ [add pronouns here if you want], and I’ll be leading today’s session.\nI’ve already talked a bit about Arcus in the first session of this Skills Series, but I’m including the slide here so that you have those links available in case you want to learn more about Arcus."
  },
  {
    "objectID": "session_3.html#arcus-education",
    "href": "session_3.html#arcus-education",
    "title": "",
    "section": "Arcus Education",
    "text": "Arcus Education\n\n\n\n\nArcus education provides data science training to researchers …\n(and often this is useful to non-researchers too!).\nhttps://arcus.chop.edu/i-want-to/arcus-education\nEmail us! arcus-education@chop.edu\n\n\nThe Arcus Education team does lots of different kinds of education, and we’ve already discussed this previously in other workshop sessions. You can always email us at arcus dash education at chop dot edu to ask about how we can help you!"
  },
  {
    "objectID": "session_3.html#first-steps-in-r-and-rstudio",
    "href": "session_3.html#first-steps-in-r-and-rstudio",
    "title": "",
    "section": "First Steps in R and RStudio",
    "text": "First Steps in R and RStudio\nArcus Education provides “Skills Series” for the entire CHOP community.\nThis Skills Series is a 5-session series aimed at helping you take your first steps in R and RStudio!\n\nSession 1: Review and Setup\nSession 2: Projects and File Ingestion\nSession 3: Exploring Data Visually, Using ggplot2\nSession 4: Selecting Data Using dplyr\nSession 5: Putting it All Together: Communicating\n\n\nJust a reminder about what you’re in today.\nThis is a five-session series, and our goal is to help you get started taking your first steps. Today, we’re in session three, right smack dab in the middle of our work together."
  },
  {
    "objectID": "session_3.html#session-3-itinerary",
    "href": "session_3.html#session-3-itinerary",
    "title": "",
    "section": "Session 3 Itinerary",
    "text": "Session 3 Itinerary\nExploring Data Visually, Using ggplot2\n\nggplot2 syntax\nMapping Aesthetics\nSetting Visuals\nColor Palettes\n\nGoals:\n\nDescribe what an “aesthetic mapping” is in ggplot2\nCreate a simple ggplot2 data visualization\nAdd a label (like a title or an x-axis label) to a plot in ggplot2\n\n\nToday, our topic is exploring data visually, using the ggplot2 package. We’ll go over how to use ggplot2, including some specific topics like mapping and setting visual elements and the use of color palettes.\nMy goals for you today include the following. I’d like for you to be able to explain what an aesthetic mapping is in ggplot2, because this is an area where a lot of people tend to stumble. I hope you’ll have been able to create a simple ggplot2 visualization by the end of our session, and I think you’ll be able to add a label to a plot by the end of today. Let’s start by explaining what ggplot2 is!"
  },
  {
    "objectID": "session_3.html#ggplot2",
    "href": "session_3.html#ggplot2",
    "title": "",
    "section": "ggplot2",
    "text": "ggplot2\n{fig-alt=“ggplot2 logo.”}\n\nWe’ll be using the ggplot2 package for creating graphics. ggplot2 is a package that forms part of the tidyverse, so it will get loaded when you load the tidyverse package.\nggplot2 (and its main function, plain old ggplot without the 2) provides a “grammar of graphics” for data visualization. That’s what the “GG” is in ggplot: grammar of graphics. The idea of having a “grammar” for something is actually pretty common in R. Essentially, there should be a consistent way to build any type of “thing” in R, in this case, any type of graph. A common grammar that is easy to repeat every time.\nThe idea of the grammar of graphics is that you should be able to specify any type of graph by specifying the data that goes into it, the type of graph that you want to make, and a mapping that describes how the data should be represented as visual marks on that graph.\nHaving a consistent grammar means that once you learn how to make, say, a histogram, that knowledge can be applied to make a scatter plot or a box plot or a violin plot with little extra effort. This makes it easy to generate lots of different graphs quickly which helps you understand your data more quickly.\nAlso, ggplot2 graphs look great and the package can be used to generate publication-quality plots."
  },
  {
    "objectID": "session_3.html#the-grammar-of-ggplot",
    "href": "session_3.html#the-grammar-of-ggplot",
    "title": "",
    "section": "The “grammar” of ggplot",
    "text": "The “grammar” of ggplot\n\n\n\nStep 1: Pick a tidy data frame to pass to ggplot as an argument\n\n\nggplot(data = cirrhosis_study)\n\n\nStep 2: Pick a “geom” function\n\n\n\n\n\nStep 3: Write aesthetic mappings\n\n\n\n\n\nWe’ll go over each of these steps in detail, but here is the overall grammar we’re going to talk about. There are also optional enrichment steps that you can add that will really make your data visualizations shine, but these are the absolutely required steps for the bare minimum kinds of plots.\nYou first need to choose a tidy data frame. We’ll describe what a tidy data frame is in just a moment.\nThen you will choose a geom, or a kind of visualization, a geometric representation. A geom might be a bar graph, or a line graph, for example. Finally, you’ll tell ggplot how to map the data to the visual parts of the geom you chose. What columns should be shown on which axes, for example?\nLet’s take a closer look at each step."
  },
  {
    "objectID": "session_3.html#step-1-tidy-data",
    "href": "session_3.html#step-1-tidy-data",
    "title": "",
    "section": "Step 1: Tidy Data",
    "text": "Step 1: Tidy Data\n\nColumns measure just one variable and don’t have any merging or combining\nRows each represent just one observation and don’t include variables\nThere’s no merging of cells that make names or values shared\n\n\nA data set can take on a lot of different shapes with different styles of organizing data. The one method or shape that is best suited for data analysis is known as “tidy”.\nWe won’t cover “tidy” data in detail in this workshop. It’s sufficient at this point to know that tidy data is in a rectangular shape with rows and columns, and:\n\nColumns each measure just one variable (so, no “doubling up” with first and last name in the same column, or race and gender in the same column) and\nRows each constitute a single observation (like a patient, or a vial, or a city block) at a point in time\nEach value is in its own cell (with no merging or splitting of cells)"
  },
  {
    "objectID": "session_3.html#untidy-data",
    "href": "session_3.html#untidy-data",
    "title": "",
    "section": "Untidy Data",
    "text": "Untidy Data\n\n\n\nID\nN_Days\nStatus\nAge\nSex\nAHS Status\n\n\n\n\n1_D\n400\nD\n21464\nF\nY/Y/Y\n\n\n2_D\n4500\nC\n20617\nF\nN/Y/Y\n\n\n3_D\n1012\nD\n25594\nM\nN/N/N\n\n\n4_D\n1925\nD\n19994\nF\nN/Y/Y\n\n\n5_P\n1504\nCL\n13918\nF\nN/Y/Y\n\n\n6_P\n2503\nD\n24201\nF\nN/Y/N\n\n\n7_P\n1832\nC\n20284\nF\nN/Y/N\n\n\n8_P\n2466\nD\n19379\nF\nN/N/N\n\n\n9_D\n2400\nD\n15526\nF\nN/N/Y\n\n\n10_P\n51\nD\n25772\nF\nY/N/Y\n\n\n11_P\n3762\nD\n19619\nF\nN/Y/Y\n\n\n12_P\n304\nD\n21600\nF\nN/N/Y\n\n\n13_P\n3577\nC\n16688\nF\nN/N/N\n\n\n14_P\n1217\nD\n20535\nM\nY/Y/N\n\n\n15_D\n3584\nD\n23612\nF\nN/N/N\n\n\n16_P\n3672\nC\n14772\nF\nN/N/N\n\n\n17_P\n769\nD\n19060\nF\nN/Y/N\n\n\n18_D\n131\nD\n19698\nF\nN/Y/Y"
  },
  {
    "objectID": "session_3.html#untidy-data-1",
    "href": "session_3.html#untidy-data-1",
    "title": "",
    "section": "Untidy Data",
    "text": "Untidy Data\n\n\n\n\nArcus Education, Children’s Hospital of Philadelphia"
  },
  {
    "objectID": "session_3.html#tidy-data-shape",
    "href": "session_3.html#tidy-data-shape",
    "title": "",
    "section": "Tidy Data Shape",
    "text": "Tidy Data Shape"
  },
  {
    "objectID": "session_3.html#un-tidy-data-shape",
    "href": "session_3.html#un-tidy-data-shape",
    "title": "",
    "section": "Un-Tidy Data Shape",
    "text": "Un-Tidy Data Shape\n\n\nUntidy\n\n\n\n\nMeasure 1\n\n\nMeasure 2\n\n\nMeasure 3\n\n\nMeasure 4\n\n\n\n\npre\n\n\npost\n\n\npre\n\n\npost\n\n\npre\n\n\npost\n\n\npre\n\n\npost\n        \nTeam 1\n(n=6m, 14f)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        \nTeam 2\n(n=12m,8f)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        \nTeam 3\n(n=10m, 10f)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTeam 4\n(n=5m, 15f)"
  },
  {
    "objectID": "session_3.html#tidy-data",
    "href": "session_3.html#tidy-data",
    "title": "",
    "section": "Tidy Data",
    "text": "Tidy Data\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nID\nN_Days\nStatus\nDrug\nAge\nSex\nAscites\nHepatomegaly\nSpiders\n\n\n\n\n1\n400\nD\nD-penicillamine\n21464\nF\nY\nY\nY\n\n\n2\n4500\nC\nD-penicillamine\n20617\nF\nN\nY\nY\n\n\n3\n1012\nD\nD-penicillamine\n25594\nM\nN\nN\nN\n\n\n4\n1925\nD\nD-penicillamine\n19994\nF\nN\nY\nY\n\n\n5\n1504\nCL\nPlacebo\n13918\nF\nN\nY\nY\n\n\n6\n2503\nD\nPlacebo\n24201\nF\nN\nY\nN\n\n\n7\n1832\nC\nPlacebo\n20284\nF\nN\nY\nN\n\n\n8\n2466\nD\nPlacebo\n19379\nF\nN\nN\nN\n\n\n9\n2400\nD\nD-penicillamine\n15526\nF\nN\nN\nY\n\n\n10\n51\nD\nPlacebo\n25772\nF\nY\nN\nY\n\n\n11\n3762\nD\nPlacebo\n19619\nF\nN\nY\nY\n\n\n12\n304\nD\nPlacebo\n21600\nF\nN\nN\nY\n\n\n13\n3577\nC\nPlacebo\n16688\nF\nN\nN\nN\n\n\n14\n1217\nD\nPlacebo\n20535\nM\nY\nY\nN\n\n\n15\n3584\nD\nD-penicillamine\n23612\nF\nN\nN\nN\n\n\n16\n3672\nC\nPlacebo\n14772\nF\nN\nN\nN\n\n\n17\n769\nD\nPlacebo\n19060\nF\nN\nY\nN\n\n\n18\n131\nD\nD-penicillamine\n19698\nF\nN\nY\nY"
  },
  {
    "objectID": "session_3.html#example-1-untidy-vs-tidy",
    "href": "session_3.html#example-1-untidy-vs-tidy",
    "title": "",
    "section": "Example 1: Untidy vs Tidy",
    "text": "Example 1: Untidy vs Tidy\n\n\nUntidy\n\n\n\n\nMeasure 1\n\n\nMeasure 2\n\n\nMeasure 3\n\n\nMeasure 4\n\n\n\n\npre\n\n\npost\n\n\npre\n\n\npost\n\n\npre\n\n\npost\n\n\npre\n\n\npost\n        \nTeam 1\n(n=6m, 14f)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        \nTeam 2\n(n=12m,8f)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        \nTeam 3\n(n=10m, 10f)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTeam 4\n(n=5m, 15f)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTidy\n\n\n\n\n\nn_m\n\n\nn_f\n\n\nm1_pre\n\n\nm1_post\n\n\nm2_pre\n\n\nm2_post\n\n\nm3_pre\n\n\nm3_post\n\n\nm4_pre\n\n\nm4_post\n        \nTeam 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        \nTeam 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        \nTeam 3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTeam 4"
  },
  {
    "objectID": "session_3.html#example-untidy-vs-tidy",
    "href": "session_3.html#example-untidy-vs-tidy",
    "title": "",
    "section": "Example: Untidy vs Tidy",
    "text": "Example: Untidy vs Tidy\n\n\nUntidy\n\n\n\n\nMeasure 1\n\n\nMeasure 2\n\n\nMeasure 3\n\n\nMeasure 4\n\n\n\n\npre\n\n\npost\n\n\npre\n\n\npost\n\n\npre\n\n\npost\n\n\npre\n\n\npost\n        \nTeam 1\n(n=6m, 14f)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        \nTeam 2\n(n=12m,8f)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        \nTeam 3\n(n=10m, 10f)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTeam 4\n(n=5m, 15f)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOK, let’s say you study group performance. So you have several different groups that you bring into the lab. You’re doing an experiment where you form a team of 20 strangers, and you’re measuring their ability to perform four tasks as a team. You measure their performance before and after having them watch a full season of Dora the Explorer, to see if that improves their creativity and enthusiasm for adventure.\nOn the left is the kind of table you might see published in a journal. It’s compact, but it is not tidy. You can see that the sex makeup of the teams, which varies from team to team, is listed in the rows. But that varies, which means it’s a variable, and variables should go in columns, not rows. And we also have header cells that merge across two columns. This is a perfectly adequate table for publication, but it’s not tidy and not ready for use in the tidyverse.\nWe could make it tidy, and I’m going to show you how in the next slide."
  },
  {
    "objectID": "session_3.html#example-untidy-vs-tidy-1",
    "href": "session_3.html#example-untidy-vs-tidy-1",
    "title": "",
    "section": "Example: Untidy vs Tidy",
    "text": "Example: Untidy vs Tidy\n\n\nUntidy\n\n\n\n\nMeasure 1\n\n\nMeasure 2\n\n\nMeasure 3\n\n\nMeasure 4\n\n\n\n\npre\n\n\npost\n\n\npre\n\n\npost\n\n\npre\n\n\npost\n\n\npre\n\n\npost\n        \nTeam 1\n(n=6m, 14f)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        \nTeam 2\n(n=12m,8f)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        \nTeam 3\n(n=10m, 10f)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTeam 4\n(n=5m, 15f)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTidy\n\n\n\n\n\nIntervention Stage\n\n\nN Males\n\n\nN Females\n\n\nMeasure 1\n\n\nMeasure 2\n\n\nMeasure 3\n\n\nMeasure 4\n\n\n\n\nTeam 1\n\n\nPre\n\n\n6\n\n\n14\n\n\n\n\n\n\n\n\n\n\n\n\nTeam 1\n\n\nPost\n\n\n6\n\n\n14\n\n\n\n\n\n\n\n\n\n\n\nTeam 2\n\n\nPre\n\n\n12\n\n\n8\n\n\n\n\n\n\n\n\n\n\n\nTeam 2\n\n\nPost\n\n\n12\n\n\n8\n\n\n\n\n\n\n\n\n\n\n\nTeam 3\n\n\nPre\n\n\n10\n\n\n10\n\n\n\n\n\n\n\n\n\n\n\nTeam 3\n\n\nPost\n\n\n10\n\n\n10\n\n\n\n\n\n\n\n\n\n\n\nTeam 4\n\n\nPre\n\n\n5\n\n\n15\n\n\n\n\n\n\n\n\n\n\nTeam 4\n\n\nPost\n\n\n5\n\n\n15\n\n\n\n\n\n\n\n\n\n\n\n\nOn the left is our not tidy data, and on the right, I’ve made it tidy.\nLet’s think about what columns are and what rows are. Rows are observations, and the fact is that we observe each team twice, so we’re going to have two rows for each team.\nAnd columns are variables. What can be different from observation to observation? Well, pre versus post is one variable that we think and hope will change the outcome. The number of males and females can differ from group to group, too. These first three columns are just kind of re-arranged a little bit from the information we already had.\nCan everyone see that this is another way to capture the same data? It might not be as compact as what you would put in a print journal, but this is tidy data, which is what will make working in R possible! All the variables are in columns, all the observations are in rows, there’s no doubling up of values."
  },
  {
    "objectID": "session_3.html#tidy-or-not-tidy",
    "href": "session_3.html#tidy-or-not-tidy",
    "title": "",
    "section": "Tidy, or Not Tidy?",
    "text": "Tidy, or Not Tidy?\n\n\n\n\nID_Arm\nN_Days\nStatus\nAge\nSex\nAHS Status\n\n\n\n\n1_D\n400\nD\n21464\nF\nY/Y/Y\n\n\n2_D\n4500\nC\n20617\nF\nN/Y/Y\n\n\n3_D\n1012\nD\n25594\nM\nN/N/N\n\n\n4_D\n1925\nD\n19994\nF\nN/Y/Y\n\n\n5_P\n1504\nCL\n13918\nF\nN/Y/Y\n\n\n6_P\n2503\nD\n24201\nF\nN/Y/N\n\n\n7_P\n1832\nC\n20284\nF\nN/Y/N\n\n\n8_P\n2466\nD\n19379\nF\nN/N/N\n\n\n9_D\n2400\nD\n15526\nF\nN/N/Y\n\n\n10_P\n51\nD\n25772\nF\nY/N/Y\n\n\n11_P\n3762\nD\n19619\nF\nN/Y/Y\n\n\n12_P\n304\nD\n21600\nF\nN/N/Y\n\n\n13_P\n3577\nC\n16688\nF\nN/N/N\n\n\n14_P\n1217\nD\n20535\nM\nY/Y/N\n\n\n15_D\n3584\nD\n23612\nF\nN/N/N\n\n\n16_P\n3672\nC\n14772\nF\nN/N/N\n\n\n17_P\n769\nD\n19060\nF\nN/Y/N\n\n\n18_D\n131\nD\n19698\nF\nN/Y/Y\n\n\n\n\n\nOK, so now I’d like to ask you – is this tidy data? Is there any data out of place, cells that are merged, rows that should be columns, columns that should be rows? The first column is the ID, which has the ID and the arm, which is either drug or placebo. The next column is the length of time the subject remained in the study. The third column is the final disposition of the subject, whether they left the study due to death, organ transplantation, or the end of the study. Then the age of the patient at the time they left the study, the sex of the patient, and their status with regard to ascites, hePATomegaly, and spider angiomas.\nWhat do you think? I’ll invite you to give your reasoning in chat."
  },
  {
    "objectID": "session_3.html#tidy-or-not-tidy-1",
    "href": "session_3.html#tidy-or-not-tidy-1",
    "title": "",
    "section": "Tidy, or Not Tidy?",
    "text": "Tidy, or Not Tidy?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nID\nN_Days\nStatus\nDrug\nAge\nSex\nAscites\nHepatomegaly\nSpiders\n\n\n\n\n1\n400\nD\nD-penicillamine\n21464\nF\nY\nY\nY\n\n\n2\n4500\nC\nD-penicillamine\n20617\nF\nN\nY\nY\n\n\n3\n1012\nD\nD-penicillamine\n25594\nM\nN\nN\nN\n\n\n4\n1925\nD\nD-penicillamine\n19994\nF\nN\nY\nY\n\n\n5\n1504\nCL\nPlacebo\n13918\nF\nN\nY\nY\n\n\n6\n2503\nD\nPlacebo\n24201\nF\nN\nY\nN\n\n\n7\n1832\nC\nPlacebo\n20284\nF\nN\nY\nN\n\n\n8\n2466\nD\nPlacebo\n19379\nF\nN\nN\nN\n\n\n9\n2400\nD\nD-penicillamine\n15526\nF\nN\nN\nY\n\n\n10\n51\nD\nPlacebo\n25772\nF\nY\nN\nY\n\n\n11\n3762\nD\nPlacebo\n19619\nF\nN\nY\nY\n\n\n12\n304\nD\nPlacebo\n21600\nF\nN\nN\nY\n\n\n13\n3577\nC\nPlacebo\n16688\nF\nN\nN\nN\n\n\n14\n1217\nD\nPlacebo\n20535\nM\nY\nY\nN\n\n\n15\n3584\nD\nD-penicillamine\n23612\nF\nN\nN\nN\n\n\n16\n3672\nC\nPlacebo\n14772\nF\nN\nN\nN\n\n\n17\n769\nD\nPlacebo\n19060\nF\nN\nY\nN\n\n\n18\n131\nD\nD-penicillamine\n19698\nF\nN\nY\nY\n\n\n\n\n\nOK, and is this data in a tidy format? This, by the way, is a snippet of the actual data you’re working with in this series.\nLet me know what you think in chat. Yes, indeed, this is tidy data!\nImportantly, for these five workshop sessions, we’re giving you data that’s already in a tidy data format. We’re not going to go over how to make your data tidy, because that work is boring and I want you to have fun doing the exciting stuff that will get you enthusiastic about R. I’m giving you some data that’s artificially beautiful. Real research data is messy, and real clinical data is even messier."
  },
  {
    "objectID": "session_3.html#the-grammar-of-ggplot-1",
    "href": "session_3.html#the-grammar-of-ggplot-1",
    "title": "",
    "section": "The “grammar” of ggplot",
    "text": "The “grammar” of ggplot\n\n\n\nStep 1: Pick a tidy data frame to pass to ggplot as an argument\n\n\nggplot(data = cirrhosis_study)\n\n\nStep 2: Pick a “geom” function\n\n\n\n\n\nStep 3: Write aesthetic mappings\n\n\n\n\n\nSo that was step 1. This is what it looks like in code. This is a very simple example, where we’re just passing the most important piece of information, the name of the tidy data frame, as the first argument to ggplot2.\nLet’s go on to Step 2."
  },
  {
    "objectID": "session_3.html#step-2-pick-a-geom-function",
    "href": "session_3.html#step-2-pick-a-geom-function",
    "title": "",
    "section": "Step 2: Pick a “geom” function",
    "text": "Step 2: Pick a “geom” function\nThere are lots of ways to depict data geometrically:\n\n\n\n\ngeom_histogram()\n\n\n\ngeom_dotplot()\n\n\n\n\n\ngeom_bar()\n\n\n\ngeom_boxplot()\n\n\n\n\n\ngeom_point()\n\n\n\ngeom_line()\n\n\nHere are a few useful geom functions for visualizing data, but there are many more. With these six you can make histograms, bar plots, scatter plots, dot plots, boxplots, and line graphs. Your data is probably very rich, and with the same data, you could show group distributions using a box plot or violin plot, or show time series data using a line plot, or show how two variables interact using a point plot, or show the frequency of various values using a histogram, or show correlation strength using a heatmap, or lots of other things, all with the same tidy data frame. So you have to think about what specific kind of data visualization you want!"
  },
  {
    "objectID": "session_3.html#the-grammar-of-ggplot-2",
    "href": "session_3.html#the-grammar-of-ggplot-2",
    "title": "",
    "section": "The “grammar” of ggplot",
    "text": "The “grammar” of ggplot\n\n\n\nStep 1: Pick a tidy data frame to pass to ggplot as an argument\n\n\nggplot(data = cirrhosis_study) +\n\n\nStep 2: Pick a “geom” function\n\n\ngeom_histogram()\n\n\nStep 3: Write aesthetic mappings\n\n\n\n\n\nSo now we’ve added a bit to our code. We’ve put a plus sign after the first line of code, which is a way to tell ggplot that we’re going to add a new layer to our data visualization. ggplot2 works by allowing you to add layer upon layer of geometric visualizations, labels, themes, and adjustments to your graph, so that you build it up a little at a time. That plus sign says, “I’m not done yet, please keep reading!”.\nThe second line of code says “I’d like this specific shape, please: a histogram.” ggplot knows what a histogram is. So you’re one step closer to that visualization. But you’re not done yet. ggplot knows that it needs one variable to be able to make a histogram. It doesn’t need two, as in the case of, say, a scatter plot of points, where it would need an X and a Y axis value. No, it just needs one value, because it’s going to plot the frequency of various values of this variable. But you haven’t told it which variable you want to use!"
  },
  {
    "objectID": "session_3.html#step-3-aesthetic-mappings",
    "href": "session_3.html#step-3-aesthetic-mappings",
    "title": "",
    "section": "Step 3: Aesthetic Mappings",
    "text": "Step 3: Aesthetic Mappings\n\nAesthetic mappings connect columns to visible attributes.\n\nOK, so aesthetic mappings can be tricky. So if you’re multi-tasking, I need you to stop writing that email, because this is where a lot of people trip up and make mistakes, including me, and I’ve been coding in R for a decade.\n\nAn aesthetic mapping is a rule that tells ggplot how to visualize the data, for example, using color or position, according to the value of a specific column of the data. These are elements that would result in a different looking visualization if you were to change the data being provided. For example, the height of a bar changes depending on the data. Maybe you might show female patients as dots of one color and male patients as dots of another color, so if you correct a patient’s sex in the data, their dot will change color. You’re mapping patient sex to a visible characteristic, color. It’s really important to remember that mapping aesthetics will always come down to selecting a specific column from your data frame.\n\nOf course, there are other visual elements of a data visualization that wouldn’t automatically change if you change the data you provide. For instance, maybe we just like green and we want ALL the points on our graph to be green. We’re not changing the color based on data, we’re not connecting the color to just one column of data, so it’s not considered a mapping. When we’re setting a fixed aesthetic that isn’t affected by data, we don’t put these assignments inside the aes parentheses. We don’t MAP those within aesthetics, we SET those outside."
  },
  {
    "objectID": "session_3.html#aesthetic-mappings",
    "href": "session_3.html#aesthetic-mappings",
    "title": "",
    "section": "Aesthetic Mappings",
    "text": "Aesthetic Mappings\n\n\n\n\n\n\nSpiders\nCholesterol\nAlbumin\n\n\n\n\nY\n261\n2.6\n\n\nY\n302\n4.14\n\n\nN\n176\n3.48\n\n\nY\n244\n2.54\n\n\nY\n279\n3.53\n\n\nN\n248\n3.98\n\n\nN\n322\n4.09\n\n\n\n\n\nSpiders: •• (Color)\nCholesterol: ↔︎ (X axis)\nAlbumin: ↕ (Y axis)"
  },
  {
    "objectID": "session_3.html#your-turn",
    "href": "session_3.html#your-turn",
    "title": "",
    "section": "Your Turn!",
    "text": "Your Turn!\n\nGo to https://posit.cloud and log in.\nFind your First Steps in R and RStudio project and open it\nIn the file browser (lower right), navigate to Exercises\nOpen session_3_exercise.qmd, and start reading and working in it!\nIf you save this file, save it with your initials at the end (rename it).\nIf you get stuck, there’s a solutions file in the “solutions” folder, or jump into chat!\nI’d love for everyone to work quietly for around 10 minutes, and then I’ll demo “Your Turn” 1-6.\nYou can do as many as you like: 1-6 will get you through today’s goals, 7-14 are “bonus content”!\nI’ll stop us all for a couple of closing slides and for Q&A as we get close to the end of the hour."
  },
  {
    "objectID": "session_3.html#your-turn-1",
    "href": "session_3.html#your-turn-1",
    "title": "",
    "section": "Your Turn!",
    "text": "Your Turn!\n\nGo to https://posit.cloud and log in.\nFind your First Steps in R and RStudio project and open it\nIn the file browser (lower right), navigate to Exercises\nOpen session_3_exercise.qmd, and start reading and working in it! Open session_3.qmd if you haven’t already. Work through the exercises of the section.\n\n\n\n\n\nArcus Education, Children’s Hospital of Philadelphia"
  },
  {
    "objectID": "session_3.html#participation-time",
    "href": "session_3.html#participation-time",
    "title": "",
    "section": "Participation Time!",
    "text": "Participation Time!\n\nIn addition to x/y position and color, what other aesthetic mappings can you think of?\n(Hint: things that don’t change when the data changes, like the background color of a graph or the font or title of a graph, aren’t mappings).\nType your answers in the chat!\n\nOkay, time to fire up the chat window again. Type into chat some examples of other aesthetic mappings. Keep in mind that if something is set in a fixed way and it’s the same regardless of the data, that’s not a mapping."
  },
  {
    "objectID": "session_3.html#the-grammar-of-ggplot-3",
    "href": "session_3.html#the-grammar-of-ggplot-3",
    "title": "",
    "section": "The “grammar” of ggplot",
    "text": "The “grammar” of ggplot\n\n\n\nStep 1: Pick a tidy data frame to pass to ggplot as an argument\n\n\nggplot(data = cirrhosis_study) +\n\n\nStep 2: Pick a “geom” function\n\n\ngeom_histogram(aes (x = Cholesterol))\n\n\nStep 3: Write aesthetic mappings\n\n\n(you can put these in either of the 2 lines above…)\n\n\nOK, so we’ve gotten to the mapping bits. We know we have to put an aes function in, but where does it go? The answer is that it can go in a couple of places. We’ve said we want to do a histogram, which only needs a single variable defined, the X axis variable. Let’s say we want to map the Cholesterol column to that x axis. If you want, you can put the aes function that maps your Cholesterol to your x axis all the way at the top, in the ggplot function. The benefit to doing that is that every geom that you add on as a layer will inherit that and will know that Cholesterol maps to the x axis. Some people like doing it that way.\nBut I prefer to put the aes, the aesthetic mapping, in the geom function. That’s because sometimes I will have several different geoms and I want to map different things in different geoms. It’s a little tricky to think about, so for now what I want you to do is put the mapping in the geom you’re working in, but I want you to not be too surprised if you see that some people put it at the top, in the ggplot part of the syntax. That’s okay, too, and it just gets inherited by all the geoms below it."
  },
  {
    "objectID": "session_3.html#aesthetic-mappings-1",
    "href": "session_3.html#aesthetic-mappings-1",
    "title": "",
    "section": "Aesthetic Mappings",
    "text": "Aesthetic Mappings\n\n\n\n\n\n\nSpiders\nCholesterol\nAlbumin\n\n\n\n\nY\n261\n2.6\n\n\nY\n302\n4.14\n\n\nN\n176\n3.48\n\n\nY\n244\n2.54\n\n\nY\n279\n3.53\n\n\nN\n248\n3.98\n\n\nN\n322\n4.09\n\n\n\n\n\nSpiders: •• (Color)\nCholesterol: ↔︎ (X axis)\nAlbumin: ↕ (Y axis)\n\n\nmapping = aes(x = Cholesterol,\n              y = Albumin,\n              color = Spiders)\n              \n              \n\n\nDon’t worry if mapping aesthetics versus setting fixed aesthetics seems a bit fuzzy at first – it can be tricky to grapple with, and will become clearer over time as you gain more experience manipulating visualizations in R. Even advanced coders sometimes mess this up.\nLet’s consider an example in our cirrhosis data frame.\nWe can imagine mapping the values in the “Cholesterol” column, which is numerical, to the x axis. With the “Albumin” column, also numerical, we can map those values to the y axis. And for the column called “Spiders”, which has categorical data with “Y” and “N” values, we can imagine mapping that to colors.\nCan you envision what that graph might look like? It would probably be a scatter plot that would have points of two different colors, at least that’s what I’m picturing in my mind.\nThe mapping in ggplot would be within the aes parentheses, as you see on your screen.\nNote that R automatically figures out reasonable axis limits and a color scale, but you can fine tune this manually."
  },
  {
    "objectID": "session_3.html#summary-of-today",
    "href": "session_3.html#summary-of-today",
    "title": "",
    "section": "Summary of Today",
    "text": "Summary of Today\nToday, you:\n\nLearned about the grammar of graphics\nEvaluated whether data was “tidy” or not\nLearned about mapping data to visual aesthetics\nCreated some simple (and some not-so-simple) data visualizations\nLabeled your data visualizations\nProbably worked with some error messages and maybe some help files\n\nThat’s a lot! Give yourselves a round of applause.\n\nOK, so that’s session 3. Today, we talked about ggplot2. And you did a lot of hands-on work, too! If you have a feeling word you want to drop into chat, I’d love to know how today left you feeling!"
  },
  {
    "objectID": "session_3.html#qa-was-this-effective",
    "href": "session_3.html#qa-was-this-effective",
    "title": "",
    "section": "Q&A / Was This Effective?",
    "text": "Q&A / Was This Effective?\nWe like to measure our effectiveness (and analyze it in R!)\nGoals:\n\nDescribe what an “aesthetic mapping” is in ggplot2\nCreate a simple ggplot2 data visualization\nAdd a label (like a title or an x-axis label) to a plot in ggplot2\n\n\nThe Arcus education team is a group that likes to measure our effectiveness and make changes based on what we learn. So before we do questions and answers and our final slides, we like to make sure to give our learners a poll to see if we made a good use of your time. We’re going to ask if we were effective in reaching our goals today, and those goals are on the screen in order to help you answer that question. Once you answer that poll, feel free to type a question into chat or come off mute and ask to clarify anything I can explain a bit better."
  },
  {
    "objectID": "session_3.html#next-session",
    "href": "session_3.html#next-session",
    "title": "",
    "section": "Next Session",
    "text": "Next Session\nSelecting Data Using dplyr\n\nSelecting columns\nFiltering rows\nCreating new columns\n\n\nIn our next session, we’re going to talk about how to select, reshape, filter, and work with our data using the dplyr package, which is another useful package from the tidyverse suite of tools. I’m looking forward to seeing you there. Thanks so much for your hard work today. If you have questions between today and next week, feel free to email me at paytonk@chop.edu or arcus-education@chop.edu, and have a great rest of your day!\n\n\n\n\n\nArcus Education, Children’s Hospital of Philadelphia"
  },
  {
    "objectID": "session_4.html#welcome",
    "href": "session_4.html#welcome",
    "title": "",
    "section": "",
    "text": "These slides available at: https://arcus.github.io/first_steps_in_r_rstudio_skills_series/session_4.html\n\nUse keyboard arrow keys to\n\nadvance ( → ) and\ngo back ( ← )\n\nType “s” to see speaker notes\nType “?” to see other keyboard shortcuts\n\n\nAs always, I’d like to encourage you to open these slides on your own browser, and this first slide helps with tips for you to use the slide deck."
  },
  {
    "objectID": "session_4.html#about-arcus-your-presenter",
    "href": "session_4.html#about-arcus-your-presenter",
    "title": "",
    "section": "About Arcus / Your Presenter",
    "text": "About Arcus / Your Presenter\n\n\nArcus is an initiative by the Research Institute aimed at promoting data discovery and reuse and increasing research reproducibility.\n\nArcus app: https://arcus.chop.edu\nArcus Sharepoint site: https://chop365.sharepoint.com/sites/Arcus\n\nAmong the many teams in Arcus, I represent Arcus Education!\n\n\n:::\n\nThanks again for joining us. As you know, I’m ______ [add pronouns here if you want], and I’ll be leading today’s session.\nI’ve already talked about this slide previously, and you have these links, so let’s keep going.\n\nArcus Education\n\n\n\n\nArcus education provides data science training to researchers …\n(and often this is useful to non-researchers too!).\nhttps://arcus.chop.edu/i-want-to/arcus-education\nEmail us! arcus-education@chop.edu\n\n\n\nWe’ve already discussed this previously in other workshop sessions, so I’m going to skip this as well. You can always email us at arcus dash education at chop dot edu to ask about how we can help you!\n\n\nFirst Steps in R and RStudio\nArcus Education provides “Skills Series” for the entire CHOP community.\nThis Skills Series is a 5-session series aimed at helping you take your first steps in R and RStudio!\n\nSession 1: Review and Setup\nSession 2: Projects and File Ingestion\nSession 3: Exploring Data Visually, Using ggplot2\nSession 4: Selecting Data Using dplyr\nSession 5: Putting it All Together: Communicating\n\n\nJust a reminder about what you’re in today.\nThis is a five-session series, and our goal is to help you get started taking your first steps. Today, we’re in session four, so we’re in the second half of our work together!\n\n\nSession 4 Itinerary\nSelecting Data Using dplyr\n\nSelecting columns\nFiltering rows\nCreating new columns\n\nGoals:\n\nDescribe what a “factor” variable is in R and why it’s important to use it\nUse “select” and “filter” to subset data\nUse “group by” and “summarize” to get group-level statistics\n\n\nWhat are we going to do today? We’re going to learn about the dplyr package and use it to reshape data, specifically by selecting columns of interest, filtering rows you want to preserve, and creating new columns of data.\nMy goals for you this session are the following. I really want you to understand what a factor variable is in R and why it can be useful to transform some variables to factor. I want you to successfully use select and filter functions, and I want you to use group by and summarize to get some group level statistics before we leave today.\n\n\nBut first: data types\nSome atomic data types in R:\n\ncharacter: “ABC”, “True”, “123”\ninteger (class = numeric): 123, -3, 0\ndouble (class = numeric): 123.0, -3.33\nlogical: True, False\n\nThen there’s the factor – it’s a data structure but acts like a data type in a lot of ways\ntypeof() can give you the data type\n\nIn today’s exercises, I’m going to have you read in the cirrhosis data and do some corrections related to data types, so before anything else, I want to briefly talk about data types in R. There are lots of books and resources that go into data types in depth, so I won’t do that here. There are a couple of numeric types, one for integers and one for decimals, which is called double, and a character type for strings, but what I really want to draw your eye to is that there are special ways to store some kinds of data that you might not have thought of. For example, there is a logical type which holds truth values, namely, True and False. Not the words “True” and “False” – those would be character – , but the abstract values of True and False.\nAnd there’s also this thing called a factor, which is pretty useful for categorical data. And if you collect data where there are categories, like sex or race or comorbid condition, you want to know about factors.\n\n\nFactors\nFactors are categorical data. Categorical / factor data are data in which every observation falls into a set number of values (like drug/placebo, male/female/intersex, etc.)\n\nOrdered:\n\nsmall / medium / large\nstage 1 / stage 2 / stage 3 / stage 4\n\nUnordered:\n\nbenign / malignant\nDelaware / New Jersey / Pennsylvania\n\n\n\nIn the exercises you’ll be working in today, I want you to use a function we’re going to learn in a few minutes to change some character data, some letters, into factors, and it’s important to understand what factors are and why they can be useful and important.\nFactors are categorical data. Factor data are data in which every observation falls into a set number of values. Some categories have a kind of internal order, like small, medium, and large, or disease stage. Some categories don’t have any kind of internal order, like benign or malignant labels or U.S. state.\nIf your data can be described in a set number of discrete categories, you can make that data into a factor variable in R. And often, you want to! It can make it easy to enforce the number of categories and make sure that new data isn’t introduced because of misspelling, accidentally creating a new category you didn’t want, for example.\n\n\nFactors?\nAre these numbers, characters, or factors?\n\n19147\n19103\n19146\n19128\n\nHow we treat these can matter to R in how it treats these data in terms of modeling!\n\nLet’s look at this data. What are these? Are they numbers? Characters? Factors? I haven’t told you what they represent. If these are measurements, like weight in grams, then maybe we should leave these as numbers. But I suspect these are Philadelphia area postal codes.\nAnd if that’s the case, they aren’t really numbers. Yes, these are codes that are made up using numerals, but they don’t represent quantities. They’re just categorical labels for areas of land. We could have called these A, B, C, or purple zone, green zone, and tan zone just as easily.\nBut if we leave them as numbers, R might try to treat them as numbers and try to account for them that way in a model. A model that tries to treat these as a measure of something that a patient has more or less of would be a bad model that could behave unpredictably.\n\n\ndplyr\n\n\n\n\na grammar for transforming data frames\nlibrary(dplyr) OR library(tidyverse)\n\n\n\nOK, so now that we have talked about data types, let’s get into the main topic of the day. dplyr is a play on words with “data” and the useful tool we all have in our toolbox, a pai rof “pliers”. The various functions we’ll use, today are all functions that belong to the dplyr package.\nJust as a reminder, in R, we bring in the functionality of a package by using the library() command. Because dplyr forms part of the tidyverse, we can bring in the useful functions of dplyr by either using the library(dplyr) command or the library(tidyverse) command.\nAs we will see in this last section, each dplyr function takes a data frame, does something with it, and then returns a modified data frame as its output. Because of this, dplyr functions can be strung together to create powerful data analysis pipelines in just a few lines of code.\n\n\nSubsetting Columns vs Rows\n\n\nselect()\n\n\n\n\n\n\n\n\n\n\nfilter()\n\n\n\n\n\n\n\n\n\nOften, you have a large data frame but want to display or use data from only a small part of it, or you want to pull out some of the data out for a separate use. The dplyr package, part of the larger tidyverse set of packages, works great for this purpose.\nLet’s look at how you can subset a data frame, that is, choose only certain columns and/or rows from that data, by using dplyr.\ndplyr provides two functions for subsetting data frames: select() for subsetting columns, and filter() for subsetting rows:\nselect() reshapes data so that it includes only the columns you specify.\nfilter() reshapes data so that it includes only the rows that meet your conditions.\n\n\nselect()\nChoose some columns to preserve in a selection.\nselect(data_frame, [column or columns])\n\nLet’s look at select() first. The select() function extracts columns from a data frame, using the columns as argument(s).\nselect() takes a data frame as its first argument. After that it takes one or more arguments that specify the names of the columns that you want to pick.\n\n\nselect()\nBefore\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nID\nN_Days\nStatus\nDrug\nAge\nSex\n…\nTryglicerides\nPlatelets\nProthrombin\nStage\n\n\n\n\n1\n400\nD\nD-penicillamine\n21464\nF\n…\n172\n190\n12.2\n4\n\n\n2\n4500\nC\nD-penicillamine\n20617\nF\n…\n88\n221\n10.6\n3\n\n\n3\n1012\nD\nD-penicillamine\n25594\nM\n…\n55\n151\n12\n4\n\n\n4\n1925\nD\nD-penicillamine\n19994\nF\n…\n92\n183\n10.3\n4\n\n\n5\n1504\nCL\nPlacebo\n13918\nF\n…\n72\n136\n10.9\n3\n\n\n\n\nSo we’re going to start with a data frame. You can see here that I haven’t put in all the rows and columns, the ellipses here represent columns I haven’t included, and I’ve only put in the first five rows. But hopefully this is recognizably the cirrhosis dataset.\nLet’s say I want a version of this data that only preserves a few columns of this dataset.\n\n\nselect()\nBefore\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nID\nN_Days\nStatus\nDrug\nAge\nSex\n…\nTryglicerides\nPlatelets\nProthrombin\nStage\n\n\n\n\n1\n400\nD\nD-penicillamine\n21464\nF\n…\n172\n190\n12.2\n4\n\n\n2\n4500\nC\nD-penicillamine\n20617\nF\n…\n88\n221\n10.6\n3\n\n\n3\n1012\nD\nD-penicillamine\n25594\nM\n…\n55\n151\n12\n4\n\n\n4\n1925\nD\nD-penicillamine\n19994\nF\n…\n92\n183\n10.3\n4\n\n\n5\n1504\nCL\nPlacebo\n13918\nF\n…\n72\n136\n10.9\n3\n\n\n\nUsing the select function\nselect(cirrhosis_study, ID, N_Days, Status, Drug) (prints to screen) new_thing &lt;- select(cirrhosis_study, ID, N_Days, Status, Drug) (saves it)\n\nLet’s examine the code on this slide.\nThis select statement will take the data frame cirrhosis_data, and return a new data frame that only has the columns I indicate.\nAn important point to note here is that select will not modify the original data frame but simply returns the altered data frame you asked for. It will simply print out the result in the console or in your R Markdown document. If you want to capture the modified data frame you need to assign it to a named object using the arrow operator.\nIn my case, I’m telling the select function to only hang on to four columns in the cirrhosis_study data frame, and I mention them by name. Note that I don’t have to put quotes around these column names, because they refer to objects, in this case, whole columns that the select statement already knows about.\n\n\nselect()\nBefore\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nID\nN_Days\nStatus\nDrug\nAge\nSex\n…\nTryglicerides\nPlatelets\nProthrombin\nStage\n\n\n\n\n1\n400\nD\nD-penicillamine\n21464\nF\n…\n172\n190\n12.2\n4\n\n\n2\n4500\nC\nD-penicillamine\n20617\nF\n…\n88\n221\n10.6\n3\n\n\n3\n1012\nD\nD-penicillamine\n25594\nM\n…\n55\n151\n12\n4\n\n\n4\n1925\nD\nD-penicillamine\n19994\nF\n…\n92\n183\n10.3\n4\n\n\n5\n1504\nCL\nPlacebo\n13918\nF\n…\n72\n136\n10.9\n3\n\n\n\nUsing the select function\nselect(cirrhosis_study, ID, N_Days, Status, Drug)\nAfter\n\n\n\nID\nN_Days\nStatus\nDrug\n\n\n\n\n1\n400\nD\nD-penicillamine\n\n\n2\n4500\nC\nD-penicillamine\n\n\n3\n1012\nD\nD-penicillamine\n\n\n4\n1925\nD\nD-penicillamine\n\n\n5\n1504\nCL\nPlacebo\n\n\n\n\nAny questions about that?\n\n\nParticipation Time!\nWhich of the following will select the Ascites column from the cirrhosis_study data frame and capture the result in a data frame named newdata?\nA) newdata = select(Ascites, cirrhosis_study)\nB) newdata &lt;- select(cirrhosis_study, Ascites)\nC) select(newdata, cirrhosis_study, Ascites)\nD) newdata &lt;- select(cirrhosis_study, ascites)\nE) Both B and D\n\n\n\n−+\n01:00\n\n\n\n\nGreat, we have some folks saying [whatever], others are suggesting [whatever]. The answer is B.\nA isn’t correct, because the arguments are in the wrong order. The first argument in the tidyverse functions we’re studying today is always going to be the data frame you want to work with. That means the first argument should be cirrhosis.\nC isn’t correct because you have to use the assignment arrow to save the new, one-column-only data frame to an object called newdata. You don’t pass the name you want to apply to the object as an argument.\nD isn’t right because capitalization matters!\nSo E is also clearly incorrect.\n\n\nfilter()\nChoose some conditions to filter the rows you want to keep.\nfilter(data_frame, [some condition or conditions for rows])\n\nOne of the most important dplyr functions to know about is filter(). filter() extracts rows, and it does that based on logical criteria, or a condition that can be evaluated to be true (keep that row as part of our subset) or false (don’t keep that row).\nLike select(), filter() takes a data frame as its first argument. The second argument is a condition or logical test. R then performs that logical test on each row of the dataset and returns all rows in which the logical test was true.\nTo extract rows that meet logical criteria, we write code that looks like this, and we’ll replace the three dots with one or more logical conditions that the row has to meet.\n\n\nfilter()\nBefore\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nID\nN_Days\nStatus\nDrug\nAge\nSex\n…\nTryglicerides\nPlatelets\nProthrombin\nStage\n\n\n\n\n1\n400\nD\nD-penicillamine\n21464\nF\n…\n172\n190\n12.2\n4\n\n\n2\n4500\nC\nD-penicillamine\n20617\nF\n…\n88\n221\n10.6\n3\n\n\n3\n1012\nD\nD-penicillamine\n25594\nM\n…\n55\n151\n12\n4\n\n\n4\n1925\nD\nD-penicillamine\n19994\nF\n…\n92\n183\n10.3\n4\n\n\n5\n1504\nCL\nPlacebo\n13918\nF\n…\n72\n136\n10.9\n3\n\n\n\n\nLet’s take a look at an example. Here I have that same shortened version of our cirrhosis data frame, and I want only to look at the subjects who unfortunately died during the course of the study. I’ll filter by their Status, and I want their status to be equal to the letter D.\n\n\nfilter()\nBefore\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nID\nN_Days\nStatus\nDrug\nAge\nSex\n…\nTryglicerides\nPlatelets\nProthrombin\nStage\n\n\n\n\n1\n400\nD\nD-penicillamine\n21464\nF\n…\n172\n190\n12.2\n4\n\n\n2\n4500\nC\nD-penicillamine\n20617\nF\n…\n88\n221\n10.6\n3\n\n\n3\n1012\nD\nD-penicillamine\n25594\nM\n…\n55\n151\n12\n4\n\n\n4\n1925\nD\nD-penicillamine\n19994\nF\n…\n92\n183\n10.3\n4\n\n\n5\n1504\nCL\nPlacebo\n13918\nF\n…\n72\n136\n10.9\n3\n\n\n\nUsing the filter function\nfilter(cirrhosis_study, Status == \"D\")\n\nNotice that I put the letter D in quotes, because it’s possible that I have a variable or a data frame in my environment. For example, maybe D is set equal to the name “David”, or something like that. But that’s not what I want. I’m not referring to some object called D that R should be looking for, I mean the literal letter D. So I put it in quotes.\nNotice that we’re using a double equals here. That’s very important!\n\n\nfilter()\nBefore\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nID\nN_Days\nStatus\nDrug\nAge\nSex\n…\nTryglicerides\nPlatelets\nProthrombin\nStage\n\n\n\n\n1\n400\nD\nD-penicillamine\n21464\nF\n…\n172\n190\n12.2\n4\n\n\n2\n4500\nC\nD-penicillamine\n20617\nF\n…\n88\n221\n10.6\n3\n\n\n3\n1012\nD\nD-penicillamine\n25594\nM\n…\n55\n151\n12\n4\n\n\n4\n1925\nD\nD-penicillamine\n19994\nF\n…\n92\n183\n10.3\n4\n\n\n5\n1504\nCL\nPlacebo\n13918\nF\n…\n72\n136\n10.9\n3\n\n\n\nUsing the filter function\nfilter(cirrhosis_study, Status == \"D\")\nAfter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nID\nN_Days\nStatus\nDrug\nAge\nSex\n…\nTryglicerides\nPlatelets\nProthrombin\nStage\n\n\n\n\n1\n400\nD\nD-penicillamine\n21464\nF\n…\n172\n190\n12.2\n4\n\n\n3\n1012\nD\nD-penicillamine\n25594\nM\n…\n55\n151\n12\n4\n\n\n4\n1925\nD\nD-penicillamine\n19994\nF\n…\n92\n183\n10.3\n4\n\n\n\n\n\n\n\nA Potential Pitfall!\n\nError: Problem with filter() input ..1. x Input ..1 is named. ℹ This usually means that you’ve used = instead of ==.\n\nOR\n\nError: unexpected ‘=’\n\nOR\n\ninvalid (do_set) left-hand side to assignment\n\n\nOne common issue to be aware of is the difference between the single equals and the double equals operators.\nIn R, using a single equals sign assigns a value. It demands, “make these things equal.”\nThe double equals sign does not assign, but compares. It asks “are these things equal?”.\nThat’s why we use double equals in the context of a logical test that compares two values.\nIf you use the wrong kind of equals, you’ll get an error. This is a very common mistake, and one you’re almost guaranteed to accidentally commit at one point or another! This is what some of those scary errors look like!\n\n\nLogical Operators\n\n\n\n\n\n\n\n\nlogical expression\nmeans\nexample\n\n\n\n\nx &lt; y\nless than\nCholesterol &lt; 200.\n\n\nx &gt; y\ngreater than\nN_Days &gt; 3000\n\n\nx == y\nequal to\nAscites == Edema\n\n\nx &lt;= y\nless than or equal to\nBilirubin &lt;= 2.0\n\n\nx &gt;= y\ngreater than or equal to\nCopper &gt;= 100\n\n\nx != y\nnot equal to\nStatus != \"D\".\n\n\nis.na(x)\na missing value\nis.na(Platelets)\n\n\n!is.na(x)\nnot a missing value\n!is.na(SGOT)\n\n\n\n\nHere are some important logical operators to know about. They will all come in handy when you’re filtering rows of a data frame. x and y each represent expressions, which could be column names or constant values or a combination thereof.\nWe’ve already seen the double equals. There are also the less than or and greater than operators. These operators also come as “or equal to” versions.\nUse exclamation point equals (some people say “bang equals”) if you want to select rows in which a value is not equal to another value.\nis.na() is how you can test for missing values (NA in R). This comes in handy when you want to remove missing values from your data, which we’ll see later.\n\n\nYour Turn\nWhich of these would successfully filter the cirrhosis_study data frame to only subjects who received the placebo?\nA) filter(cirrhosis_study, Drug == Placebo)\nB) filter(cirrhosis_study, Drug = \"Placebo\")\nC) filter(cirrhosis_study, Drug == \"Placebo\")\nD) filter(cirrhosis_study, drug == \"Placebo\")\n\n\n\n−+\n01:00\n\n\n\n\nHere we have another multiple choice to see if you’re on your toes. Only one of these is correct? Which one? Post what you think in chat.\n\nA is wrong because “Placebo” is a character string (it’s not a named object or a number, it’s a string that needs to be quoted). B is wrong because you’re trying to do a comparison with a single equals. C is correct! D is wrong because of capitalization.\n\n\nThe Pipe Operator %&gt;% or |&gt;\nThe pipe operator is %&gt;% (from the magrittr package, part of the tidyverse), or |&gt; (part of base R starting with version 4.1.0).\n\nLet’s talk about the pipe operator, which we can use to build pipelines!\nOne of the most powerful concepts in the tidyverse suite of packages is the pipe operator, which is written in two possible ways:\n\npercent, greater than, percent (%&gt;%) (this is the original pipe which gets included as part of dplyr and tidyverse)\nvertical pipe, greater than (|&gt;) (this is a newer option, and is now “native”, meaning it comes from base R, if you’re using R version 4.1.0 or later)\n\n\n\nThe Pipe Operator\n\n\n\n\n\n\nPasses the object on the left as the first argument to the function on the right\ncirrhosis %&gt;% filter(Bilirubin &lt;= 3) is equivalent to filter(cirrhosis_study, Bilirubin &lt;= 3)\nOR, if you use the newer pipe:\ncirrhosis |&gt; filter(Bilirubin &lt;= 3) is equivalent to filter(cirrhosis_study, Bilirubin &lt;= 3)\n\n\nBoth pipe operators pass the object on its left as the first argument to the function on its right.\nIn this workshop, we’ll use both kinds of pipe in code examples and quiz questions, so that you get used to seeing them both.\nThose two lines of code are equivalent.\nIn both cases we’re taking the data frame, passing it as the first argument to the filter() function, and adding a condition that we’re filtering by.\nWe could say the same thing of the second line of blue code on your screen which uses the newer pipe.\n\n\nPipes make Output into the next Input!\ncirrhosis %&gt;%\n  filter(Copper &gt;= 100) %&gt;%\n  select(Bilirubin, Platelets, Stage)\n\nStart with the cirrhosis data frame. THEN, to that:\nFilter so that we get only certain rows THEN, to that:\nSelect so that we get only certain columns.\n\n\nHere’s why the pipe (%&gt;% or |&gt;) is so useful.\n“Tidy” functions like select(), filter(), and others we’ll see later always have as first argument a data frame, and they always return a data frame as well. Data frame in, data frame out.\nThis makes it possible to create a pipeline in which a data frame object is handed from one dplyr function to the next. The data frame result of step 1 becomes the data frame starting point for step 2, then the result of step 2 becomes the starting point for step 3, and so on.\nYou might wonder why we’ve put each step in its own line. Is this a requirement? No, it’s not. Many R users like to use whitespace (new lines, tabs, spaces, indents) to make their code more human readable.\nBy connecting logical steps, you can get a pipeline of data analysis steps which are concise and also fairly human readable. You can think of the pipe symbol as the word “then…”, describing the steps in order.\nThis approach to coding is powerful because it makes it much easier for someone who doesn’t know R well to read and understand your code as a series of instructions.\nI want to ask you… could I change the order of the select and filter steps here? Why or why not?\n\n\nYour Turn\nRewrite (in your head or jot down) the following statement with a pipe:\nselect(mydata, first_name, last_name)\n\n\n\n−+\n01:00\n\n\n\n\nOK, I want to see if you grasp this concept, as it’s pretty important, moving forward. How would you rewrite the statement on your screen, select mydata comma first name comma last name, and use the pipe syntax instead? Share what you think the answer is.\n…\nYep, that’s exactly right! You’d write mydata, the pipe symbol, and then select first name comma last name. Any questions on that?\n\n\nYour Turn\nRewrite (in your head or jot down) the following statement with a pipe:\nselect(mydata, first_name, last_name)\nmy_data %&gt;% select(first_name, last_name)\n(OR you might also see or use)\nmy_data |&gt; select(first_name, last_name)\n\nmutate()\nCreate new or updated, optionally calculated columns.\nmutate(data_frame, [name = value])\n\nLet’s say you want to add a new column to your data frame, or update a column by changing it in some way (say, convert kilograms to pounds). dplyr has a function for that, too!\nmutate() is an extremely useful dplyr function, and you can use it to make new variables / columns. That’s what we’ll use it for here. You can also use mutate() to change existing columns (say, turn an entire column lowercase or round or scale a numeric value).\nLike all dplyr functions, mutate() takes a data frame as its first argument. After that, you tell it what to name the new column and what should be in it. This is done using name-value expressions.\nIn name-value expression, you have:\n\na name\nan equals sign (=), and\na value\n\n\n\nmutate()\nBefore\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nID\nN_Days\nStatus\nDrug\nAge\nSex\n…\nTryglicerides\nPlatelets\nProthrombin\nStage\n\n\n\n\n1\n400\nD\nD-penicillamine\n21464\nF\n…\n172\n190\n12.2\n4\n\n\n2\n4500\nC\nD-penicillamine\n20617\nF\n…\n88\n221\n10.6\n3\n\n\n3\n1012\nD\nD-penicillamine\n25594\nM\n…\n55\n151\n12\n4\n\n\n4\n1925\nD\nD-penicillamine\n19994\nF\n…\n92\n183\n10.3\n4\n\n\n5\n1504\nCL\nPlacebo\n13918\nF\n…\n72\n136\n10.9\n3\n\n\n\n\nOK, so let’s say that I want to understand more intuitively how long my subjects stayed in the trial, and I want to see the number of years, not just the number of days, they stayed. I want to make a new column that I’ll create by converting N_Days to Years by dividing that by 365.25 and then rounding to two decimal places.\n\n\nmutate()\nBefore\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nID\nN_Days\nStatus\nDrug\nAge\nSex\n…\nTryglicerides\nPlatelets\nProthrombin\nStage\n\n\n\n\n1\n400\nD\nD-penicillamine\n21464\nF\n…\n172\n190\n12.2\n4\n\n\n2\n4500\nC\nD-penicillamine\n20617\nF\n…\n88\n221\n10.6\n3\n\n\n3\n1012\nD\nD-penicillamine\n25594\nM\n…\n55\n151\n12\n4\n\n\n4\n1925\nD\nD-penicillamine\n19994\nF\n…\n92\n183\n10.3\n4\n\n\n5\n1504\nCL\nPlacebo\n13918\nF\n…\n72\n136\n10.9\n3\n\n\n\nUsing the mutate function\nmutate(cirrhosis_study, N_Years = round(N_Days / 365.25, 2))\n\nI’ll give my new column a name, N_Years. I don’t really love capitals in my variable names, but I think consistency is the lesser evil here. And I’ll give the calculation. Take the N_Days column, divide it by 365.25, round that to two decimal places, and that’s the value of the new column.\n\n\nmutate()\nBefore\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nID\nN_Days\nStatus\nDrug\nAge\nSex\n…\nTryglicerides\nPlatelets\nProthrombin\nStage\n\n\n\n\n1\n400\nD\nD-penicillamine\n21464\nF\n…\n172\n190\n12.2\n4\n\n\n2\n4500\nC\nD-penicillamine\n20617\nF\n…\n88\n221\n10.6\n3\n\n\n3\n1012\nD\nD-penicillamine\n25594\nM\n…\n55\n151\n12\n4\n\n\n4\n1925\nD\nD-penicillamine\n19994\nF\n…\n92\n183\n10.3\n4\n\n\n5\n1504\nCL\nPlacebo\n13918\nF\n…\n72\n136\n10.9\n3\n\n\n\nUsing the mutate function\nmutate(cirrhosis_study, N_Years = round(N_Days / 365.25, 2))\nAfter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nID\nN_Days\nStatus\nDrug\nAge\nSex\n…\nTryglicerides\nPlatelets\nProthrombin\nStage\nN_Years\n\n\n\n\n1\n400\nD\nD-penicillamine\n21464\nF\n…\n172\n190\n12.2\n4\n1.1\n\n\n2\n4500\nC\nD-penicillamine\n20617\nF\n…\n88\n221\n10.6\n3\n12.32\n\n\n3\n1012\nD\nD-penicillamine\n25594\nM\n…\n55\n151\n12\n4\n2.77\n\n\n4\n1925\nD\nD-penicillamine\n19994\nF\n…\n92\n183\n10.3\n4\n5.27\n\n\n5\n1504\nCL\nPlacebo\n13918\nF\n…\n72\n136\n10.9\n3\n4.12\n\n\n\n\nAnd you can see that it’s put it at the end here. But let me show you a trick on how to fix that!\n\n\nPiping it all together\n\nReduce columns to just a few\nReduce rows ()\nAdd new column\nReorder the columns so it makes better sense\n\n\nPiping it all together\nBefore\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nID\nN_Days\nStatus\nDrug\nAge\nSex\n…\nTryglicerides\nPlatelets\nProthrombin\nStage\n\n\n\n\n1\n400\nD\nD-penicillamine\n21464\nF\n…\n172\n190\n12.2\n4\n\n\n2\n4500\nC\nD-penicillamine\n20617\nF\n…\n88\n221\n10.6\n3\n\n\n3\n1012\nD\nD-penicillamine\n25594\nM\n…\n55\n151\n12\n4\n\n\n4\n1925\nD\nD-penicillamine\n19994\nF\n…\n92\n183\n10.3\n4\n\n\n5\n1504\nCL\nPlacebo\n13918\nF\n…\n72\n136\n10.9\n3\n\n\n\n\nAs per usual, we’ll start here.\n\n\nPiping it all together\nBefore\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nID\nN_Days\nStatus\nDrug\nAge\nSex\n…\nTryglicerides\nPlatelets\nProthrombin\nStage\n\n\n\n\n1\n400\nD\nD-penicillamine\n21464\nF\n…\n172\n190\n12.2\n4\n\n\n2\n4500\nC\nD-penicillamine\n20617\nF\n…\n88\n221\n10.6\n3\n\n\n3\n1012\nD\nD-penicillamine\n25594\nM\n…\n55\n151\n12\n4\n\n\n4\n1925\nD\nD-penicillamine\n19994\nF\n…\n92\n183\n10.3\n4\n\n\n5\n1504\nCL\nPlacebo\n13918\nF\n…\n72\n136\n10.9\n3\n\n\n\nUsing the select function\ncirrhosis |&gt;\nselect(ID, N_Days, Status, Drug)\nAfter\n\n\n\nID\nN_Days\nStatus\nDrug\n\n\n\n\n1\n400\nD\nD-penicillamine\n\n\n2\n4500\nC\nD-penicillamine\n\n\n3\n1012\nD\nD-penicillamine\n\n\n4\n1925\nD\nD-penicillamine\n\n\n5\n1504\nCL\nPlacebo\n\n\n\n\nSo our first step is to take the cirrhosis data frame and then push that through a pipe to a select function, where we winnow it down to just a few columns. This “after” is going to become the “before” of our next step!\n\n\nPiping it all together\nBefore\n\n\n\nID\nN_Days\nStatus\nDrug\n\n\n\n\n1\n400\nD\nD-penicillamine\n\n\n2\n4500\nC\nD-penicillamine\n\n\n3\n1012\nD\nD-penicillamine\n\n\n4\n1925\nD\nD-penicillamine\n\n\n5\n1504\nCL\nPlacebo\n\n\n\nUsing the select and filter functions\ncirrhosis |&gt;\nselect(ID, N_Days, Status, Drug) |&gt;\nfilter(Status == \"D\")\nAfter\n\n\n\nID\nN_Days\nStatus\nDrug\n\n\n\n\n1\n400\nD\nD-penicillamine\n\n\n3\n1012\nD\nD-penicillamine\n\n\n4\n1925\nD\nD-penicillamine\n\n\n\n\nIn our filter step, we START with what we ended with at the end of our select step. We filter from that!\n\n\nPiping it all together\nBefore\n\n\n\nID\nN_Days\nStatus\nDrug\n\n\n\n\n1\n400\nD\nD-penicillamine\n\n\n3\n1012\nD\nD-penicillamine\n\n\n4\n1925\nD\nD-penicillamine\n\n\n\nUsing the select, filter, and mutate functions\ncirrhosis |&gt;\nselect(ID, N_Days, Status, Drug) |&gt;\nfilter(Status == \"D\") |&gt;\nmutate(N_Years = round(N_Days/365.25,2))\nAfter\n\n\n\nID\nN_Days\nStatus\nDrug\nN_Years\n\n\n\n\n1\n400\nD\nD-penicillamine\n1.1\n\n\n3\n1012\nD\nD-penicillamine\n2.77\n\n\n4\n1925\nD\nD-penicillamine\n5.27\n\n\n\n\nOK, so again our “after” from last step became our “before for this step, and we’ve used mutate to add a column. We’re getting really close. But we want our columns to be in a different order! Let’s use”select” again!\n\n\nPiping it all together\nBefore\n\n\n\nID\nN_Days\nStatus\nDrug\nN_Years\n\n\n\n\n1\n400\nD\nD-penicillamine\n1.1\n\n\n3\n1012\nD\nD-penicillamine\n2.77\n\n\n4\n1925\nD\nD-penicillamine\n5.27\n\n\n\nUsing the select, filter, mutate, and select again functions\ncirrhosis |&gt;\nselect(ID, N_Days, Status, Drug) |&gt;\nfilter(Status == \"D\")  |&gt;\nmutate(N_Years = round(N_Days/365.25,2)) |&gt;\nselect(ID, starts_with(\"N_\"), everything())\nAfter\n\n\n\nID\nN_Days\nN_Years\nStatus\nDrug\n\n\n\n\n1\n400\n1.1\nD\nD-penicillamine\n\n\n3\n1012\n2.77\nD\nD-penicillamine\n\n\n4\n1925\n5.27\nD\nD-penicillamine\n\n\n\n\nI’m introducing some tricks here. I could have just put the columns by name in that last select statement: ID comma N Days comma N Years comma Status comma Drug. But what if I had fifty columns, not five? That could be annoying. I wanted to introduce you to a couple of helper functions. starts_with (and there’s also ends_with and contains) can help you get all of the variables that have a certain naming pattern. And “everything” in this context gets everything that hasn’t already been mentioned by name.\n\n\nGroup By and Summarize\nA very common use case is to divide your data into groups, and get information about each group.\n\n\n\n\n\n\nGroup by combined with summarize is a way for us to lump cases together and then get a statistic for each group. For example, maybe you want the median blood sugar for girls and the median blood sugar for boys in your study, or the maximum wait time for King of Prussia emergency department patients and the maximum wait time for University City emergency department patients.\nWhen you use group by, you have to tell R how to separate your cases into groups. In the image here, there are three groups, each of which is represented by a different shade of gold. Any variable that is categorical data can be used to group. For example, you can group by sex, or race, or zip code. Maybe these three groups are three states, like New Jersey, Pennsylvania, and Delaware!\nOnce you have your data in groups, you can then use the summarize command to get summary statistics for each group. The summary for each group is represented in blue in this small image.\nSummarizing can take lots of different forms! Sometimes you want to know how big the group is, how many members it has. Sometimes you want to know what the average value of something is per group, or what the maximum value is. You can also summarize and give several different measures for each group, like maximum, minimum, mean, and median. It looks like in this image there are two values given for each group. Maybe we have two values for New Jersey, Pennsylvania and Delaware, like the number of patients we have in each state and the number of patients in each state using Medicaid.\n\n\nGroup By and Summarize\nNote that when you do math on null values (NA) in R, the answer is always NA, so a lot of times in R you have to explicitly say “remove the NA values” in order to get a value.\nThis code appears in your exercise file, so you can try it there!\ncirrhosis |&gt;\n  group_by(Hepatomegaly) |&gt;\n  summarize(Mean_Cholesterol = mean(Cholesterol, na.rm = TRUE), \n            Median_Cholesterol = median(Cholesterol, na.rm = TRUE))\n\nYour Turn!\n\nGo to https://posit.cloud and log in.\nFind your First Steps in R and RStudio project and open it\nIn the file browser (lower right), navigate to Exercises\nOpen session_4_exercise.qmd, and start reading and working in it!\nIf you save this file, save it with your initials at the end (rename it).\nIf you get stuck, there’s a solutions file in the “solutions” folder, or jump into chat!\nI’d love for everyone to work quietly for around 15 minutes, and then I’ll demo some of the solution.\nI’ll stop us all for a couple of closing slides and for Q&A as we get close to the end of the hour.\n\n\nRecap\n\n\n\n\n\n\n\n\nselect() subsets columns by name\n\n\n\n\n\n\n\n\n\n\nfilter() subsets rows by a logical condition\n\n\n\n\n\n\n\n\n\n\nmutate() creates new calculated columns or changes existing columns\n\n\n\n\n\n\n\n\n\n\nUse the pipe operator %&gt;% to combine dplyr functions into a pipeline\n\n\n\n\n\n\n\n\n\n\ngroup_by() with summarize() gives per-group statistics\n\n\n\nTo recap, dplyr is a package you can load in R that provides a grammar for transforming data frames. Some of the key dplyr functions are:\nselect(), which subsets columns by name filter(), which subsets rows by a logical condition, and mutate(), which creates new calculated columns or changes existing columns\nAdditionally, dplyr and other tidyverse packages make use of the pipe operator, which can be used to string together dplyr functions into a pipeline that performs several transformations.\nFinally, group_by() and summarize() work together to allow you to calculate per-group summary statistics.\n\n\nCheatsheet (more dplyr functions!)\n\n\n\n\n\n\nRStudio creates and distributes a number of cheatsheets for various purposes. You can find them by clicking in the Help menu in RStudio – try that now! Here’s an image of the dplyr cheatsheet. As you can see, there are lots of other functions that dplyr offers.\nOther dplyr functions include arrange(), distinct(), group_by() (which is especially helpful when combined with summarize()), and many more!\n\n\nSummary of Today\nToday, you:\n\nLearned about file types\nLearned about dplyr and its functions\nBuilt pipelines of select, filter, and mutate\nWorked with factor variables\nPossibly learned new things about working in RStudio, like chunk names\n\nThat’s a lot! Give yourselves a round of applause.\n\nOK, so that’s session 4. Today, we talked about dplyr And you did a lot of hands-on work, too! If you have a feeling word you want to drop into chat, I’d love to know how today left you feeling!\n\n\nQ&A / Was This Effective?\nWe like to measure our effectiveness (and analyze it in R!)\nGoals:\n\nDescribe what a “factor” variable is in R and why it’s important to use it\nUse “select” and “filter” to subset data\nUse “group by” and “summarize” to get group-level statistics\n\n\nThe Arcus education team is a group that likes to measure our effectiveness and make changes based on what we learn. So before we do questions and answers and our final slides, we like to make sure to give our learners a poll to see if we made a good use of your time. We’re going to ask if we were effective in reaching our goals today, and those goals are on the screen in order to help you answer that question. Once you answer that poll, feel free to type a question into chat or come off mute and ask to clarify anything I can explain a bit better.\n\n\nNext Session\nBringing it all together!\nScientific communication and data visualization in a notebook\n\nIn our next session, we’re going to build a final notebook together, where you have some independent work and get to make your own decisions on what to look at and prioritize. I’m looking forward to seeing you there. Thanks so much for your hard work today. If you have questions between today and next week, feel free to email me at paytonk@chop.edu or arcus-education@chop.edu, and have a great rest of your day!"
  },
  {
    "objectID": "session_4.html#arcus-education",
    "href": "session_4.html#arcus-education",
    "title": "",
    "section": "Arcus Education",
    "text": "Arcus Education\n\n\n\n\nArcus education provides data science training to researchers …\n(and often this is useful to non-researchers too!).\nhttps://arcus.chop.edu/i-want-to/arcus-education\nEmail us! arcus-education@chop.edu\n\n\n\nWe’ve already discussed this previously in other workshop sessions, so I’m going to skip this as well. You can always email us at arcus dash education at chop dot edu to ask about how we can help you!"
  },
  {
    "objectID": "session_4.html#first-steps-in-r-and-rstudio",
    "href": "session_4.html#first-steps-in-r-and-rstudio",
    "title": "",
    "section": "First Steps in R and RStudio",
    "text": "First Steps in R and RStudio\nArcus Education provides “Skills Series” for the entire CHOP community.\nThis Skills Series is a 5-session series aimed at helping you take your first steps in R and RStudio!\n\nSession 1: Review and Setup\nSession 2: Projects and File Ingestion\nSession 3: Exploring Data Visually, Using ggplot2\nSession 4: Selecting Data Using dplyr\nSession 5: Putting it All Together: Communicating\n\n\nJust a reminder about what you’re in today.\nThis is a five-session series, and our goal is to help you get started taking your first steps. Today, we’re in session four, so we’re in the second half of our work together!"
  },
  {
    "objectID": "session_4.html#session-3-itinerary",
    "href": "session_4.html#session-3-itinerary",
    "title": "",
    "section": "Session 3 Itinerary",
    "text": "Session 3 Itinerary\nSelecting Data Using dplyr\n\nSelecting columns\nFiltering rows\nCreating new columns\n\nGoals:\n\nDescribe what a “factor” variable is in R and why it’s important to use it\nUse “select” and “filter” to subset data\nUse “group by” and “summarize” to get group-level statistics\n\n\nWhat are we going to do today? We’re going to learn about the dplyr package and use it to reshape data, specifically by selecting columns of interest, filtering rows you want to preserve, and creating new columns of data.\nMy goals for you this session are the following. I really want you to understand what a factor variable is in R and why it can be useful to transform some variables to factor. I want you to successfully use select and filter functions, and I want you to use group by and summarize to get some group level statistics before we leave today."
  },
  {
    "objectID": "session_4.html#dplyr",
    "href": "session_4.html#dplyr",
    "title": "",
    "section": "dplyr",
    "text": "dplyr\n\n\n\n\na grammar for transforming data frames\nlibrary(dplyr) OR library(tidyverse)\n\n\n\nOK, so now that we have talked about data types, let’s get into the main topic of the day. dplyr is a play on words with “data” and the useful tool we all have in our toolbox, a pai rof “pliers”. The various functions we’ll use, today are all functions that belong to the dplyr package.\nJust as a reminder, in R, we bring in the functionality of a package by using the library() command. Because dplyr forms part of the tidyverse, we can bring in the useful functions of dplyr by either using the library(dplyr) command or the library(tidyverse) command.\nAs we will see in this last section, each dplyr function takes a data frame, does something with it, and then returns a modified data frame as its output. Because of this, dplyr functions can be strung together to create powerful data analysis pipelines in just a few lines of code."
  },
  {
    "objectID": "session_4.html#subsetting-columns-vs-rows",
    "href": "session_4.html#subsetting-columns-vs-rows",
    "title": "",
    "section": "Subsetting Columns vs Rows",
    "text": "Subsetting Columns vs Rows\n\n\nselect()\n\n\n\n\n\n\n\n\n\n\nfilter()\n\n\n\n\n\n\n\n\n\nOften, you have a large data frame but want to display or use data from only a small part of it, or you want to pull out some of the data out for a separate use. The dplyr package, part of the larger tidyverse set of packages, works great for this purpose.\nLet’s look at how you can subset a data frame, that is, choose only certain columns and/or rows from that data, by using dplyr.\ndplyr provides two functions for subsetting data frames: select() for subsetting columns, and filter() for subsetting rows:\nselect() reshapes data so that it includes only the columns you specify.\nfilter() reshapes data so that it includes only the rows that meet your conditions."
  },
  {
    "objectID": "session_4.html#select",
    "href": "session_4.html#select",
    "title": "",
    "section": "select()",
    "text": "select()\nChoose some columns to preserve in a selection.\nselect(data_frame, [column or columns])\n\nLet’s look at select() first. The select() function extracts columns from a data frame, using the columns as argument(s).\nselect() takes a data frame as its first argument. After that it takes one or more arguments that specify the names of the columns that you want to pick."
  },
  {
    "objectID": "session_4.html#select-1",
    "href": "session_4.html#select-1",
    "title": "",
    "section": "select()",
    "text": "select()\nBefore\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nID\nN_Days\nStatus\nDrug\nAge\nSex\n…\nTryglicerides\nPlatelets\nProthrombin\nStage\n\n\n\n\n1\n400\nD\nD-penicillamine\n21464\nF\n…\n172\n190\n12.2\n4\n\n\n2\n4500\nC\nD-penicillamine\n20617\nF\n…\n88\n221\n10.6\n3\n\n\n3\n1012\nD\nD-penicillamine\n25594\nM\n…\n55\n151\n12\n4\n\n\n4\n1925\nD\nD-penicillamine\n19994\nF\n…\n92\n183\n10.3\n4\n\n\n5\n1504\nCL\nPlacebo\n13918\nF\n…\n72\n136\n10.9\n3\n\n\n\n\nSo we’re going to start with a data frame. You can see here that I haven’t put in all the rows and columns, the ellipses here represent columns I haven’t included, and I’ve only put in the first five rows. But hopefully this is recognizably the cirrhosis dataset.\nLet’s say I want a version of this data that only preserves a few columns of this dataset."
  },
  {
    "objectID": "session_4.html#select-2",
    "href": "session_4.html#select-2",
    "title": "",
    "section": "select()",
    "text": "select()\nBefore\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nID\nN_Days\nStatus\nDrug\nAge\nSex\n…\nTryglicerides\nPlatelets\nProthrombin\nStage\n\n\n\n\n1\n400\nD\nD-penicillamine\n21464\nF\n…\n172\n190\n12.2\n4\n\n\n2\n4500\nC\nD-penicillamine\n20617\nF\n…\n88\n221\n10.6\n3\n\n\n3\n1012\nD\nD-penicillamine\n25594\nM\n…\n55\n151\n12\n4\n\n\n4\n1925\nD\nD-penicillamine\n19994\nF\n…\n92\n183\n10.3\n4\n\n\n5\n1504\nCL\nPlacebo\n13918\nF\n…\n72\n136\n10.9\n3\n\n\n\nUsing the select function\nselect(cirrhosis_study, ID, N_Days, Status, Drug) (prints to screen) new_thing &lt;- select(cirrhosis_study, ID, N_Days, Status, Drug) (saves it)\n\nLet’s examine the code on this slide.\nThis select statement will take the data frame cirrhosis_data, and return a new data frame that only has the columns I indicate.\nAn important point to note here is that select will not modify the original data frame but simply returns the altered data frame you asked for. It will simply print out the result in the console or in your R Markdown document. If you want to capture the modified data frame you need to assign it to a named object using the arrow operator.\nIn my case, I’m telling the select function to only hang on to four columns in the cirrhosis_study data frame, and I mention them by name. Note that I don’t have to put quotes around these column names, because they refer to objects, in this case, whole columns that the select statement already knows about."
  },
  {
    "objectID": "session_4.html#select-3",
    "href": "session_4.html#select-3",
    "title": "",
    "section": "select()",
    "text": "select()\nBefore\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nID\nN_Days\nStatus\nDrug\nAge\nSex\n…\nTryglicerides\nPlatelets\nProthrombin\nStage\n\n\n\n\n1\n400\nD\nD-penicillamine\n21464\nF\n…\n172\n190\n12.2\n4\n\n\n2\n4500\nC\nD-penicillamine\n20617\nF\n…\n88\n221\n10.6\n3\n\n\n3\n1012\nD\nD-penicillamine\n25594\nM\n…\n55\n151\n12\n4\n\n\n4\n1925\nD\nD-penicillamine\n19994\nF\n…\n92\n183\n10.3\n4\n\n\n5\n1504\nCL\nPlacebo\n13918\nF\n…\n72\n136\n10.9\n3\n\n\n\nUsing the select function\nselect(cirrhosis_study, ID, N_Days, Status, Drug)\nAfter\n\n\n\nID\nN_Days\nStatus\nDrug\n\n\n\n\n1\n400\nD\nD-penicillamine\n\n\n2\n4500\nC\nD-penicillamine\n\n\n3\n1012\nD\nD-penicillamine\n\n\n4\n1925\nD\nD-penicillamine\n\n\n5\n1504\nCL\nPlacebo\n\n\n\n\nAny questions about that?"
  },
  {
    "objectID": "session_4.html#participation-time",
    "href": "session_4.html#participation-time",
    "title": "",
    "section": "Participation Time!",
    "text": "Participation Time!\nWhich of the following will select the Ascites column from the cirrhosis_study data frame and capture the result in a data frame named newdata?\nA) newdata = select(Ascites, cirrhosis_study)\nB) newdata &lt;- select(cirrhosis_study, Ascites)\nC) select(newdata, cirrhosis_study, Ascites)\nD) newdata &lt;- select(cirrhosis_study, ascites)\nE) Both B and D\n\n\n\n−+\n01:00\n\n\n\n\nGreat, we have some folks saying [whatever], others are suggesting [whatever]. The answer is B.\nA isn’t correct, because the arguments are in the wrong order. The first argument in the tidyverse functions we’re studying today is always going to be the data frame you want to work with. That means the first argument should be cirrhosis.\nC isn’t correct because you have to use the assignment arrow to save the new, one-column-only data frame to an object called newdata. You don’t pass the name you want to apply to the object as an argument.\nD isn’t right because capitalization matters!\nSo E is also clearly incorrect."
  },
  {
    "objectID": "session_4.html#filter",
    "href": "session_4.html#filter",
    "title": "",
    "section": "filter()",
    "text": "filter()\nChoose some conditions to filter the rows you want to keep.\nfilter(data_frame, [some condition or conditions for rows])\n\nOne of the most important dplyr functions to know about is filter(). filter() extracts rows, and it does that based on logical criteria, or a condition that can be evaluated to be true (keep that row as part of our subset) or false (don’t keep that row).\nLike select(), filter() takes a data frame as its first argument. The second argument is a condition or logical test. R then performs that logical test on each row of the dataset and returns all rows in which the logical test was true.\nTo extract rows that meet logical criteria, we write code that looks like this, and we’ll replace the three dots with one or more logical conditions that the row has to meet."
  },
  {
    "objectID": "session_4.html#filter-1",
    "href": "session_4.html#filter-1",
    "title": "",
    "section": "filter()",
    "text": "filter()\nBefore\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nID\nN_Days\nStatus\nDrug\nAge\nSex\n…\nTryglicerides\nPlatelets\nProthrombin\nStage\n\n\n\n\n1\n400\nD\nD-penicillamine\n21464\nF\n…\n172\n190\n12.2\n4\n\n\n2\n4500\nC\nD-penicillamine\n20617\nF\n…\n88\n221\n10.6\n3\n\n\n3\n1012\nD\nD-penicillamine\n25594\nM\n…\n55\n151\n12\n4\n\n\n4\n1925\nD\nD-penicillamine\n19994\nF\n…\n92\n183\n10.3\n4\n\n\n5\n1504\nCL\nPlacebo\n13918\nF\n…\n72\n136\n10.9\n3\n\n\n\n\nLet’s take a look at an example. Here I have that same shortened version of our cirrhosis data frame, and I want only to look at the subjects who unfortunately died during the course of the study. I’ll filter by their Status, and I want their status to be equal to the letter D."
  },
  {
    "objectID": "session_4.html#filter-2",
    "href": "session_4.html#filter-2",
    "title": "",
    "section": "filter()",
    "text": "filter()\nBefore\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nID\nN_Days\nStatus\nDrug\nAge\nSex\n…\nTryglicerides\nPlatelets\nProthrombin\nStage\n\n\n\n\n1\n400\nD\nD-penicillamine\n21464\nF\n…\n172\n190\n12.2\n4\n\n\n2\n4500\nC\nD-penicillamine\n20617\nF\n…\n88\n221\n10.6\n3\n\n\n3\n1012\nD\nD-penicillamine\n25594\nM\n…\n55\n151\n12\n4\n\n\n4\n1925\nD\nD-penicillamine\n19994\nF\n…\n92\n183\n10.3\n4\n\n\n5\n1504\nCL\nPlacebo\n13918\nF\n…\n72\n136\n10.9\n3\n\n\n\nUsing the filter function\nfilter(cirrhosis_study, Status == \"D\")\n\nNotice that I put the letter D in quotes, because it’s possible that I have a variable or a data frame in my environment. For example, maybe D is set equal to the name “David”, or something like that. But that’s not what I want. I’m not referring to some object called D that R should be looking for, I mean the literal letter D. So I put it in quotes.\nNotice that we’re using a double equals here. That’s very important!"
  },
  {
    "objectID": "session_4.html#filter-3",
    "href": "session_4.html#filter-3",
    "title": "",
    "section": "filter()",
    "text": "filter()\nBefore\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nID\nN_Days\nStatus\nDrug\nAge\nSex\n…\nTryglicerides\nPlatelets\nProthrombin\nStage\n\n\n\n\n1\n400\nD\nD-penicillamine\n21464\nF\n…\n172\n190\n12.2\n4\n\n\n2\n4500\nC\nD-penicillamine\n20617\nF\n…\n88\n221\n10.6\n3\n\n\n3\n1012\nD\nD-penicillamine\n25594\nM\n…\n55\n151\n12\n4\n\n\n4\n1925\nD\nD-penicillamine\n19994\nF\n…\n92\n183\n10.3\n4\n\n\n5\n1504\nCL\nPlacebo\n13918\nF\n…\n72\n136\n10.9\n3\n\n\n\nUsing the filter function\nfilter(cirrhosis_study, Status == \"D\")\nAfter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nID\nN_Days\nStatus\nDrug\nAge\nSex\n…\nTryglicerides\nPlatelets\nProthrombin\nStage\n\n\n\n\n1\n400\nD\nD-penicillamine\n21464\nF\n…\n172\n190\n12.2\n4\n\n\n3\n1012\nD\nD-penicillamine\n25594\nM\n…\n55\n151\n12\n4\n\n\n4\n1925\nD\nD-penicillamine\n19994\nF\n…\n92\n183\n10.3\n4"
  },
  {
    "objectID": "session_4.html#a-potential-pitfall",
    "href": "session_4.html#a-potential-pitfall",
    "title": "",
    "section": "A Potential Pitfall!",
    "text": "A Potential Pitfall!\n\nError: Problem with filter() input ..1. x Input ..1 is named. ℹ This usually means that you’ve used = instead of ==.\n\nOR\n\nError: unexpected ‘=’\n\nOR\n\ninvalid (do_set) left-hand side to assignment\n\n\nOne common issue to be aware of is the difference between the single equals and the double equals operators.\nIn R, using a single equals sign assigns a value. It demands, “make these things equal.”\nThe double equals sign does not assign, but compares. It asks “are these things equal?”.\nThat’s why we use double equals in the context of a logical test that compares two values.\nIf you use the wrong kind of equals, you’ll get an error. This is a very common mistake, and one you’re almost guaranteed to accidentally commit at one point or another! This is what some of those scary errors look like!"
  },
  {
    "objectID": "session_4.html#logical-operators",
    "href": "session_4.html#logical-operators",
    "title": "",
    "section": "Logical Operators",
    "text": "Logical Operators\n\n\n\n\n\n\n\n\nlogical expression\nmeans\nexample\n\n\n\n\nx &lt; y\nless than\nCholesterol &lt; 200.\n\n\nx &gt; y\ngreater than\nN_Days &gt; 3000\n\n\nx == y\nequal to\nAscites == Edema\n\n\nx &lt;= y\nless than or equal to\nBilirubin &lt;= 2.0\n\n\nx &gt;= y\ngreater than or equal to\nCopper &gt;= 100\n\n\nx != y\nnot equal to\nStatus != \"D\".\n\n\nis.na(x)\na missing value\nis.na(Platelets)\n\n\n!is.na(x)\nnot a missing value\n!is.na(SGOT)\n\n\n\n\nHere are some important logical operators to know about. They will all come in handy when you’re filtering rows of a data frame. x and y each represent expressions, which could be column names or constant values or a combination thereof.\nWe’ve already seen the double equals. There are also the less than or and greater than operators. These operators also come as “or equal to” versions.\nUse exclamation point equals (some people say “bang equals”) if you want to select rows in which a value is not equal to another value.\nis.na() is how you can test for missing values (NA in R). This comes in handy when you want to remove missing values from your data, which we’ll see later."
  },
  {
    "objectID": "session_4.html#your-turn",
    "href": "session_4.html#your-turn",
    "title": "",
    "section": "Your Turn",
    "text": "Your Turn\nWhich of these would successfully filter the cirrhosis_study data frame to only subjects who received the placebo?\nA) filter(cirrhosis_study, Drug == Placebo)\nB) filter(cirrhosis_study, Drug = \"Placebo\")\nC) filter(cirrhosis_study, Drug == \"Placebo\")\nD) filter(cirrhosis_study, drug == \"Placebo\")\n\n\n\n−+\n01:00\n\n\n\n\nHere we have another multiple choice to see if you’re on your toes. Only one of these is correct? Which one? Post what you think in chat.\n\nA is wrong because “Placebo” is a character string (it’s not a named object or a number, it’s a string that needs to be quoted). B is wrong because you’re trying to do a comparison with a single equals. C is correct! D is wrong because of capitalization."
  },
  {
    "objectID": "session_4.html#the-pipe-operator-or",
    "href": "session_4.html#the-pipe-operator-or",
    "title": "",
    "section": "The Pipe Operator %>% or |>",
    "text": "The Pipe Operator %&gt;% or |&gt;\nThe pipe operator is %&gt;% (from the magrittr package, part of the tidyverse), or |&gt; (part of base R starting with version 4.1.0).\n\nLet’s talk about the pipe operator, which we can use to build pipelines!\nOne of the most powerful concepts in the tidyverse suite of packages is the pipe operator, which is written in two possible ways:\n\npercent, greater than, percent (%&gt;%) (this is the original pipe which gets included as part of dplyr and tidyverse)\nvertical pipe, greater than (|&gt;) (this is a newer option, and is now “native”, meaning it comes from base R, if you’re using R version 4.1.0 or later)"
  },
  {
    "objectID": "session_4.html#the-pipe-operator",
    "href": "session_4.html#the-pipe-operator",
    "title": "",
    "section": "The Pipe Operator",
    "text": "The Pipe Operator\n\n\n\n\n\n\nPasses the object on the left as the first argument to the function on the right\ncirrhosis %&gt;% filter(Bilirubin &lt;= 3) is equivalent to filter(cirrhosis_study, Bilirubin &lt;= 3)\nOR, if you use the newer pipe:\ncirrhosis |&gt; filter(Bilirubin &lt;= 3) is equivalent to filter(cirrhosis_study, Bilirubin &lt;= 3)\n\n\nBoth pipe operators pass the object on its left as the first argument to the function on its right.\nIn this workshop, we’ll use both kinds of pipe in code examples and quiz questions, so that you get used to seeing them both.\nThose two lines of code are equivalent.\nIn both cases we’re taking the data frame, passing it as the first argument to the filter() function, and adding a condition that we’re filtering by.\nWe could say the same thing of the second line of blue code on your screen which uses the newer pipe."
  },
  {
    "objectID": "session_4.html#pipes-make-output-into-the-next-input",
    "href": "session_4.html#pipes-make-output-into-the-next-input",
    "title": "",
    "section": "Pipes make Output into the next Input!",
    "text": "Pipes make Output into the next Input!\ncirrhosis %&gt;%\n  filter(Copper &gt;= 100) %&gt;%\n  select(Bilirubin, Platelets, Stage)\n\nStart with the cirrhosis data frame. THEN, to that:\nFilter so that we get only certain rows THEN, to that:\nSelect so that we get only certain columns.\n\n\nHere’s why the pipe (%&gt;% or |&gt;) is so useful.\n“Tidy” functions like select(), filter(), and others we’ll see later always have as first argument a data frame, and they always return a data frame as well. Data frame in, data frame out.\nThis makes it possible to create a pipeline in which a data frame object is handed from one dplyr function to the next. The data frame result of step 1 becomes the data frame starting point for step 2, then the result of step 2 becomes the starting point for step 3, and so on.\nYou might wonder why we’ve put each step in its own line. Is this a requirement? No, it’s not. Many R users like to use whitespace (new lines, tabs, spaces, indents) to make their code more human readable.\nBy connecting logical steps, you can get a pipeline of data analysis steps which are concise and also fairly human readable. You can think of the pipe symbol as the word “then…”, describing the steps in order.\nThis approach to coding is powerful because it makes it much easier for someone who doesn’t know R well to read and understand your code as a series of instructions.\nI want to ask you… could I change the order of the select and filter steps here? Why or why not?"
  },
  {
    "objectID": "session_4.html#your-turn-1",
    "href": "session_4.html#your-turn-1",
    "title": "",
    "section": "Your Turn",
    "text": "Your Turn\nRewrite (in your head or jot down) the following statement with a pipe:\nselect(mydata, first_name, last_name)\n\n\n\n−+\n01:00\n\n\n\n\nOK, I want to see if you grasp this concept, as it’s pretty important, moving forward. How would you rewrite the statement on your screen, select mydata comma first name comma last name, and use the pipe syntax instead? Share what you think the answer is.\n…\nYep, that’s exactly right! You’d write mydata, the pipe symbol, and then select first name comma last name. Any questions on that?"
  },
  {
    "objectID": "session_4.html#your-turn-2",
    "href": "session_4.html#your-turn-2",
    "title": "",
    "section": "Your Turn",
    "text": "Your Turn\nRewrite (in your head or jot down) the following statement with a pipe:\nselect(mydata, first_name, last_name)\nmy_data %&gt;% select(first_name, last_name)\n(OR you might also see or use)\nmy_data |&gt; select(first_name, last_name)"
  },
  {
    "objectID": "session_4.html#create-or-update-columns",
    "href": "session_4.html#create-or-update-columns",
    "title": "",
    "section": "Create or Update Columns",
    "text": "Create or Update Columns\n\nLet’s say you want to add a new column to your data frame, or update a column by changing it in some way (say, convert kilograms to pounds). dplyr has a function for that, too!"
  },
  {
    "objectID": "session_4.html#mutate",
    "href": "session_4.html#mutate",
    "title": "",
    "section": "mutate()",
    "text": "mutate()\nCreate new or updated, optionally calculated columns.\nmutate(data_frame, [name = value])\n\nLet’s say you want to add a new column to your data frame, or update a column by changing it in some way (say, convert kilograms to pounds). dplyr has a function for that, too!\nmutate() is an extremely useful dplyr function, and you can use it to make new variables / columns. That’s what we’ll use it for here. You can also use mutate() to change existing columns (say, turn an entire column lowercase or round or scale a numeric value).\nLike all dplyr functions, mutate() takes a data frame as its first argument. After that, you tell it what to name the new column and what should be in it. This is done using name-value expressions.\nIn name-value expression, you have:\n\na name\nan equals sign (=), and\na value"
  },
  {
    "objectID": "session_4.html#mutate-1",
    "href": "session_4.html#mutate-1",
    "title": "",
    "section": "mutate()",
    "text": "mutate()\nBefore\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nID\nN_Days\nStatus\nDrug\nAge\nSex\n…\nTryglicerides\nPlatelets\nProthrombin\nStage\n\n\n\n\n1\n400\nD\nD-penicillamine\n21464\nF\n…\n172\n190\n12.2\n4\n\n\n2\n4500\nC\nD-penicillamine\n20617\nF\n…\n88\n221\n10.6\n3\n\n\n3\n1012\nD\nD-penicillamine\n25594\nM\n…\n55\n151\n12\n4\n\n\n4\n1925\nD\nD-penicillamine\n19994\nF\n…\n92\n183\n10.3\n4\n\n\n5\n1504\nCL\nPlacebo\n13918\nF\n…\n72\n136\n10.9\n3\n\n\n\n\nOK, so let’s say that I want to understand more intuitively how long my subjects stayed in the trial, and I want to see the number of years, not just the number of days, they stayed. I want to make a new column that I’ll create by converting N_Days to Years by dividing that by 365.25 and then rounding to two decimal places."
  },
  {
    "objectID": "session_4.html#mutate-2",
    "href": "session_4.html#mutate-2",
    "title": "",
    "section": "mutate()",
    "text": "mutate()\nBefore\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nID\nN_Days\nStatus\nDrug\nAge\nSex\n…\nTryglicerides\nPlatelets\nProthrombin\nStage\n\n\n\n\n1\n400\nD\nD-penicillamine\n21464\nF\n…\n172\n190\n12.2\n4\n\n\n2\n4500\nC\nD-penicillamine\n20617\nF\n…\n88\n221\n10.6\n3\n\n\n3\n1012\nD\nD-penicillamine\n25594\nM\n…\n55\n151\n12\n4\n\n\n4\n1925\nD\nD-penicillamine\n19994\nF\n…\n92\n183\n10.3\n4\n\n\n5\n1504\nCL\nPlacebo\n13918\nF\n…\n72\n136\n10.9\n3\n\n\n\nUsing the mutate function\nmutate(cirrhosis_study, N_Years = round(N_Days / 365.25, 2))\n\nI’ll give my new column a name, N_Years. I don’t really love capitals in my variable names, but I think consistency is the lesser evil here. And I’ll give the calculation. Take the N_Days column, divide it by 365.25, round that to two decimal places, and that’s the value of the new column."
  },
  {
    "objectID": "session_4.html#mutate-3",
    "href": "session_4.html#mutate-3",
    "title": "",
    "section": "mutate()",
    "text": "mutate()\nBefore\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nID\nN_Days\nStatus\nDrug\nAge\nSex\n…\nTryglicerides\nPlatelets\nProthrombin\nStage\n\n\n\n\n1\n400\nD\nD-penicillamine\n21464\nF\n…\n172\n190\n12.2\n4\n\n\n2\n4500\nC\nD-penicillamine\n20617\nF\n…\n88\n221\n10.6\n3\n\n\n3\n1012\nD\nD-penicillamine\n25594\nM\n…\n55\n151\n12\n4\n\n\n4\n1925\nD\nD-penicillamine\n19994\nF\n…\n92\n183\n10.3\n4\n\n\n5\n1504\nCL\nPlacebo\n13918\nF\n…\n72\n136\n10.9\n3\n\n\n\nUsing the mutate function\nmutate(cirrhosis_study, N_Years = round(N_Days / 365.25, 2))\nAfter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nID\nN_Days\nStatus\nDrug\nAge\nSex\n…\nTryglicerides\nPlatelets\nProthrombin\nStage\nN_Years\n\n\n\n\n1\n400\nD\nD-penicillamine\n21464\nF\n…\n172\n190\n12.2\n4\n1.1\n\n\n2\n4500\nC\nD-penicillamine\n20617\nF\n…\n88\n221\n10.6\n3\n12.32\n\n\n3\n1012\nD\nD-penicillamine\n25594\nM\n…\n55\n151\n12\n4\n2.77\n\n\n4\n1925\nD\nD-penicillamine\n19994\nF\n…\n92\n183\n10.3\n4\n5.27\n\n\n5\n1504\nCL\nPlacebo\n13918\nF\n…\n72\n136\n10.9\n3\n4.12\n\n\n\n\nAnd you can see that it’s put it at the end here. But let me show you a trick on how to fix that!"
  },
  {
    "objectID": "session_4.html#piping-it-all-together",
    "href": "session_4.html#piping-it-all-together",
    "title": "",
    "section": "Piping it all together",
    "text": "Piping it all together\n\nReduce columns to just a few\nReduce rows ()\nAdd new column\nReorder the columns so it makes better sense"
  },
  {
    "objectID": "session_4.html#piping-it-all-together-1",
    "href": "session_4.html#piping-it-all-together-1",
    "title": "",
    "section": "Piping it all together",
    "text": "Piping it all together\nBefore\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nID\nN_Days\nStatus\nDrug\nAge\nSex\n…\nTryglicerides\nPlatelets\nProthrombin\nStage\n\n\n\n\n1\n400\nD\nD-penicillamine\n21464\nF\n…\n172\n190\n12.2\n4\n\n\n2\n4500\nC\nD-penicillamine\n20617\nF\n…\n88\n221\n10.6\n3\n\n\n3\n1012\nD\nD-penicillamine\n25594\nM\n…\n55\n151\n12\n4\n\n\n4\n1925\nD\nD-penicillamine\n19994\nF\n…\n92\n183\n10.3\n4\n\n\n5\n1504\nCL\nPlacebo\n13918\nF\n…\n72\n136\n10.9\n3\n\n\n\n\nAs per usual, we’ll start here."
  },
  {
    "objectID": "session_4.html#piping-it-all-together-2",
    "href": "session_4.html#piping-it-all-together-2",
    "title": "",
    "section": "Piping it all together",
    "text": "Piping it all together\nBefore\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nID\nN_Days\nStatus\nDrug\nAge\nSex\n…\nTryglicerides\nPlatelets\nProthrombin\nStage\n\n\n\n\n1\n400\nD\nD-penicillamine\n21464\nF\n…\n172\n190\n12.2\n4\n\n\n2\n4500\nC\nD-penicillamine\n20617\nF\n…\n88\n221\n10.6\n3\n\n\n3\n1012\nD\nD-penicillamine\n25594\nM\n…\n55\n151\n12\n4\n\n\n4\n1925\nD\nD-penicillamine\n19994\nF\n…\n92\n183\n10.3\n4\n\n\n5\n1504\nCL\nPlacebo\n13918\nF\n…\n72\n136\n10.9\n3\n\n\n\nUsing the select function\ncirrhosis |&gt;\nselect(ID, N_Days, Status, Drug)\nAfter\n\n\n\nID\nN_Days\nStatus\nDrug\n\n\n\n\n1\n400\nD\nD-penicillamine\n\n\n2\n4500\nC\nD-penicillamine\n\n\n3\n1012\nD\nD-penicillamine\n\n\n4\n1925\nD\nD-penicillamine\n\n\n5\n1504\nCL\nPlacebo\n\n\n\n\nSo our first step is to take the cirrhosis data frame and then push that through a pipe to a select function, where we winnow it down to just a few columns. This “after” is going to become the “before” of our next step!"
  },
  {
    "objectID": "session_4.html#piping-it-all-together-3",
    "href": "session_4.html#piping-it-all-together-3",
    "title": "",
    "section": "Piping it all together",
    "text": "Piping it all together\nBefore\n\n\n\nID\nN_Days\nStatus\nDrug\n\n\n\n\n1\n400\nD\nD-penicillamine\n\n\n2\n4500\nC\nD-penicillamine\n\n\n3\n1012\nD\nD-penicillamine\n\n\n4\n1925\nD\nD-penicillamine\n\n\n5\n1504\nCL\nPlacebo\n\n\n\nUsing the select and filter functions\ncirrhosis |&gt;\nselect(ID, N_Days, Status, Drug) |&gt;\nfilter(Status == \"D\")\nAfter\n\n\n\nID\nN_Days\nStatus\nDrug\n\n\n\n\n1\n400\nD\nD-penicillamine\n\n\n3\n1012\nD\nD-penicillamine\n\n\n4\n1925\nD\nD-penicillamine\n\n\n\n\nIn our filter step, we START with what we ended with at the end of our select step. We filter from that!"
  },
  {
    "objectID": "session_4.html#piping-it-all-together-4",
    "href": "session_4.html#piping-it-all-together-4",
    "title": "",
    "section": "Piping it all together",
    "text": "Piping it all together\nBefore\n\n\n\nID\nN_Days\nStatus\nDrug\n\n\n\n\n1\n400\nD\nD-penicillamine\n\n\n3\n1012\nD\nD-penicillamine\n\n\n4\n1925\nD\nD-penicillamine\n\n\n\nUsing the select, filter, and mutate functions\ncirrhosis |&gt;\nselect(ID, N_Days, Status, Drug) |&gt;\nfilter(Status == \"D\") |&gt;\nmutate(N_Years = round(N_Days/365.25,2))\nAfter\n\n\n\nID\nN_Days\nStatus\nDrug\nN_Years\n\n\n\n\n1\n400\nD\nD-penicillamine\n1.1\n\n\n3\n1012\nD\nD-penicillamine\n2.77\n\n\n4\n1925\nD\nD-penicillamine\n5.27\n\n\n\n\nOK, so again our “after” from last step became our “before for this step, and we’ve used mutate to add a column. We’re getting really close. But we want our columns to be in a different order! Let’s use”select” again!"
  },
  {
    "objectID": "session_4.html#piping-it-all-together-5",
    "href": "session_4.html#piping-it-all-together-5",
    "title": "",
    "section": "Piping it all together",
    "text": "Piping it all together\nBefore\n\n\n\nID\nN_Days\nStatus\nDrug\nN_Years\n\n\n\n\n1\n400\nD\nD-penicillamine\n1.1\n\n\n3\n1012\nD\nD-penicillamine\n2.77\n\n\n4\n1925\nD\nD-penicillamine\n5.27\n\n\n\nUsing the select, filter, mutate, and select again functions\ncirrhosis |&gt;\nselect(ID, N_Days, Status, Drug) |&gt;\nfilter(Status == \"D\")  |&gt;\nmutate(N_Years = round(N_Days/365.25,2)) |&gt;\nselect(ID, starts_with(\"N_\"), everything())\nAfter\n\n\n\nID\nN_Days\nN_Years\nStatus\nDrug\n\n\n\n\n1\n400\n1.1\nD\nD-penicillamine\n\n\n3\n1012\n2.77\nD\nD-penicillamine\n\n\n4\n1925\n5.27\nD\nD-penicillamine\n\n\n\n\nI’m introducing some tricks here. I could have just put the columns by name in that last select statement: ID comma N Days comma N Years comma Status comma Drug. But what if I had fifty columns, not five? That could be annoying. I wanted to introduce you to a couple of helper functions. starts_with (and there’s also ends_with and contains) can help you get all of the variables that have a certain naming pattern. And “everything” in this context gets everything that hasn’t already been mentioned by name."
  },
  {
    "objectID": "session_4.html#group-by-and-summarize",
    "href": "session_4.html#group-by-and-summarize",
    "title": "",
    "section": "Group By and Summarize",
    "text": "Group By and Summarize\nA very common use case is to divide your data into groups, and get information about each group.\n\n\n\n\n\n\nGroup by combined with summarize is a way for us to lump cases together and then get a statistic for each group. For example, maybe you want the median blood sugar for girls and the median blood sugar for boys in your study, or the maximum wait time for King of Prussia emergency department patients and the maximum wait time for University City emergency department patients.\nWhen you use group by, you have to tell R how to separate your cases into groups. In the image here, there are three groups, each of which is represented by a different shade of gold. Any variable that is categorical data can be used to group. For example, you can group by sex, or race, or zip code. Maybe these three groups are three states, like New Jersey, Pennsylvania, and Delaware!\nOnce you have your data in groups, you can then use the summarize command to get summary statistics for each group. The summary for each group is represented in blue in this small image.\nSummarizing can take lots of different forms! Sometimes you want to know how big the group is, how many members it has. Sometimes you want to know what the average value of something is per group, or what the maximum value is. You can also summarize and give several different measures for each group, like maximum, minimum, mean, and median. It looks like in this image there are two values given for each group. Maybe we have two values for New Jersey, Pennsylvania and Delaware, like the number of patients we have in each state and the number of patients in each state using Medicaid."
  },
  {
    "objectID": "session_4.html#group-by-and-summarize-1",
    "href": "session_4.html#group-by-and-summarize-1",
    "title": "",
    "section": "Group By and Summarize",
    "text": "Group By and Summarize\nNote that when you do math on null values (NA) in R, the answer is always NA, so a lot of times in R you have to explicitly say “remove the NA values” in order to get a value.\nThis code appears in your exercise file, so you can try it there!\ncirrhosis |&gt;\n  group_by(Hepatomegaly) |&gt;\n  summarize(Mean_Cholesterol = mean(Cholesterol, na.rm = TRUE), \n            Median_Cholesterol = median(Cholesterol, na.rm = TRUE))"
  },
  {
    "objectID": "session_4.html#your-turn-3",
    "href": "session_4.html#your-turn-3",
    "title": "",
    "section": "Your Turn!",
    "text": "Your Turn!\n\nGo to https://posit.cloud and log in.\nFind your First Steps in R and RStudio project and open it\nIn the file browser (lower right), navigate to Exercises\nOpen session_4_exercise.qmd, and start reading and working in it!\nIf you save this file, save it with your initials at the end (rename it).\nIf you get stuck, there’s a solutions file in the “solutions” folder, or jump into chat!\nI’d love for everyone to work quietly for around 15 minutes, and then I’ll demo some of the solution.\nI’ll stop us all for a couple of closing slides and for Q&A as we get close to the end of the hour."
  },
  {
    "objectID": "session_4.html#recap",
    "href": "session_4.html#recap",
    "title": "",
    "section": "Recap",
    "text": "Recap\n\n\n\n\n\n\n\n\nselect() subsets columns by name\n\n\n\n\n\n\n\n\n\n\nfilter() subsets rows by a logical condition\n\n\n\n\n\n\n\n\n\n\nmutate() creates new calculated columns or changes existing columns\n\n\n\n\n\n\n\n\n\n\nUse the pipe operator %&gt;% to combine dplyr functions into a pipeline\n\n\n\n\n\n\n\n\n\n\ngroup_by() with summarize() gives per-group statistics\n\n\n\nTo recap, dplyr is a package you can load in R that provides a grammar for transforming data frames. Some of the key dplyr functions are:\nselect(), which subsets columns by name filter(), which subsets rows by a logical condition, and mutate(), which creates new calculated columns or changes existing columns\nAdditionally, dplyr and other tidyverse packages make use of the pipe operator, which can be used to string together dplyr functions into a pipeline that performs several transformations.\nFinally, group_by() and summarize() work together to allow you to calculate per-group summary statistics."
  },
  {
    "objectID": "session_4.html#cheatsheet-more-dplyr-functions",
    "href": "session_4.html#cheatsheet-more-dplyr-functions",
    "title": "",
    "section": "Cheatsheet (more dplyr functions!)",
    "text": "Cheatsheet (more dplyr functions!)\n\n\n\n\n\n\nRStudio creates and distributes a number of cheatsheets for various purposes. You can find them by clicking in the Help menu in RStudio – try that now! Here’s an image of the dplyr cheatsheet. As you can see, there are lots of other functions that dplyr offers.\nOther dplyr functions include arrange(), distinct(), group_by() (which is especially helpful when combined with summarize()), and many more!"
  },
  {
    "objectID": "session_4.html#before-we-get-to-dplyr-data-types",
    "href": "session_4.html#before-we-get-to-dplyr-data-types",
    "title": "",
    "section": "Before we get to dplyr: data types",
    "text": "Before we get to dplyr: data types\nSome atomic data types in R:\n\ncharacter: “ABC”, “True”, “123”\ninteger: 123, -3, 0\ndouble: 123.0, -3.33\nlogical: True, False\n\nImportant data structures in R:\n\nfactor – acts like a data TYPE in a lot of ways\nvector\nlist\ndata frame\ntibble\n\ntypeof() can give you the data type"
  },
  {
    "objectID": "session_4.html#factors",
    "href": "session_4.html#factors",
    "title": "",
    "section": "Factors",
    "text": "Factors\nFactors are categorical data. Categorical / factor data are data in which every observation falls into a set number of values (like drug/placebo, male/female/intersex, etc.)\n\nOrdered:\n\nsmall / medium / large\nstage 1 / stage 2 / stage 3 / stage 4\n\nUnordered:\n\nbenign / malignant\nDelaware / New Jersey / Pennsylvania\n\n\n\nIn the exercises you’ll be working in today, I want you to use a function we’re going to learn in a few minutes to change some character data, some letters, into factors, and it’s important to understand what factors are and why they can be useful and important.\nFactors are categorical data. Factor data are data in which every observation falls into a set number of values. Some categories have a kind of internal order, like small, medium, and large, or disease stage. Some categories don’t have any kind of internal order, like benign or malignant labels or U.S. state.\nIf your data can be described in a set number of discrete categories, you can make that data into a factor variable in R. And often, you want to! It can make it easy to enforce the number of categories and make sure that new data isn’t introduced because of misspelling, accidentally creating a new category you didn’t want, for example."
  },
  {
    "objectID": "session_4.html#factors-1",
    "href": "session_4.html#factors-1",
    "title": "",
    "section": "Factors?",
    "text": "Factors?\nAre these numbers, characters, or factors?\n\n19147\n19103\n19146\n19128\n\nHow we treat these can matter to R in how it treats these data in terms of modeling!\n\nLet’s look at this data. What are these? Are they numbers? Characters? Factors? I haven’t told you what they represent. If these are measurements, like weight in grams, then maybe we should leave these as numbers. But I suspect these are Philadelphia area postal codes.\nAnd if that’s the case, they aren’t really numbers. Yes, these are codes that are made up using numerals, but they don’t represent quantities. They’re just categorical labels for areas of land. We could have called these A, B, C, or purple zone, green zone, and tan zone just as easily.\nBut if we leave them as numbers, R might try to treat them as numbers and try to account for them that way in a model. A model that tries to treat these as a measure of something that a patient has more or less of would be a bad model that could behave unpredictably."
  },
  {
    "objectID": "session_4.html#but-first-data-types",
    "href": "session_4.html#but-first-data-types",
    "title": "",
    "section": "But first: data types",
    "text": "But first: data types\nSome atomic data types in R:\n\ncharacter: “ABC”, “True”, “123”\ninteger (class = numeric): 123, -3, 0\ndouble (class = numeric): 123.0, -3.33\nlogical: True, False\n\nThen there’s the factor – it’s a data structure but acts like a data type in a lot of ways\ntypeof() can give you the data type\n\nIn today’s exercises, I’m going to have you read in the cirrhosis data and do some corrections related to data types, so before anything else, I want to briefly talk about data types in R. There are lots of books and resources that go into data types in depth, so I won’t do that here. There are a couple of numeric types, one for integers and one for decimals, which is called double, and a character type for strings, but what I really want to draw your eye to is that there are special ways to store some kinds of data that you might not have thought of. For example, there is a logical type which holds truth values, namely, True and False. Not the words “True” and “False” – those would be character – , but the abstract values of True and False.\nAnd there’s also this thing called a factor, which is pretty useful for categorical data. And if you collect data where there are categories, like sex or race or comorbid condition, you want to know about factors."
  },
  {
    "objectID": "session_4.html#session-4-itinerary",
    "href": "session_4.html#session-4-itinerary",
    "title": "",
    "section": "Session 4 Itinerary",
    "text": "Session 4 Itinerary\nSelecting Data Using dplyr\n\nSelecting columns\nFiltering rows\nCreating new columns\n\nGoals:\n\nDescribe what a “factor” variable is in R and why it’s important to use it\nUse “select” and “filter” to subset data\nUse “group by” and “summarize” to get group-level statistics\n\n\nWhat are we going to do today? We’re going to learn about the dplyr package and use it to reshape data, specifically by selecting columns of interest, filtering rows you want to preserve, and creating new columns of data.\nMy goals for you this session are the following. I really want you to understand what a factor variable is in R and why it can be useful to transform some variables to factor. I want you to successfully use select and filter functions, and I want you to use group by and summarize to get some group level statistics before we leave today."
  },
  {
    "objectID": "session_4.html#summary-of-today",
    "href": "session_4.html#summary-of-today",
    "title": "",
    "section": "Summary of Today",
    "text": "Summary of Today\nToday, you:\n\nLearned about file types\nLearned about dplyr and its functions\nBuilt pipelines of select, filter, and mutate\nWorked with factor variables\nPossibly learned new things about working in RStudio, like chunk names\n\nThat’s a lot! Give yourselves a round of applause.\n\nOK, so that’s session 4. Today, we talked about dplyr And you did a lot of hands-on work, too! If you have a feeling word you want to drop into chat, I’d love to know how today left you feeling!"
  },
  {
    "objectID": "session_4.html#qa-was-this-effective",
    "href": "session_4.html#qa-was-this-effective",
    "title": "",
    "section": "Q&A / Was This Effective?",
    "text": "Q&A / Was This Effective?\nWe like to measure our effectiveness (and analyze it in R!)\nGoals:\n\nDescribe what a “factor” variable is in R and why it’s important to use it\nUse “select” and “filter” to subset data\nUse “group by” and “summarize” to get group-level statistics\n\n\nThe Arcus education team is a group that likes to measure our effectiveness and make changes based on what we learn. So before we do questions and answers and our final slides, we like to make sure to give our learners a poll to see if we made a good use of your time. We’re going to ask if we were effective in reaching our goals today, and those goals are on the screen in order to help you answer that question. Once you answer that poll, feel free to type a question into chat or come off mute and ask to clarify anything I can explain a bit better."
  },
  {
    "objectID": "session_4.html#next-session",
    "href": "session_4.html#next-session",
    "title": "",
    "section": "Next Session",
    "text": "Next Session\nBringing it all together!\nScientific communication and data visualization in a notebook\n\nIn our next session, we’re going to build a final notebook together, where you have some independent work and get to make your own decisions on what to look at and prioritize. I’m looking forward to seeing you there. Thanks so much for your hard work today. If you have questions between today and next week, feel free to email me at paytonk@chop.edu or arcus-education@chop.edu, and have a great rest of your day!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "First Steps in R and RStudio",
    "section": "",
    "text": "Welcome to First Steps in R and RStudio!\nSkip ahead to watching the workshop recordings"
  },
  {
    "objectID": "index.html#about-this-workshop-series",
    "href": "index.html#about-this-workshop-series",
    "title": "First Steps in R and RStudio",
    "section": "About This Workshop Series",
    "text": "About This Workshop Series\nThis series is intended to be a gentle introduction to using R and RStudio for people who interact with data and want to work in the R statistical programming language. This course is geared towards beginners who are comfortable doing basic tasks with data that comes in rows and columns (for example, organizing data in Excel) but have no programming background.\nThe workshop will cover how to get started using the R statistical programming language in your work. We’ll talk about how to import data, transform data, and create data visualizations in R. To keep this workshop series short, our scope is limited, and we won’t go into details that are specific to the conduct of research, like accessing the REDCap API, using modeling and machine learning, and applying statistical tests. For that, we are planning a future Skills Series we’re going to call Next Steps in R for Research. For this workshop series, we assume you know what R and RStudio are and have some ideas about why they’re useful. If you don’t know what R or RStudio are, we suggest you view the slides and recordings from Demystifying R and RStudio, or attend the next time that two-session workshop series is offered.\nBesides the skills you’ll acquire in writing R code and using the RStudio IDE, you’ll also develop vocabulary useful for describing what you want to accomplish, and that will help you search for resources online or describe your problem to an LLM like CHOP GPT for help creating R code.\n\nPre-requisites: What you should know:\nBefore attending this series, you should be able to perform most or all the following skills. If you’re not sure you can, check out our Demystifying R and RStudio Skills Series. The slideshows, which have ample speaker notes, and/or the recordings of the talks (if available at the time you’re viewing this document) will be sufficient to help you acquire these skills. And don’t worry, we won’t quiz you!\n\nBe able to describe the difference between R and RStudio\nBe able to give one advantage for using scripts written in R for data analysis\nKnow a little about how to get access to R and RStudio at CHOP\nDescribe what makes programming “literate” (like a notebook)\nExplain the real-life consequences of irreproducible research\nName one way Quarto documents can be helpful\n\n\n\nPre-requisites: What you should do:\nBefore attending a workshop session, we suggest that you do the following. It will make your experience of the workshop series smoother. If you don’t get a chance to do this before attending a workshop, you will have time to do it during the session, but we won’t necessarily be able to stop our presentation to help you if you get stuck.\n\nCreate a free Posit.cloud account. We will use this as our training environment and you will have continued access to your code and materials after the workshop, through your account at Posit.cloud. Don’t use this for any patient or other CHOP data, though!\nIf you haven’t already, please consider joining CHOP’s R User Group. It’s not necessary for the workshops but you might find it useful or even fun.\n\nWe suggest requesting these programs be installed on your CHOP device(s):\n\nR – the language we use to clean, analyze, and visualize data\nRStudio Desktop – an IDE for writing R\nGit – version control software that will allow you to easily get the latest version of our course materials and will also be helpful for tracking changes in your own projects\nGitHub Desktop – a helper, or “client” software that makes working with Git easier\n\nEven though all of these software are free, you’ll need a Cost Center (or grant fund) to add to your request. Get that from your manager, administrative staff, or other leadership within your area. There will be no charge, but DTS uses this information for tracking resource utilization.\nYou’ll also need the MAC address of the device you need the software installed to.\nHaving R, RStudio, Git, and GitHub installed locally on your CHOP-issued device is not the only way to work with R and RStudio, but it can be the most convenient, and will be compliant with the constraints of working with real CHOP data. You won’t want to rely on RStudio on your personal computing device or on the cloud when it comes to working with real CHOP data!\nOn the day of your workshop\nWe suggest the following for virtual webinars:\n\nIf available to you, use two monitors (or another two-screen setup such as a laptop and a tablet or two laptops). This Skills Series is hands-on, so you will want to have extra space for working on code while also looking at slides or the chat window."
  },
  {
    "objectID": "index.html#pre-requisites-what-you-should-know",
    "href": "index.html#pre-requisites-what-you-should-know",
    "title": "First Steps in R and RStudio",
    "section": "Pre-requisites: What you should know:",
    "text": "Pre-requisites: What you should know:\nBefore attending this series, you should be able to perform most or all the following skills. If you’re not sure you can, check out our Demystifying R and RStudio Skills Series. The slideshows, which have ample speaker notes, and/or the recordings of the talks (if available at the time you’re viewing this document) will be sufficient to help you acquire these skills. And don’t worry, we won’t quiz you!\n\nBe able to describe the difference between R and RStudio\nBe able to give one advantage for using scripts written in R for data analysis\nKnow a little about how to get access to R and RStudio at CHOP\nDescribe what makes programming “literate” (like a notebook)\nExplain the real-life consequences of irreproducible research\nName one way Quarto documents can be helpful"
  },
  {
    "objectID": "index.html#pre-requisites-what-you-should-do",
    "href": "index.html#pre-requisites-what-you-should-do",
    "title": "First Steps in R and RStudio",
    "section": "Pre-requisites: What you should do:",
    "text": "Pre-requisites: What you should do:\nBefore attending a workshop session, we suggest that you do the following. It will make your experience of the workshop series smoother. If you don’t get a chance to do this before attending a workshop, you will have time to do it during the session, but we won’t necessarily be able to stop our presentation to help you if you get stuck.\n\nCreate a free Posit.cloud account. We will use this as our training environment and you will have continued access to your code and materials after the workshop, through your account at Posit.cloud. Don’t use this for any patient or other CHOP data, though!\nIf you haven’t already, please consider joining CHOP’s R User Group. It’s not necessary for the workshops but you might find it useful or even fun.\n\nWe suggest requesting these programs be installed on your CHOP device(s):\n\nR – the language we use to clean, analyze, and visualize data\nRStudio Desktop – an IDE for writing R\nGit – version control software that will allow you to easily get the latest version of our course materials and will also be helpful for tracking changes in your own projects\nGitHub Desktop – a helper, or “client” software that makes working with Git easier\n\nEven though all of these software are free, you’ll need a Cost Center (or grant fund) to add to your request. Get that from your manager, administrative staff, or other leadership within your area. There will be no charge, but DTS uses this information for tracking resource utilization.\nYou’ll also need the MAC address of the device you need the software installed to.\nHaving R, RStudio, Git, and GitHub installed locally on your CHOP-issued device is not the only way to work with R and RStudio, but it can be the most convenient, and will be compliant with the constraints of working with real CHOP data. You won’t want to rely on RStudio on your personal computing device or on the cloud when it comes to working with real CHOP data!\nOn the day of your workshop\nWe suggest the following for virtual webinars:\n\nIf available to you, use two monitors (or another two-screen setup such as a laptop and a tablet or two laptops). This Skills Series is hands-on, so you will want to have extra space for working on code while also looking at slides or the chat window."
  },
  {
    "objectID": "index.html#workshop-sessions",
    "href": "index.html#workshop-sessions",
    "title": "First Steps in R and RStudio",
    "section": "Workshop Sessions",
    "text": "Workshop Sessions\nMaterial in later sessions does build on work done in earlier sessions, so do watch them in order.\nRecordings:\n\nSession 1: Review and Setup\nSession 2: Projects and File Ingestion\n\nSessions 3-5 not available yet, keep an eye on this space!\n\nSession 1: Review and Setup\nWatch the trimmed video: http://youtu.be/5rsAU9e3rHg or click below (and look below the video for useful links that will allow you to do the hands-on participation!)\n\n\nUseful links to open while you watch this video:\n\nSlides at https://arcus.github.io/first_steps_in_r_rstudio_skills_series/session_1.html (you’ll want to have this open, there are useful links to click!)\nSign up for Cloud Free at https://posit.cloud (this is where you’ll do the exercises)\nURL for the exercise files (you’ll use at Posit.cloud): https://github.com/arcus/first_steps_in_r_rstudio_exercises\n\nSession 1 Content:\n\nQuick review of R and RStudio\nR Markdown and Quarto: methods for “literate statistical programming”\nPosit.cloud: our environment for this course\nGit and GitHub: Out of scope but very useful!\nGetting R and RStudio at CHOP\n\nSession 1 Goals:\n\nUse Source and Visual views in RStudio to learn about markdown\nCreate a new code chunk in a Quarto document\nRun a code chunk in a Quarto document\n\n\n\n\nSession 2: Projects and File Ingestion\nWatch the trimmed video: https://youtu.be/tHPbt6XNjck or click below (and look below the video for useful links that will allow you to do the hands-on participation!)\n\n\n\nUseful links to open while you watch this video:\n\nSlides at https://arcus.github.io/first_steps_in_r_rstudio_skills_series/session_2.html (you’ll want to have this open, there are useful links to click!)\nSign up for Cloud Free at https://posit.cloud (this is where you’ll do the exercises)\nURL for the exercise files (you’ll use at Posit.cloud): https://github.com/arcus/first_steps_in_r_rstudio_exercises\n\nSession 2 Content:\n\nFile systems can be challenging to navigate\nProjects in RStudio\nInstalling and loading packages\nTabular data ingestion from .csv files\n\nSession 2 Goals:\n\nBe able to explain when to use install.packages() and when to use library()\nIngest data from a .csv into a data frame and examine it\nRender a quarto document to an output format (html)\n\nSlides: https://arcus.github.io/first_steps_in_r_rstudio_skills_series/session_2.html\n\n\n\nSession 3: Exploring Data Visually, Using ggplot2\n\nggplot2 syntax\nMapping Aesthetics\nSetting Visuals\nColor Palettes\n\nGoals:\n\nDescribe what an “aesthetic mapping” is in ggplot2\nCreate a simple ggplot2 data visualization\nAdd a label (like a title or an x-axis label) to a plot in ggplot2\n\nSlides: https://arcus.github.io/first_steps_in_r_rstudio_skills_series/session_3.html\n\n\n\nSession 4: Selecting Data Using dplyr\n\nSelecting columns\nFiltering rows\nCreating new columns\n\nGoals:\n\nDescribe what a “factor” variable is in R and why it’s important to use it\nUse “select” and “filter” to subset data\nUse “group by” and “summarize” to get group-level statistics\n\nSlides: https://arcus.github.io/first_steps_in_r_rstudio_skills_series/session_4.html\n\n\n\nSession 5: Putting it All Together: Communicating\n\nCreate a new document\nExplore a question\nCreate a visualization\nNext steps for using R/RStudio\n\nGoals:\n\nUse text and markdown to describe analysis tasks in an organized, attractive document\nFind useful examples from previous code and apply them to current work\nWork with error messages and help files successfully"
  },
  {
    "objectID": "index.html#license",
    "href": "index.html#license",
    "title": "First Steps in R and RStudio",
    "section": "License",
    "text": "License\nAll of the material in the First Steps in R and RStudio GitHub repository is copyrighted under the Creative Commons BY-SA 4.0 copyright to make the material easy to reuse. We encourage you to reuse it and adapt it for your own teaching as you like!"
  },
  {
    "objectID": "session_1.html",
    "href": "session_1.html",
    "title": "",
    "section": "",
    "text": "These slides available at: https://arcus.github.io/first_steps_in_r_rstudio_skills_series/session_1.html\n\nUse keyboard arrow keys to\n\nadvance ( → ) and\ngo back ( ← )\n\nType “s” to see speaker notes\nType “?” to see other keyboard shortcuts\n\n\nAs we prepare to get started, I’d like to encourage you to open these slides on your own browser, so you will have them available to refer to later. There are also a number of links you may want to click on. I’ll copy paste that URL, where the slide deck is located, into chat, so everyone has it.\nThis first slide is just to help you navigate this slide deck if you look at these slides on your own! And yes, there are ample speaker notes, so if you missed something I said, chances are it’s going to be in the speaker notes of the slide."
  },
  {
    "objectID": "session_1.html#git-and-github-desktop-out-of-scope",
    "href": "session_1.html#git-and-github-desktop-out-of-scope",
    "title": "",
    "section": "Git and GitHub Desktop: Out of scope",
    "text": "Git and GitHub Desktop: Out of scope\n… but very useful version control software.\nVersion control allows you to track\n\nWhat changed (the file name, and the line numbers and specific changes if it’s a text file)\nWhen (date and time)\nBy whom (username / ID)\nWhy (the person changing will add a message)\n\n\nGit and GitHub Desktop are complex and very useful software. We could do a skills series, or in fact several skills series, just on these! And the reason I’m bringing this up will become evident in the next couple of slides, because you’re going to install the exercise files for this workshop from a Git repository.\nVersion control software allows you to record changes to text-based files, including what changed in the file or files, when the change was made, who made the change, and why.\nWe won’t go into all the details about how to use these software packages, but I hope you remember that Git and GitHub are very useful, and although they can be a bit tricky, they are worth the effort to learn."
  },
  {
    "objectID": "session_1.html#create-your-first-literate-r-code",
    "href": "session_1.html#create-your-first-literate-r-code",
    "title": "",
    "section": "Create Your First Literate R Code!",
    "text": "Create Your First Literate R Code!\nThis is what we’re going to do:\n\nCreate a new Quarto Document\nAdd a bit of description describing what you’re planning to do\nAdd an R language “Code Chunk” doing the thing (in our case, installing tidyverse and rmarkdown)\nRun that code chunk to make sure it works\nSave that Quarto document as setup.qmd in your Exercises folder.\n\n\nThe best way to get started is to just jump in, so that’s what we’re going to do, step by step together. This is what we’re going to do.\nWe’re going to create a new Quarto document, and we’re going to start right away using a literate style. So we’re going to describe what we’re doing, then do the thing, make sure it works, then save our file.\nSo, take just a minute to look at those bullet points, and then I’ll show you some screenshots to guide you on the next few slides. So don’t worry if these instructions are too vague. You’ll get more guidance in just a sec."
  },
  {
    "objectID": "session_5.html#welcome",
    "href": "session_5.html#welcome",
    "title": "",
    "section": "",
    "text": "These slides available at: https://arcus.github.io/first_steps_in_r_rstudio_skills_series/session_5.html\n\nUse keyboard arrow keys to\n\nadvance ( → ) and\ngo back ( ← )\n\nType “s” to see speaker notes\nType “?” to see other keyboard shortcuts\n\n\nAs always, I’d like to encourage you to open these slides on your own browser, and this first slide helps with tips for you to use the slide deck."
  },
  {
    "objectID": "session_5.html#about-arcus-your-presenter",
    "href": "session_5.html#about-arcus-your-presenter",
    "title": "",
    "section": "About Arcus / Your Presenter",
    "text": "About Arcus / Your Presenter\n\n\nArcus is an initiative by the Research Institute aimed at promoting data discovery and reuse and increasing research reproducibility.\n\nArcus app: https://arcus.chop.edu\nArcus Sharepoint site: https://chop365.sharepoint.com/sites/Arcus\n\nAmong the many teams in Arcus, I represent Arcus Education!\n\n\n\n\n\n\nThanks again for joining us, and welcome to our session today! My name is ______ [add pronouns here if you want], and I’ll be leading today’s session.\nI’ve already talked a bit about Arcus in the first session of this Skills Series, but I’m including the slide here so that you have those links available in case you want to learn more about Arcus."
  },
  {
    "objectID": "session_5.html#arcus-education",
    "href": "session_5.html#arcus-education",
    "title": "",
    "section": "Arcus Education",
    "text": "Arcus Education\n\n\n\n\nArcus education provides data science training to researchers …\n(and often this is useful to non-researchers too!).\nhttps://arcus.chop.edu/i-want-to/arcus-education\nEmail us! arcus-education@chop.edu\n\n\n\nThe Arcus Education team does lots of different kinds of education, and we’ve already discussed this previously in other workshop sessions. You can always email us at arcus dash education at chop dot edu to ask about how we can help you!"
  },
  {
    "objectID": "session_5.html#first-steps-in-r-and-rstudio",
    "href": "session_5.html#first-steps-in-r-and-rstudio",
    "title": "",
    "section": "First Steps in R and RStudio",
    "text": "First Steps in R and RStudio\nArcus Education provides “Skills Series” for the entire CHOP community.\nThis Skills Series is a 5-session series aimed at helping you take your first steps in R and RStudio!\n\nSession 1: Review and Setup\nSession 2: Projects and File Ingestion\nSession 3: Exploring Data Visually, Using ggplot2\nSession 4: Selecting Data Using dplyr\nSession 5: Putting it All Together: Communicating\n\n\nJust a reminder about what you’re in today.\nThis is a five-session series, and our goal is to help you get started taking your first steps. Today, we’re in session three, right smack dab in the middle of our work together."
  },
  {
    "objectID": "session_5.html#session-3-itinerary",
    "href": "session_5.html#session-3-itinerary",
    "title": "",
    "section": "Session 3 Itinerary",
    "text": "Session 3 Itinerary\nExploring Data Visually, Using ggplot2\n\nggplot2 syntax\nMapping Aesthetics\nSetting Visuals\nColor Palettes\n\nGoals:\n\nDescribe what an “aesthetic mapping” is in ggplot2\nCreate a simple ggplot2 data visualization\nAdd a label (like a title or an x-axis label) to a plot in ggplot2\n\n\nToday, our topic is exploring data visually, using the ggplot2 package. We’ll go over how to use ggplot2, including some specific topics like mapping and setting visual elements and the use of color palettes.\nMy goals for you today include the following. I’d like for you to be able to explain what an aesthetic mapping is in ggplot2, because this is an area where a lot of people tend to stumble. I hope you’ll have been able to create a simple ggplot2 visualization by the end of our session, and I think you’ll be able to add a label to a plot by the end of today. Let’s start by explaining what ggplot2 is!"
  },
  {
    "objectID": "session_5.html#ggplot2",
    "href": "session_5.html#ggplot2",
    "title": "",
    "section": "ggplot2",
    "text": "ggplot2\n{fig-alt = “ggplot2 logo.”}\n\nWe’ll be using the ggplot2 package for creating graphics. ggplot2 is a package that forms part of the tidyverse, so it will get loaded when you load the tidyverse package.\nggplot2 (and its main function, plain old ggplot without the 2) provides a “grammar of graphics” for data visualization. That’s what the “GG” is in ggplot: grammar of graphics. The idea of having a “grammar” for something is actually pretty common in R. Essentially, there should be a consistent way to build any type of “thing” in R, in this case, any type of graph. A common grammar that is easy to repeat every time.\nThe idea of the grammar of graphics is that you should be able to specify any type of graph by specifying the data that goes into it, the type of graph that you want to make, and a mapping that describes how the data should be represented as visual marks on that graph.\nHaving a consistent grammar means that once you learn how to make, say, a histogram, that knowledge can be applied to make a scatter plot or a box plot or a violin plot with little extra effort. This makes it easy to generate lots of different graphs quickly which helps you understand your data more quickly.\nAlso, ggplot2 graphs look great and the package can be used to generate publication-quality plots."
  },
  {
    "objectID": "session_5.html#the-grammar-of-ggplot",
    "href": "session_5.html#the-grammar-of-ggplot",
    "title": "",
    "section": "The “grammar” of ggplot",
    "text": "The “grammar” of ggplot\n\n\n\nStep 1: Pick a tidy data frame to pass to ggplot as an argument\n\n\nggplot(data = cirrhosis_study)\n\n\nStep 2: Pick a “geom” function\n\n\n\n\n\nStep 3: Write aesthetic mappings\n\n\n\n\n\nWe’ll go over each of these steps in detail, but here is the overall grammar we’re going to talk about. There are also optional enrichment steps that you can add that will really make your data visualizations shine, but these are the absolutely required steps for the bare minimum kinds of plots.\nYou first need to choose a tidy data frame. We’ll describe what a tidy data frame is in just a moment.\nThen you will choose a geom, or a kind of visualization, a geometric representation. A geom might be a bar graph, or a line graph, for example. Finally, you’ll tell ggplot how to map the data to the visual parts of the geom you chose. What columns should be shown on which axes, for example?\nLet’s take a closer look at each step."
  },
  {
    "objectID": "session_5.html#step-1-tidy-data",
    "href": "session_5.html#step-1-tidy-data",
    "title": "",
    "section": "Step 1: Tidy Data",
    "text": "Step 1: Tidy Data\n\nColumns measure just one variable and don’t have any merging or combining\nRows each represent just one observation and don’t include variables\nThere’s no merging of cells that make names or values shared\n\n\nA data set can take on a lot of different shapes with different styles of organizing data. The one method or shape that is best suited for data analysis is known as “tidy”.\nWe won’t cover “tidy” data in detail in this workshop. It’s sufficient at this point to know that tidy data is in a rectangular shape with rows and columns, and:\n\nColumns each measure just one variable (so, no “doubling up” with first and last name in the same column, or race and gender in the same column) and\nRows each constitute a single observation (like a patient, or a vial, or a city block) at a point in time\nEach value is in its own cell (with no merging or splitting of cells)"
  },
  {
    "objectID": "session_5.html#example-untidy-vs-tidy",
    "href": "session_5.html#example-untidy-vs-tidy",
    "title": "",
    "section": "Example: Untidy vs Tidy",
    "text": "Example: Untidy vs Tidy\n\n\nUntidy\n\n\n\n\nMeasure 1\n\n\nMeasure 2\n\n\nMeasure 3\n\n\nMeasure 4\n\n\n\n\npre\n\n\npost\n\n\npre\n\n\npost\n\n\npre\n\n\npost\n\n\npre\n\n\npost\n        \nTeam 1\n(n=6m, 14f)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        \nTeam 2\n(n=12m,8f)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        \nTeam 3\n(n=10m, 10f)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTeam 4\n(n=5m, 15f)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOK, let’s say you study group performance. So you have several different groups that you bring into the lab. You’re doing an experiment where you form a team of 20 strangers, and you’re measuring their ability to perform four tasks as a team. You measure their performance before and after having them watch a full season of Dora the Explorer, to see if that improves their creativity and enthusiasm for adventure.\nOn the left is the kind of table you might see published in a journal. It’s compact, but it is not tidy. You can see that the sex makeup of the teams, which varies from team to team, is listed in the rows. But that varies, which means it’s a variable, and variables should go in columns, not rows. And we also have header cells that merge across two columns. This is a perfectly adequate table for publication, but it’s not tidy and not ready for use in the tidyverse.\nWe could make it tidy, and I’m going to show you how in the next slide."
  },
  {
    "objectID": "session_5.html#example-untidy-vs-tidy-1",
    "href": "session_5.html#example-untidy-vs-tidy-1",
    "title": "",
    "section": "Example: Untidy vs Tidy",
    "text": "Example: Untidy vs Tidy\n\n\nUntidy\n\n\n\n\nMeasure 1\n\n\nMeasure 2\n\n\nMeasure 3\n\n\nMeasure 4\n\n\n\n\npre\n\n\npost\n\n\npre\n\n\npost\n\n\npre\n\n\npost\n\n\npre\n\n\npost\n        \nTeam 1\n(n=6m, 14f)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        \nTeam 2\n(n=12m,8f)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        \nTeam 3\n(n=10m, 10f)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTeam 4\n(n=5m, 15f)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTidy\n\n\n\n\n\nIntervention Stage\n\n\nN Males\n\n\nN Females\n\n\nMeasure 1\n\n\nMeasure 2\n\n\nMeasure 3\n\n\nMeasure 4\n\n\n\n\nTeam 1\n\n\nPre\n\n\n6\n\n\n14\n\n\n\n\n\n\n\n\n\n\n\n\nTeam 1\n\n\nPost\n\n\n6\n\n\n14\n\n\n\n\n\n\n\n\n\n\n\nTeam 2\n\n\nPre\n\n\n12\n\n\n8\n\n\n\n\n\n\n\n\n\n\n\nTeam 2\n\n\nPost\n\n\n12\n\n\n8\n\n\n\n\n\n\n\n\n\n\n\nTeam 3\n\n\nPre\n\n\n10\n\n\n10\n\n\n\n\n\n\n\n\n\n\n\nTeam 3\n\n\nPost\n\n\n10\n\n\n10\n\n\n\n\n\n\n\n\n\n\n\nTeam 4\n\n\nPre\n\n\n5\n\n\n15\n\n\n\n\n\n\n\n\n\n\nTeam 4\n\n\nPost\n\n\n5\n\n\n15\n\n\n\n\n\n\n\n\n\n\n\n\nOn the left is our not tidy data, and on the right, I’ve made it tidy.\nLet’s think about what columns are and what rows are. Rows are observations, and the fact is that we observe each team twice, so we’re going to have two rows for each team.\nAnd columns are variables. What can be different from observation to observation? Well, pre versus post is one variable that we think and hope will change the outcome. The number of males and females can differ from group to group, too. These first three columns are just kind of re-arranged a little bit from the information we already had.\nCan everyone see that this is another way to capture the same data? It might not be as compact as what you would put in a print journal, but this is tidy data, which is what will make working in R possible! All the variables are in columns, all the observations are in rows, there’s no doubling up of values."
  },
  {
    "objectID": "session_5.html#tidy-or-not-tidy",
    "href": "session_5.html#tidy-or-not-tidy",
    "title": "",
    "section": "Tidy, or Not Tidy?",
    "text": "Tidy, or Not Tidy?\n\n\n\n\nID_Arm\nN_Days\nStatus\nAge\nSex\nAHS Status\n\n\n\n\n1_D\n400\nD\n21464\nF\nY/Y/Y\n\n\n2_D\n4500\nC\n20617\nF\nN/Y/Y\n\n\n3_D\n1012\nD\n25594\nM\nN/N/N\n\n\n4_D\n1925\nD\n19994\nF\nN/Y/Y\n\n\n5_P\n1504\nCL\n13918\nF\nN/Y/Y\n\n\n6_P\n2503\nD\n24201\nF\nN/Y/N\n\n\n7_P\n1832\nC\n20284\nF\nN/Y/N\n\n\n8_P\n2466\nD\n19379\nF\nN/N/N\n\n\n9_D\n2400\nD\n15526\nF\nN/N/Y\n\n\n10_P\n51\nD\n25772\nF\nY/N/Y\n\n\n11_P\n3762\nD\n19619\nF\nN/Y/Y\n\n\n12_P\n304\nD\n21600\nF\nN/N/Y\n\n\n13_P\n3577\nC\n16688\nF\nN/N/N\n\n\n14_P\n1217\nD\n20535\nM\nY/Y/N\n\n\n15_D\n3584\nD\n23612\nF\nN/N/N\n\n\n16_P\n3672\nC\n14772\nF\nN/N/N\n\n\n17_P\n769\nD\n19060\nF\nN/Y/N\n\n\n18_D\n131\nD\n19698\nF\nN/Y/Y\n\n\n\n\n\nOK, so now I’d like to ask you – is this tidy data? Is there any data out of place, cells that are merged, rows that should be columns, columns that should be rows? The first column is the ID, which has the ID and the arm, which is either drug or placebo. The next column is the length of time the subject remained in the study. The third column is the final disposition of the subject, whether they left the study due to death, organ transplantation, or the end of the study. Then the age of the patient at the time they left the study, the sex of the patient, and their status with regard to ascites, hePATomegaly, and spider angiomas.\nWhat do you think? I’ll invite you to give your reasoning in chat."
  },
  {
    "objectID": "session_5.html#tidy-or-not-tidy-1",
    "href": "session_5.html#tidy-or-not-tidy-1",
    "title": "",
    "section": "Tidy, or Not Tidy?",
    "text": "Tidy, or Not Tidy?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nID\nN_Days\nStatus\nDrug\nAge\nSex\nAscites\nHepatomegaly\nSpiders\n\n\n\n\n1\n400\nD\nD-penicillamine\n21464\nF\nY\nY\nY\n\n\n2\n4500\nC\nD-penicillamine\n20617\nF\nN\nY\nY\n\n\n3\n1012\nD\nD-penicillamine\n25594\nM\nN\nN\nN\n\n\n4\n1925\nD\nD-penicillamine\n19994\nF\nN\nY\nY\n\n\n5\n1504\nCL\nPlacebo\n13918\nF\nN\nY\nY\n\n\n6\n2503\nD\nPlacebo\n24201\nF\nN\nY\nN\n\n\n7\n1832\nC\nPlacebo\n20284\nF\nN\nY\nN\n\n\n8\n2466\nD\nPlacebo\n19379\nF\nN\nN\nN\n\n\n9\n2400\nD\nD-penicillamine\n15526\nF\nN\nN\nY\n\n\n10\n51\nD\nPlacebo\n25772\nF\nY\nN\nY\n\n\n11\n3762\nD\nPlacebo\n19619\nF\nN\nY\nY\n\n\n12\n304\nD\nPlacebo\n21600\nF\nN\nN\nY\n\n\n13\n3577\nC\nPlacebo\n16688\nF\nN\nN\nN\n\n\n14\n1217\nD\nPlacebo\n20535\nM\nY\nY\nN\n\n\n15\n3584\nD\nD-penicillamine\n23612\nF\nN\nN\nN\n\n\n16\n3672\nC\nPlacebo\n14772\nF\nN\nN\nN\n\n\n17\n769\nD\nPlacebo\n19060\nF\nN\nY\nN\n\n\n18\n131\nD\nD-penicillamine\n19698\nF\nN\nY\nY\n\n\n\n\n\nOK, and is this data in a tidy format? This, by the way, is a snippet of the actual data you’re working with in this series.\nLet me know what you think in chat. Yes, indeed, this is tidy data!\nImportantly, for these five workshop sessions, we’re giving you data that’s already in a tidy data format. We’re not going to go over how to make your data tidy, because that work is boring and I want you to have fun doing the exciting stuff that will get you enthusiastic about R. I’m giving you some data that’s artificially beautiful. Real research data is messy, and real clinical data is even messier."
  },
  {
    "objectID": "session_5.html#the-grammar-of-ggplot-1",
    "href": "session_5.html#the-grammar-of-ggplot-1",
    "title": "",
    "section": "The “grammar” of ggplot",
    "text": "The “grammar” of ggplot\n\n\n\nStep 1: Pick a tidy data frame to pass to ggplot as an argument\n\n\nggplot(data = cirrhosis_study)\n\n\nStep 2: Pick a “geom” function\n\n\n\n\n\nStep 3: Write aesthetic mappings\n\n\n\n\n\nSo that was step 1. This is what it looks like in code. This is a very simple example, where we’re just passing the most important piece of information, the name of the tidy data frame, as the first argument to ggplot2.\nLet’s go on to Step 2."
  },
  {
    "objectID": "session_5.html#step-2-pick-a-geom-function",
    "href": "session_5.html#step-2-pick-a-geom-function",
    "title": "",
    "section": "Step 2: Pick a “geom” function",
    "text": "Step 2: Pick a “geom” function\nThere are lots of ways to depict data geometrically:\n\n\n\n\ngeom_histogram()\n\n\n\ngeom_dotplot()\n\n\n\n\n\ngeom_bar()\n\n\n\ngeom_boxplot()\n\n\n\n\n\ngeom_point()\n\n\n\ngeom_line()\n\n\nHere are a few useful geom functions for visualizing data, but there are many more. With these six you can make histograms, bar plots, scatter plots, dot plots, boxplots, and line graphs. Your data is probably very rich, and with the same data, you could show group distributions using a box plot or violin plot, or show time series data using a line plot, or show how two variables interact using a point plot, or show the frequency of various values using a histogram, or show correlation strength using a heatmap, or lots of other things, all with the same tidy data frame. So you have to think about what specific kind of data visualization you want!"
  },
  {
    "objectID": "session_5.html#the-grammar-of-ggplot-2",
    "href": "session_5.html#the-grammar-of-ggplot-2",
    "title": "",
    "section": "The “grammar” of ggplot",
    "text": "The “grammar” of ggplot\n\n\n\nStep 1: Pick a tidy data frame to pass to ggplot as an argument\n\n\nggplot(data = cirrhosis_study) +\n\n\nStep 2: Pick a “geom” function\n\n\ngeom_histogram()\n\n\nStep 3: Write aesthetic mappings\n\n\n\n\n\nSo now we’ve added a bit to our code. We’ve put a plus sign after the first line of code, which is a way to tell ggplot that we’re going to add a new layer to our data visualization. ggplot2 works by allowing you to add layer upon layer of geometric visualizations, labels, themes, and adjustments to your graph, so that you build it up a little at a time. That plus sign says, “I’m not done yet, please keep reading!”.\nThe second line of code says “I’d like this specific shape, please: a histogram.” ggplot knows what a histogram is. So you’re one step closer to that visualization. But you’re not done yet. ggplot knows that it needs one variable to be able to make a histogram. It doesn’t need two, as in the case of, say, a scatter plot of points, where it would need an X and a Y axis value. No, it just needs one value, because it’s going to plot the frequency of various values of this variable. But you haven’t told it which variable you want to use!"
  },
  {
    "objectID": "session_5.html#step-3-aesthetic-mappings",
    "href": "session_5.html#step-3-aesthetic-mappings",
    "title": "",
    "section": "Step 3: Aesthetic Mappings",
    "text": "Step 3: Aesthetic Mappings\n\nAesthetic mappings connect columns to visible attributes.\n\nOK, so aesthetic mappings can be tricky. So if you’re multi-tasking, I need you to stop writing that email, because this is where a lot of people trip up and make mistakes, including me, and I’ve been coding in R for a decade.\n\nAn aesthetic mapping is a rule that tells ggplot how to visualize the data, for example, using color or position, according to the value of a specific column of the data. These are elements that would result in a different looking visualization if you were to change the data being provided. For example, the height of a bar changes depending on the data. Maybe you might show female patients as dots of one color and male patients as dots of another color, so if you correct a patient’s sex in the data, their dot will change color. You’re mapping patient sex to a visible characteristic, color. It’s really important to remember that mapping aesthetics will always come down to selecting a specific column from your data frame.\n\nOf course, there are other visual elements of a data visualization that wouldn’t automatically change if you change the data you provide. For instance, maybe we just like green and we want ALL the points on our graph to be green. We’re not changing the color based on data, we’re not connecting the color to just one column of data, so it’s not considered a mapping. When we’re setting a fixed aesthetic that isn’t affected by data, we don’t put these assignments inside the aes parentheses. We don’t MAP those within aesthetics, we SET those outside."
  },
  {
    "objectID": "session_5.html#aesthetic-mappings",
    "href": "session_5.html#aesthetic-mappings",
    "title": "",
    "section": "Aesthetic Mappings",
    "text": "Aesthetic Mappings\n\n\n\n\n\n\nSpiders\nCholesterol\nAlbumin\n\n\n\n\nY\n261\n2.6\n\n\nY\n302\n4.14\n\n\nN\n176\n3.48\n\n\nY\n244\n2.54\n\n\nY\n279\n3.53\n\n\nN\n248\n3.98\n\n\nN\n322\n4.09\n\n\n\n\n\nSpiders: •• (Color)\nCholesterol: ↔︎ (X axis)\nAlbumin: ↕ (Y axis)"
  },
  {
    "objectID": "session_5.html#aesthetic-mappings-1",
    "href": "session_5.html#aesthetic-mappings-1",
    "title": "",
    "section": "Aesthetic Mappings",
    "text": "Aesthetic Mappings\n\n\n\n\n\n\nSpiders\nCholesterol\nAlbumin\n\n\n\n\nY\n261\n2.6\n\n\nY\n302\n4.14\n\n\nN\n176\n3.48\n\n\nY\n244\n2.54\n\n\nY\n279\n3.53\n\n\nN\n248\n3.98\n\n\nN\n322\n4.09\n\n\n\n\n\nSpiders: •• (Color)\nCholesterol: ↔︎ (X axis)\nAlbumin: ↕ (Y axis)\n\n\nmapping = aes(x = Cholesterol,\n              y = Albumin,\n              color = Spiders)\n              \n              \n\n\nDon’t worry if mapping aesthetics versus setting fixed aesthetics seems a bit fuzzy at first – it can be tricky to grapple with, and will become clearer over time as you gain more experience manipulating visualizations in R. Even advanced coders sometimes mess this up.\nLet’s consider an example in our cirrhosis data frame.\nWe can imagine mapping the values in the “Cholesterol” column, which is numerical, to the x axis. With the “Albumin” column, also numerical, we can map those values to the y axis. And for the column called “Spiders”, which has categorical data with “Y” and “N” values, we can imagine mapping that to colors.\nCan you envision what that graph might look like? It would probably be a scatter plot that would have points of two different colors, at least that’s what I’m picturing in my mind.\nThe mapping in ggplot would be within the aes parentheses, as you see on your screen.\nNote that R automatically figures out reasonable axis limits and a color scale, but you can fine tune this manually."
  },
  {
    "objectID": "session_5.html#participation-time",
    "href": "session_5.html#participation-time",
    "title": "",
    "section": "Participation Time!",
    "text": "Participation Time!\n\nIn addition to x/y position and color, what other aesthetic mappings can you think of?\n(Hint: things that don’t change when the data changes, like the background color of a graph or the font or title of a graph, aren’t mappings).\nType your answers in the chat!\n\nOkay, time to fire up the chat window again. Type into chat some examples of other aesthetic mappings. Keep in mind that if something is set in a fixed way and it’s the same regardless of the data, that’s not a mapping."
  },
  {
    "objectID": "session_5.html#the-grammar-of-ggplot-3",
    "href": "session_5.html#the-grammar-of-ggplot-3",
    "title": "",
    "section": "The “grammar” of ggplot",
    "text": "The “grammar” of ggplot\n\n\n\nStep 1: Pick a tidy data frame to pass to ggplot as an argument\n\n\nggplot(data = cirrhosis_study) +\n\n\nStep 2: Pick a “geom” function\n\n\ngeom_histogram(aes (x = Cholesterol))\n\n\nStep 3: Write aesthetic mappings\n\n\n(you can put these in either of the 2 lines above…)\n\n\nOK, so we’ve gotten to the mapping bits. We know we have to put an aes function in, but where does it go? The answer is that it can go in a couple of places. We’ve said we want to do a histogram, which only needs a single variable defined, the X axis variable. Let’s say we want to map the Cholesterol column to that x axis. If you want, you can put the aes function that maps your Cholesterol to your x axis all the way at the top, in the ggplot function. The benefit to doing that is that every geom that you add on as a layer will inherit that and will know that Cholesterol maps to the x axis. Some people like doing it that way.\nBut I prefer to put the aes, the aesthetic mapping, in the geom function. That’s because sometimes I will have several different geoms and I want to map different things in different geoms. It’s a little tricky to think about, so for now what I want you to do is put the mapping in the geom you’re working in, but I want you to not be too surprised if you see that some people put it at the top, in the ggplot part of the syntax. That’s okay, too, and it just gets inherited by all the geoms below it."
  },
  {
    "objectID": "session_5.html#your-turn",
    "href": "session_5.html#your-turn",
    "title": "",
    "section": "Your Turn!",
    "text": "Your Turn!\n\nGo to https://posit.cloud and log in.\nFind your First Steps in R and RStudio project and open it\nIn the file browser (lower right), navigate to Exercises\nOpen session_5_exercise.qmd, and start reading and working in it!\nIf you save this file, save it with your initials at the end (rename it).\nIf you get stuck, there’s a solutions file in the “solutions” folder, or jump into chat!\nI’d love for everyone to work quietly for around 15 minutes, and then I’ll demo some of the solution.\nI’ll stop us all for a couple of closing slides and for Q&A as we get close to the end of the hour."
  },
  {
    "objectID": "session_5.html#summary-of-today",
    "href": "session_5.html#summary-of-today",
    "title": "",
    "section": "Summary of Today",
    "text": "Summary of Today\nToday, you:\n\nLearned about the grammar of graphics\nEvaluated whether data was “tidy” or not\nLearned about mapping data to visual aesthetics\nCreated some simple (and some not-so-simple) data visualizations\nLabeled your data visualizations\nProbably worked with some error messages and maybe some help files\n\nThat’s a lot! Give yourselves a round of applause.\n\nOK, so that’s session 3. Today, we talked about ggplot2. And you did a lot of hands-on work, too! If you have a feeling word you want to drop into chat, I’d love to know how today left you feeling!"
  },
  {
    "objectID": "session_5.html#qa-was-this-effective",
    "href": "session_5.html#qa-was-this-effective",
    "title": "",
    "section": "Q&A / Was This Effective?",
    "text": "Q&A / Was This Effective?\nWe like to measure our effectiveness (and analyze it in R!)\nGoals:\n\nDescribe what an “aesthetic mapping” is in ggplot2\nCreate a simple ggplot2 data visualization\nAdd a label (like a title or an x-axis label) to a plot in ggplot2\n\n\nThe Arcus education team is a group that likes to measure our effectiveness and make changes based on what we learn. So before we do questions and answers and our final slides, we like to make sure to give our learners a poll to see if we made a good use of your time. We’re going to ask if we were effective in reaching our goals today, and those goals are on the screen in order to help you answer that question. Once you answer that poll, feel free to type a question into chat or come off mute and ask to clarify anything I can explain a bit better."
  },
  {
    "objectID": "session_5.html#next-session",
    "href": "session_5.html#next-session",
    "title": "",
    "section": "Next Session",
    "text": "Next Session\nSelecting Data Using dplyr\n\nSelecting columns\nFiltering rows\nCreating new columns\n\n\nIn our next session, we’re going to talk about how to select, reshape, filter, and work with our data using the dplyr package, which is another useful package from the tidyverse suite of tools. I’m looking forward to seeing you there. Thanks so much for your hard work today. If you have questions between today and next week, feel free to email me at paytonk@chop.edu or arcus-education@chop.edu, and have a great rest of your day!\n\n\n\n\n\nArcus Education, Children’s Hospital of Philadelphia"
  },
  {
    "objectID": "session_5.html#session-5-itinerary",
    "href": "session_5.html#session-5-itinerary",
    "title": "",
    "section": "Session 5 Itinerary",
    "text": "Session 5 Itinerary\nPutting it All Together: Communicating\n\nCreate a new document\nExplore a question\nCreate a visualization\nNext steps for using R/RStudio\n\nGoals:\n\nUse text and markdown to describe analysis tasks in an organized, attractive document\nFind useful examples from previous code and apply them to current work\nWork with error messages and help files successfully\n\n\nToday, we’re really going to work independently and try to make today a “lab day”, where you take what you’ve learned in the first four sessions to make some of your own decisions and create a document where YOU are in charge of the data exploration.\nMy goals for you today include the following.\nI’d like for you to create a new document that will communicate some data findings, and in that document, I want you to use text and markdown to describe your analysis tasks. To be effective, you’re going to need to go back to some of the code you’ve worked on before and borrow some code, and you’ll need to deal with mistakes and setbacks, error messages and help messages. You have a warm and helpful group of friends here that will help you in chat!"
  },
  {
    "objectID": "session_2.html#lots-of-ways-to-ingest-data",
    "href": "session_2.html#lots-of-ways-to-ingest-data",
    "title": "",
    "section": "Lots of Ways to Ingest Data",
    "text": "Lots of Ways to Ingest Data\nData can be ingested into R from lots of sources:\n\nSQL Databases\nREDCap\nAPI Endpoints (Census Bureau, NYT, PubMed)\nData exported from SAS / SPSS / Stata\n.json, .csv, .xlsx, .tsv, .txt, .arff files\nand much much more!\n\n\nYou can bring data into R from lots of different kinds of sources, as you can see on this slide. But I want to concentrate on the one of the most portable and popular data types you’ll be seeing frequently, and that’s the .CSV file. Please don’t think that R is limited to .csv data, it certainly is not. But that’s what we’ll be doing in our workshop series here."
  },
  {
    "objectID": "session_2.html#recap",
    "href": "session_2.html#recap",
    "title": "",
    "section": "Recap",
    "text": "Recap\n\nFunctions (argument, input, output, objects)\nWorking with code chunks\nIngesting data from a .csv\nWorking with the environment pane\nLearning about help in R\nNaming things\nRendering\n\n\nYou did a lot today, so give one another a heart emoji or thumbs up in the reactions. We covered functions and data ingestion, and you did so much additional hands on work, including working with the environment pane, the help pane, rendering a quarto document, working with code chunks… it was a lot! If you want, drop a word or phrase into chat to tell us about how you’re feeling at the close of the hour."
  },
  {
    "objectID": "session_1.html#step-1-new-document",
    "href": "session_1.html#step-1-new-document",
    "title": "",
    "section": "Step 1: New Document",
    "text": "Step 1: New Document\n\nGo to File, New File, Quarto Document.\nGive it the title “Setup” and click “Create”.\nTry clicking on “Visual” and “Source” and scrolling up and down!\nYou might get a “Visual mode” pop up box – give it a read.\n\n\n\n\n\n\n\n\n\n\n−+\n01:00\n\n\n\n\nOK, so with each step, I’ll give you about a minute to do this, and then I’ll show you what it looks like and demo it live.\nFirst, please use the File, New File menu option to create a new Quarto document. You’ll be asked to provide a title. Make that title “Setup”. You can put your name in as Author if you want, but don’t change anything else. Then click the “Create” button at the bottom right. When your new file creates, please don’t click anything else, even if you see a yellow banner that is prompting you to install a program. I want you to wait, please. And try both the source and visual view to look at that new file!\nI’ll give you a minute, and then I’ll share my screen and do the same thing as you.\n[Click countdown timer].\nOK, so let me switch my screen over to my own Posit.cloud account, where I’ve got the project open. I’m going to click on File, then New File, and then Quarto Document. I’ll add the word “Setup” to the Title, and click “Create”. Simple as that.\nNow, I want to point out that there’s a banner there that is offering you a shortcut. I do NOT want you to take this shortcut. If you did already, that’s okay, but I want to show you the manual way to install packages, so please don’t click in that yellow banner. It’s a useful message, however, because it’s telling you, hey, for me to be fully effective, you need to install a package, specifically the rmarkdown package. So we’ll use this data in just a sec. \nNow, I’m going to click on these two buttons, Visual and Source, to see two different ways this sample file looks. I’ll get an informational pop up telling me “oh hey, you’re about to enter into Visual mode, here’s some info about that.” If you want to read that later, you can, but just uncheck that box so you can make it pop up again!\nYou can see that the RStudio software has given me some sample code to help guide me. This sample code is something you might hear people call “boilerplate” code. We don’t need this code, but it helps give us a guide to follow. I’m going to scroll up and down, and look at it in both Visual mode and Source mode. This will help you understand how markdown works. You can see the raw markdown by clicking on the Source button, and see things like triangle brackets and double asterisks and hash marks, and then click on Visual to see how that markdown gets rendered into html to have the formatting we want.\nDoes it matter what you use? Source or Visual? Well, for this course we’re going to have you use Source, just so we’re all doing the same thing. But for your future work, it doesn’t really matter. Use what you prefer! Or go back and forth between Source and Visual, to try things out and see what they look like. So for now, click on Source so we’re all seeing the same thing.\nOK, let’s go back to the slides for our next step.\n[Go back to slides.]"
  },
  {
    "objectID": "session_1.html#git-and-github-desktop",
    "href": "session_1.html#git-and-github-desktop",
    "title": "",
    "section": "Git and GitHub Desktop:",
    "text": "Git and GitHub Desktop:\nVersion control allows you to track\n\nWhat changed (the file name, and the line numbers and specific changes if it’s a text file)\nWhen (date and time)\nBy whom (username / ID)\nWhy (the person changing will add a message)\n\n(Out of scope today but useful!)\n\nGit and GitHub Desktop are complex and very useful software. We could do a skills series, or in fact several skills series, just on these! And the reason I’m bringing this up will become evident in the next couple of slides, because you’re going to install the exercise files for this workshop from a Git repository.\nVersion control software allows you to record changes to text-based files, including what changed in the file or files, when the change was made, who made the change, and why.\nWe won’t go into all the details about how to use these software packages, but I hope you remember that Git and GitHub are very useful, and although they can be a bit tricky, they are worth the effort to learn."
  },
  {
    "objectID": "session_1.html#step-2-add-description",
    "href": "session_1.html#step-2-add-description",
    "title": "",
    "section": "Step 2: Add description",
    "text": "Step 2: Add description\n\nRemove the existing markdown and code\nStart a new header (“Installing Packages”) with two hash marks (#)\nEnter a blank line\nThen type a description of installing packages\n\n\n\n\n\n\n\n\n−+\n01:00\n\n\n\n\nAgain, I’ll give you about a minute to do this. Delete all the stuff from the line with the header “quarto” (that’s line 7 or 8 if you’re looking in the Source view). Then add a new header and description. I’ll start the timer to give you a chance to do it, then I’ll demo this for you.\n[Click countdown timer].\nOK, so let me switch my screen over to my own Posit.cloud account, where I’ve got the project open.\nI’m going to make sure I’m in “Source” view, and I’m going to put my cursor at the start of line 7. I’ll highlight everything here from line 7 and below, and just hit backspace or delete to remove it.\nNow I’ll put in two hashmarks, which, if you’re an HTML person, will make an H2 header, and put a space after the hashmarks. And I’ll put the text of the header, which can be whatever you want, but I want this to say “Installing Packages.”\nI’ll hit enter two times after this, so that there’s a blank line after my header, and then I’ll just start typing. Maybe I’ll say something like “We need to install some packages.” Now, I’ll explain in session 2 about installing packages and when you need to do that, so don’t worry if you’re not sure what this is actually doing.\nIf I want to see what this kind of formatting looks like when it is rendered into HTML, I can click on the Visual button at the top to see what it looks like. Yep, a header, and some explanatory text below that. Perfect! I’ll go back to Source view for now, and then we can go back to the slides.\n[Go back to slides.]"
  },
  {
    "objectID": "session_1.html#step-4-run-code-chunk",
    "href": "session_1.html#step-4-run-code-chunk",
    "title": "",
    "section": "Step 4: Run Code Chunk",
    "text": "Step 4: Run Code Chunk\n\nUse the green triangle (“Play” button) on the chunk to run the chunk\nLook in the “Console” for output. It will be verbose, and take a while.\nYou’ll know it’s finished when the prompt &gt; appears in the Console and the Stop sign disappears!\n\n\n\n\n\n\n\n\n\n\n−+\n00:30\n\n\n\n\nAgain, you’ll do this first, then I’ll demo. You’re going to run this code by clicking on the “play” button in the code chunk, and these packages will install. It’ll take a while! And if you mistyped something, you might get an error message. If that happens, don’t panic. Read the error message and see if you can figure out what it’s trying to communicate. I’ll give you just a few seconds to find and click that button, then I’ll demonstrate this step.\n[Click countdown timer].\nOK, so let me switch my screen over. Your code is probably still running, and that’s okay. Let me move my mouse over to the top of my code chunk at the top right corner, and find that green “play” button. I’ll click there, and in the console, I can watch a lot happen.\n[Do the thing]\nOK, so while this is going on I’ll explain that if there are any packages that are dependencies, things that are required to be installed before the packages we want to install can be successfully installed, those will come along for free. So you’re going to see not just rmarkdown and tidyverse get installed, but lots of other underlying packages, too, which rmarkdown and tidyverse rely on and need. When the install is still running, you’ll see a stop sign in the Console, which you can click if you need the process to stop.\nOnce things finish, there will be a prompt in the Console, ready for the next command.\nNow, this is a moment where sometimes people have error messages, so let’s pause here in case there are issues, before we go on.\n[Note – if ppl have issues there is a file in solutions called setup.qmd that they can run instead, so you don’t get bogged down in fixing it]\n…\nOK, so let’s go back to the slides.\n[Go back to slides]"
  },
  {
    "objectID": "session_1.html#step-5-save-document",
    "href": "session_1.html#step-5-save-document",
    "title": "",
    "section": "Step 5: Save Document",
    "text": "Step 5: Save Document\n\nClick on File, Save\nName your file “setup” (you don’t have to add “.qmd”, but you can!)\nSave it inside the “exercises” folder\n\n\n\n\n\n−+\n00:30\n\n\n\n\nOK, last step! I’m going to ask you to save this file. You shouldn’t ever have to run this code again for this project, but it might be handy to hang on to it anyway. Please use the File menu to save this file. Give it the name setup and save it in “exercises”.\nYou do it, then I’ll do it.\n[Click countdown timer].\nOK, that’s time. I’ll share my Posit.cloud window now, and I want you to notice that my file name here is red and has an asterisk, which is telling me there are unsaved changes. So let’s go into File, then Save. I’m going to type “setup” in the file name, choose “exercises” for the file location, and then “Save”.\nWhen I do that, my file name is no longer red, it’s black, and that is a good visual indicator that I’m caught up, that there are no unsaved changes.\n[Optionally, if there is time, talk about help. This will be covered in Session 2 but in case you need to fill time…\nWhile we’re here, I want to go over getting help in R and RStudio. There are a few places to look.\n\nissue ?install.packages in the console\ntalk about help files and how reading the code at the top and the examples at the bottom can be a good place to start reading help files\nIn the help tab, use the upper right search (not the lower left search-in-topic search) to search for “cor” to find cor.test\nRemind people about the cheat sheets in the Help menu]\n\nLet’s go back to the slides."
  },
  {
    "objectID": "session_2.html#next-session",
    "href": "session_2.html#next-session",
    "title": "",
    "section": "Next Session",
    "text": "Next Session\nExploring Data Visually, Using ggplot2\n\nggplot2 syntax\nMapping Aesthetics\nSetting Visuals\nColor Palettes\n\n\nIn our next session, we’re going to do my favorite session, data visualization. If you have an artistic streak, I think you’ll really enjoy this session. We’ll talk about the grammar of graphics, using the library ggplot2, which is part of the tidyverse. We’ll talk about the very important distinction between mapping aesthetics and setting visual properties, and we’ll touch on some color palette possibilities. It’s going to be very hands-on with none of the posit.cloud setup next time, so please make sure you’re all set up and ready to go for session 3. Thanks again for all your hard work and we’ll see you next time!\n\n\n\n\n\nArcus Education, Children’s Hospital of Philadelphia"
  },
  {
    "objectID": "session_2.html#updating-from-git",
    "href": "session_2.html#updating-from-git",
    "title": "",
    "section": "Updating From Git",
    "text": "Updating From Git\n\nI might update the exercise files!\nThis means you should save anything you will make changes to with a new name (like session_2_exercise_janedoe.qmd)\nThen if I update session_2_exercise.qmd you can get the new version and not mess up your “janedoe” version\nGo to Git and choose “Pull Branches” to get any updates\n\n\n\nOK, so let’s talk about keeping your exercise files fresh.\nIt’s possible, as we go through this series, that I realize I want to make improvements or fixes to the exercise files, and if I do that, I want you to get the up to date changes.\nBecause I might make changes, it’s important that you not make your own changes to the same files with the same names, because our changes might be in conflict. So when you work in the exercise files, you’ll see the instruction to save the file with your initials at the end. Please make sure to do that before you do anything else!\nAnd now I’ll demo how to do this in my own Posit.cloud account. I have my Posit.cloud account open, and in my case, I don’t have any files open. You might have something open from the last time you worked here, so when you click on the Git button, you might see some menu options that have to do with that particular file. You can ignore those menu options. What I want you to do is look for Pull branches. Click there."
  },
  {
    "objectID": "session_4.html",
    "href": "session_4.html",
    "title": "",
    "section": "",
    "text": "These slides available at: https://arcus.github.io/first_steps_in_r_rstudio_skills_series/session_4.html\n\nUse keyboard arrow keys to\n\nadvance ( → ) and\ngo back ( ← )\n\nType “s” to see speaker notes\nType “?” to see other keyboard shortcuts\n\n\nAs always, I’d like to encourage you to open these slides on your own browser, and this first slide helps with tips for you to use the slide deck."
  },
  {
    "objectID": "session_5.html",
    "href": "session_5.html",
    "title": "",
    "section": "",
    "text": "These slides available at: https://arcus.github.io/first_steps_in_r_rstudio_skills_series/session_5.html\n\nUse keyboard arrow keys to\n\nadvance ( → ) and\ngo back ( ← )\n\nType “s” to see speaker notes\nType “?” to see other keyboard shortcuts\n\n\nAs always, I’d like to encourage you to open these slides on your own browser, and this first slide helps with tips for you to use the slide deck."
  },
  {
    "objectID": "index_2.html",
    "href": "index_2.html",
    "title": "First Steps in R and RStudio",
    "section": "",
    "text": "Welcome to First Steps in R and RStudio!\nSkip ahead to watching the workshop recordings"
  },
  {
    "objectID": "index_2.html#about-this-workshop-series",
    "href": "index_2.html#about-this-workshop-series",
    "title": "First Steps in R and RStudio",
    "section": "About This Workshop Series",
    "text": "About This Workshop Series\nThis series is intended to be a gentle introduction to using R and RStudio for people who interact with data and want to work in the R statistical programming language. This course is geared towards beginners who are comfortable doing basic tasks with data that comes in rows and columns (for example, organizing data in Excel) but have no programming background.\nThe workshop will cover how to get started using the R statistical programming language in your work. We’ll talk about how to import data, transform data, and create data visualizations in R. To keep this workshop series short, our scope is limited, and we won’t go into details that are specific to the conduct of research, like accessing the REDCap API, using modeling and machine learning, and applying statistical tests. For that, we are planning a future Skills Series we’re going to call Next Steps in R for Research. For this workshop series, we assume you know what R and RStudio are and have some ideas about why they’re useful. If you don’t know what R or RStudio are, we suggest you view the slides and recordings from Demystifying R and RStudio, or attend the next time that two-session workshop series is offered.\nBesides the skills you’ll acquire in writing R code and using the RStudio IDE, you’ll also develop vocabulary useful for describing what you want to accomplish, and that will help you search for resources online or describe your problem to an LLM like CHOP GPT for help creating R code.\n\nPre-requisites: What you should know:\nBefore attending this series, you should be able to perform most or all the following skills. If you’re not sure you can, check out our Demystifying R and RStudio Skills Series. The slideshows, which have ample speaker notes, and/or the recordings of the talks (if available at the time you’re viewing this document) will be sufficient to help you acquire these skills. And don’t worry, we won’t quiz you!\n\nBe able to describe the difference between R and RStudio\nBe able to give one advantage for using scripts written in R for data analysis\nKnow a little about how to get access to R and RStudio at CHOP\nDescribe what makes programming “literate” (like a notebook)\nExplain the real-life consequences of irreproducible research\nName one way Quarto documents can be helpful\n\n\n\nPre-requisites: What you should do:\nBefore attending a workshop session, we suggest that you do the following. It will make your experience of the workshop series smoother. If you don’t get a chance to do this before attending a workshop, you will have time to do it during the session, but we won’t necessarily be able to stop our presentation to help you if you get stuck.\n\nCreate a free Posit.cloud account. We will use this as our training environment and you will have continued access to your code and materials after the workshop, through your account at Posit.cloud. Don’t use this for any patient or other CHOP data, though!\nIf you haven’t already, please consider joining CHOP’s R User Group. It’s not necessary for the workshops but you might find it useful or even fun.\n\nWe suggest requesting these programs be installed on your CHOP device(s):\n\nR – the language we use to clean, analyze, and visualize data\nRStudio Desktop – an IDE for writing R\nGit – version control software that will allow you to easily get the latest version of our course materials and will also be helpful for tracking changes in your own projects\nGitHub Desktop – a helper, or “client” software that makes working with Git easier\n\nEven though all of these software are free, you’ll need a Cost Center (or grant fund) to add to your request. Get that from your manager, administrative staff, or other leadership within your area. There will be no charge, but DTS uses this information for tracking resource utilization.\nYou’ll also need the MAC address of the device you need the software installed to.\nHaving R, RStudio, Git, and GitHub installed locally on your CHOP-issued device is not the only way to work with R and RStudio, but it can be the most convenient, and will be compliant with the constraints of working with real CHOP data. You won’t want to rely on RStudio on your personal computing device or on the cloud when it comes to working with real CHOP data!\nOn the day of your workshop\nWe suggest the following for virtual webinars:\n\nIf available to you, use two monitors (or another two-screen setup such as a laptop and a tablet or two laptops). This Skills Series is hands-on, so you will want to have extra space for working on code while also looking at slides or the chat window."
  },
  {
    "objectID": "index_2.html#workshop-sessions",
    "href": "index_2.html#workshop-sessions",
    "title": "First Steps in R and RStudio",
    "section": "Workshop Sessions",
    "text": "Workshop Sessions\nMaterial in later sessions does build on work done in earlier sessions, so do watch them in order.\nRecordings:\n\nSession 1: Review and Setup\nSession 2: Projects and File Ingestion\n\nSessions 3-5 not available yet, keep an eye on this space!\n\nSession 1: Review and Setup\nWatch the trimmed video: http://youtu.be/5rsAU9e3rHg or click below (and look below the video for useful links that will allow you to do the hands-on participation!)\n\n\nUseful links to open while you watch this video:\n\nSlides at https://arcus.github.io/first_steps_in_r_rstudio_skills_series/session_1.html (you’ll want to have this open, there are useful links to click!)\nSign up for Cloud Free at https://posit.cloud(this is where you’ll do the exercises)\nURL for the exercise files (you’ll use at Posit.cloud): https://github.com/arcus/first_steps_in_r_rstudio_exercises\n\nSession 1 Content:\n\nQuick review of R and RStudio\nR Markdown and Quarto: methods for “literate statistical programming”\nPosit.cloud: our environment for this course\nGit and GitHub: Out of scope but very useful!\nGetting R and RStudio at CHOP\n\nSession 1 Goals:\n\nUse Source and Visual views in RStudio to learn about markdown\nCreate a new code chunk in a Quarto document\nRun a code chunk in a Quarto document\n\n\n\n\nSession 2: Projects and File Ingestion\nWatch the trimmed video: &lt;. &gt; or click below (and look below the video for useful links that will allow you to do the hands-on participation!)\n\n\nUseful links to open while you watch this video:\n\nSlides at https://arcus.github.io/first_steps_in_r_rstudio_skills_series/session_2.html (you’ll want to have this open, there are useful links to click!)\nSign up for Cloud Free at https://posit.cloud(this is where you’ll do the exercises)\nURL for the exercise files (you’ll use at Posit.cloud): https://github.com/arcus/first_steps_in_r_rstudio_exercises\n\nSession 2 Content:\n\nFile systems can be challenging to navigate\nProjects in RStudio\nInstalling and loading packages\nTabular data ingestion from .csv files\n\nSession 2 Goals:\n\nBe able to explain when to use install.packages() and when to use library()\nIngest data from a .csv into a data frame and examine it\nRender a quarto document to an output format (html)\n\nSlides: https://arcus.github.io/first_steps_in_r_rstudio_skills_series/session_2.html\nSession 3: Exploring Data Visually, Using ggplot2\n\nggplot2 syntax\nMapping Aesthetics\nSetting Visuals\nColor Palettes\n\nGoals:\n\nDescribe what an “aesthetic mapping” is in ggplot2\nCreate a simple ggplot2 data visualization\nAdd a label (like a title or an x-axis label) to a plot in ggplot2\n\nSlides: https://arcus.github.io/first_steps_in_r_rstudio_skills_series/session_3.html\nSession 4: Selecting Data Using dplyr\n\nSelecting columns\nFiltering rows\nCreating new columns\n\nGoals:\n\nDescribe what a “factor” variable is in R and why it’s important to use it\nUse “select” and “filter” to subset data\nUse “group by” and “summarize” to get group-level statistics\n\nSlides: https://arcus.github.io/first_steps_in_r_rstudio_skills_series/session_4.html\nSession 5: Putting it All Together: Communicating\n\nCreate a new document\nExplore a question\nCreate a visualization\nNext steps for using R/RStudio\n\nGoals:\n\nUse text and markdown to describe analysis tasks in an organized, attractive document\nFind useful examples from previous code and apply them to current work\nWork with error messages and help files successfully"
  },
  {
    "objectID": "index_2.html#license",
    "href": "index_2.html#license",
    "title": "First Steps in R and RStudio",
    "section": "License",
    "text": "License\nAll of the material in the First Steps in R and RStudio GitHub repository is copyrighted under the Creative Commons BY-SA 4.0 copyright to make the material easy to reuse. We encourage you to reuse it and adapt it for your own teaching as you like!"
  }
]