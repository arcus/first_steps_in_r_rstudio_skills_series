[
  {
    "objectID": "session_2.html#welcome",
    "href": "session_2.html#welcome",
    "title": "",
    "section": "Welcome",
    "text": "Welcome\nThese slides available at: https://arcus.github.io/demystifying_r_rstudio_skills_series/session_2.html\n\nUse keyboard arrow keys to\n\nadvance ( → ) and\ngo back ( ← )\n\nType “s” to see speaker notes\nType “?” to see other keyboard shortcuts\n\n\nAs we prepare to get started, I’d like to encourage you to open these slides on your own browser, so you will have them available to refer to later. There are also a number of links you may want to click on. I’ll copy paste that URL, where the slide deck is located, into chat, so everyone has it.\nThis first slide is just to help you navigate this slide deck if you look at these slides on your own! And yes, there are ample speaker notes, so if you missed something I said, chances are it’s going to be in the speaker notes of the slide."
  },
  {
    "objectID": "session_2.html#about-arcus-your-presenter",
    "href": "session_2.html#about-arcus-your-presenter",
    "title": "",
    "section": "About Arcus / Your Presenter",
    "text": "About Arcus / Your Presenter\n\n\nArcus is an initiative by the Research Institute aimed at promoting data discovery and reuse and increasing research reproducibility.\n\nArcus app: https://arcus.chop.edu\nArcus Sharepoint site: https://chop365.sharepoint.com/sites/Arcus\n\nAmong the many teams in Arcus, I represent Arcus Education!\n\n\n\n\n\nThanks again for joining us, and welcome to our session today! I’d like to begin by briefly introducing myself and introducing Arcus, for those of you who may not be familiar with us. My name is ______ [add pronouns here if you want], and I’ll be leading today’s session.\nI’ve already talked a bit about Arcus in the first session of this Skills Series, so I’ll just skip most of that this time and simply say that Arcus is an initiative by the Research Institute aimed at promoting data discovery and reuse and increasing research reproducibility.\nYou can find out more by checking out these links.\nAnd finally, a little more about me: I work in Arcus Education. Our role is to support CHOP scientists by helping researchers acquire data science skills. That’s why we have Skills Series like this one!"
  },
  {
    "objectID": "session_2.html#arcus-education",
    "href": "session_2.html#arcus-education",
    "title": "",
    "section": "Arcus Education",
    "text": "Arcus Education\n\n\n\n\nArcus education provides data science training to researchers …\n(and often this is useful to non-researchers too!).\nhttps://arcus.chop.edu/i-want-to/arcus-education\nEmail us! arcus-education@chop.edu\n\n\nThe Arcus Education team does lots of different kinds of education. Again, we talked about this in our first session, so I’m going to skip most of this.\nPlease check out that education page that is linked here to find out more about some of our services. You can also email us at arcus dash education at chop dot edu."
  },
  {
    "objectID": "session_2.html#first-steps-in-r-and-rstudio",
    "href": "session_2.html#first-steps-in-r-and-rstudio",
    "title": "",
    "section": "First Steps in R and RStudio",
    "text": "First Steps in R and RStudio\nArcus Education provides “Skills Series” for the entire CHOP community.\nThis Skills Series is a 5-session series aimed at helping you take your first steps in R and RStudio!\n\nSession 1: Review and Setup\nSession 2: Projects and File Ingestion\nSession 3: Exploring Data Visually, Using ggplot2\nSession 4: Selecting Data Using dplyr\nSession 5: Putting it All Together: Communicating\n\n\nJust a reminder about what you’re in today.\nIn this series, we’re going to take five sessions to help you make your first steps in R and RStudio. If you’ve never coded in R or used the RStudio software, and you want some support to get started, this is a great workshop series for you.\nAfter you finish these five sessions, you’ll have a little experience with R and RStudio. The goal is to help you feel more confident and have enough experience to be able to keep learning specialized skills titrated to your needs. If we were to compare learning R to learning to drive, this series is the equivalent of having you drive around a parking lot, under supervision, in a controlled situation."
  },
  {
    "objectID": "session_2.html#session-2-itinerary",
    "href": "session_2.html#session-2-itinerary",
    "title": "",
    "section": "Session 2 Itinerary",
    "text": "Session 2 Itinerary\nProjects and File Ingestion\n\nFile systems can be challenging to navigate\nProjects in RStudio\nInstalling and loading packages\nTabular data ingestion from .csv files\n\nGoals:\n\nCreate project and install package (unless you did Session 1)\nBe able to explain when to use install.packages() and when to use library()\nIngest data from a .csv and look at it\n\n\nSo let’s get started with this second session. In this session we’re going to hit the ground running. You need to already have a Posit.cloud account, so if you don’t have that, it is absolutely critical that you pay attention in the next slide.\nWe’re going to have you go into your Posit account and start a new project. We’ll explain why projects are so useful, and we’ll get you working with your first few lines of actual R code!"
  },
  {
    "objectID": "session_2.html#posit.cloud-for-learning",
    "href": "session_2.html#posit.cloud-for-learning",
    "title": "",
    "section": "Posit.Cloud (for learning)",
    "text": "Posit.Cloud (for learning)\nhttps://posit.cloud is a great place for learning or practice with public (NOT CHOP!) datasets.\nPlease open your First Steps in R and RStudio Exercises project in Posit.cloud now.\nIf you did not already set up a Posit.cloud account with the exercise files in the first session of this Series, please do the following, now:\n\nMake sure you have a free account at https://posit.cloud\nCreate a new project that uses our exercise files\n\n\n\n\n−+\n03:00\n\n\n\n\nPosit.cloud is an online, cloud based service provided by Posit, the company that makes the RStudio software. It’s easy reliable for learners. As teachers, we can concentrate on our learners really acquiring the skills around R and RStudio, without being bogged down by weird individual installation differences from computer to computer.\nUsing Posit.cloud is pretty much necessary for your continued participation in this workshop, because we can’t help you troubleshoot details of your particular computer and its installation details. Even if you have R and RStudio installed on your local computer, I really hope you’ll try out Posit dot cloud, because things will be smoother for you and for us this way. If you set things up in the first session of the Series, please log in to Posit.cloud and open the project with the Skills Series exercise files. If you didn’t set things up yet, please do that now. I’ll copy and paste those two bullet points into chat so you have those. [Do it].\nLet’s take just a few minutes to make sure we’re all set up. I’ll give folks a few minutes to do that!"
  },
  {
    "objectID": "session_2.html#where-are-your-files",
    "href": "session_2.html#where-are-your-files",
    "title": "",
    "section": "Where are your files?",
    "text": "Where are your files?\n\nKnowing where your files are can be tricky\nRStudio / Posit.cloud “Projects” can help\nProjects are directories that hold analysis scripts, data, and project info close together\n\n\nOK, before we get started working with our exercise files, let’s talk about some common struggles. One of the dirty little secrets of learning data analysis is that one of the biggest challenges some people have, especially if they’ve never worked in the command line, is finding their own files. They know they downloaded it, or they double clicked on a .csv file attachment in Outlook and they’re not sure where that file lives.\nWorking in Projects is a great way to help keep your data really close to your analysis scripts, so it’s a lot easier to find your data. Projects are directories that RStudio creates in which your data and your analysis, as well as some information about your project, are all stored together in a single folder. And you can have 2, or three, or a dozen different Projects, all kept separate from each other, to keep from mixing up your files.\nIn Posit.cloud, Projects are the way you have to organize your work, so it’s really easy to use Projects there. On your own computer, you’re not forced to use Projects, but you should use them. If you’re working in your own computer, you have to have the discipline to not just make new R scripts right away, but rather, first make a new Project to hold related files together, and then within that project make your analysis scripts."
  },
  {
    "objectID": "session_2.html#file-paths-the-where",
    "href": "session_2.html#file-paths-the-where",
    "title": "",
    "section": "File Paths – the “where”",
    "text": "File Paths – the “where”\n\nA few tips:\n\n/ means “go into a child directory” (\\ in Windows)\n/ as the first symbol means “start at the root”\n. means “this directory”\n.. means “the parent directory of this directory”\n~ means “my home directory”\n\nRelative path – “directions from here”\nAbsolute path – “directions from anywhere”\nWorking directory – R’s “starting place”\n\nGreat module on Directories and File Paths\n\nIf you have already worked in the command line, you might not have any problem finding files on your computer, but some of you might find it tricky.\nWe’re going to offer a brief handful of tips for understanding file paths, and this is true for all files, not just related to R or data analysis.\nFirst off, Windows is a weird operating system and is unlike the rest of the world’s major operating systems, like Unix, Linux, and MacOS, in how it does file paths. Most file paths use forward slashes, not backward slashes. A slash means you’re going into a new subdirectory or subfolder.\nAnd a few other special symbols are useful to know. A single dot means “this directory”, two dots means “go into the directory that holds the one I’m in now”, and a tilde means “my home directory”, which will differ from user to user on a shared system like a server.\nIn your analysis scripts, you’ll often have to decide if you want to use what’s called a “relative path” or an “absolute path” to tell R where a file is. There are advantages and disadvantages to both, but if we’re using Projects, we can usually use relative paths more easily.\nA relative path assumes that we’re starting in the same place and have common knowledge. So if I was at home, describing where my keyboard is, I’d say “go upstairs to the second floor, and then on the street side of the house, there’s my office. Then go inside and you’ll find the keyboard on my desk.” That makes sense if you’re also inside my house.\nBut if you’re NOT in my house, you’re in your house, which doesn’t have a second floor, you would say, “hey, your directions to go to the second floor don’t make sense. Path not found.” A relative path doesn’t work when we’re not starting in the same place.\nAnd that brings us to the idea of a working directory. Any time you are working in R, it’s running with a starting point, its working directory. The great thing about RStudio Projects is that when you open a project, R automatically makes the working directory that project directory, so relative paths are easy. Everyone has the same starting point, so to speak.\nAn absolute path is a path that includes enough detail so that the location is clear from anywhere in the computer. For example, in the physical world, an absolute path would be if I said, “go to 123 Main Street, Philadelphia, go inside, go to the second floor, go to the street side, open the door, go inside, and look on the desk. The keyboard is there.” Now, the benefit is that it’s very precise. But the downside is that it’s lengthy and annoying to construct sometimes, and if you move the whole folder of your project, you’ve changed addresses, essentially, and messed things up.\nIf you want to learn more, we’ve created a module all about file paths that you might find useful, so check that out if you’re interested!"
  },
  {
    "objectID": "session_2.html#advantages-to-using-projects",
    "href": "session_2.html#advantages-to-using-projects",
    "title": "",
    "section": "Advantages to using Projects",
    "text": "Advantages to using Projects\n\nKeeping track of your files gets easier\nProjects allow you to keep your various efforts separated\nMultiple sessions of RStudio open on your computer that don’t interfere with each other.\n\n\nLet’s sum up the major advantages of using Projects.\nIf you’re like me, you might work on several different analysis projects at a time. And if you just have one RStudio window open, which means one R session, you can accidentally trip over yourself. Let’s say you have two different R scripts, each of which creates the object my_data, or cleaned_data, or a similar kind of generic name. Maybe you’re doing work for two different research projects. What happens when you go back and forth between these files? You end up clobbering yourself and saving the audiology data in the nephrology project or something like that.\nIt’s much cleaner and safer to work using Projects, in which all the related analysis and data files for a given effort are stored in the same directory. RStudio can also dedicate a session per project if you want to have several projects open at a time. For example, on my computer, I might have two or three copies of RStudio open at a time, each one in a separate Project, and each one is completely isolated from the other. I can go back and forth and I can have a nephrology dataset I call “my_data” and an audiology dataset I call “my_data”, and RStudio will keep them totally separate, because they’re in different Projects."
  },
  {
    "objectID": "session_2.html#creating-a-project-in-posit",
    "href": "session_2.html#creating-a-project-in-posit",
    "title": "",
    "section": "Creating a Project in Posit",
    "text": "Creating a Project in Posit\nPlease go to http://posit.cloud and make a free account and create a new project from the Git repository at https://github.com/arcus/first_steps_r_rstudio_exercises\n\n\n\n\n−+\n02:00\n\n\n\n\nOK, we’re going to start a new project in Posit.cloud. This is your first hands-on work in this workshop, so get ready!\nYou’re going to find the “New Project” button in the upper right. It’s big and dark blue and it stands out a lot. It’s not quite so visible when you have RStudio on your own computer, just as a heads-up.\nYou’ll see there are a few options for a new Project. You want to choose “New Project from Git Repository.”\nWhat that means is that you’re going to copy some files from an existing location that my team uses to store the exercise files, also known as a repository. In the future, if we change anything to those files in the repository, you can update your copy, too, to stay up to date.\nIt will ask you for the URL of the repository. That’s where you want to type the URL shown in the slide: https://github.com/arcus/first_steps_r_rstudio_exercises. I’ll copy and paste that into the chat so you have it.\nLater on, you can create other kinds of Projects in your Posit.cloud account using the other options that show up when you click New Project, so that you get a feel for how the other project types work. But I’ll let you do that in your own time.\nFor now, I want to give you a couple of minutes to do these steps. Please do this now! When you’re done creating that new project, give me a nice thumbs up in the chat. [Add “I’ve created my new project from the Git repository” comment to chat]\nSo I’ll share my Posit.cloud window with you now and I’ll do the same thing, in case anyone is stuck. I’m going to log in to my posit.cloud account, and click the New Project button [NOTE: before the session, make sure you have space to make a new project!]. I’ll choose the “from a Git Repo” option.\nNow I’ll copy and paste in the URL of the repository my team maintains, like this.\nAnd then it will think for a couple of minutes and then create a new project and include some files for me that were in the repo. And that’s that!"
  },
  {
    "objectID": "session_2.html#importing-data",
    "href": "session_2.html#importing-data",
    "title": "",
    "section": "Importing Data",
    "text": "Importing Data\n\nImporting / Ingesting data is the first step to analyzing it!\nYou can use “base R” (the factory settings) to ingest data\nBut we suggest using an add-on package called tidyverse instead.\n\n\nGreat, so you have a Project in Posit.cloud. And in the exercise files in that project, we’ve supplied you with some data, some real research data that’s publicly available, to get you started. The first step in the data analysis pipeline is to bring in, import, or ingest the data into your R session.\nOne very important thing to note is that you will need to install R packages into your copy of this project. At first we really wanted to have all your packages pre-loaded, but now we see the wisdom of teaching you how to install and load packages right away. It may take a few more minutes of our time today, but this is a crucial skill that you definitely need to develop. We’ll make sure to slow down and ensure that you get the packages installed that you need in order to do this work!"
  },
  {
    "objectID": "session_2.html#csv",
    "href": "session_2.html#csv",
    "title": "",
    "section": "CSV",
    "text": "CSV\n\n\nWe’re supplying you with .csv data.\n\n\n\n\nWe’re giving you some CSV data. CSV stands for comma-separated values.\nA .csv file is a plain text file, which means you can open it in a text editor and look at it. Now, this isn’t how we normally open CSVs. Usually we open them not in a text editor, but rather in Microsoft Excel or another spreadsheet program. In case you’ve never seen the plain text version of a CSV, here is an example of what raw csv data looks like when we open it in a text editor. See how it’s literally made up of values, separated by commas? That’s why it’s a comma separated values file!\nHere we have a .csv file with human subject IDs, information about the intervention they received, and some clinical information about them.\nThis data structure is called rectangular or “tabular” because it falls into rows and columns, often called a table, where each row has the same number of columns, and each columns has the same number of rows.\nAlso note that this particular .csv file has a header row that instead of data, has a name for each column. .csv files often have such a header row and unless we specify otherwise, when we import this data, R assumes the first line is a header row. Not all .csv files have headers, however, so be aware that you might run across these at some point."
  },
  {
    "objectID": "session_2.html#tidyverse",
    "href": "session_2.html#tidyverse",
    "title": "",
    "section": "Tidyverse",
    "text": "Tidyverse\n\n\n\nA consistent way to organize data\nHuman readable, concise, consistent code\nBuild pipelines from atomic data analysis steps\n\n\n\n\n\nTo import our CSV data, we need some additional data analysis tools. In this course, we will be leveraging the Tidyverse.\nThe Tidyverse is a set of tools that a lot of people use for working with rectangular, or tabular data, the kind of data that comes with rows and columns. Many people, myself included, think that using the tidyverse is the best way to work with tabular data.\nWe won’t explain what tidy data is right now, but the idea of working in a tidy way with tidy data is obviously very central to this group of tools!"
  },
  {
    "objectID": "session_2.html#installing-a-package",
    "href": "session_2.html#installing-a-package",
    "title": "",
    "section": "Installing a Package",
    "text": "Installing a Package\nIn your R console (the lower left pane in RStudio), enter the following:\ninstall.packages(\"tidyverse\")\n\n\n\n−+\n01:00\n\n\n\n\nIf you were in our first session, you may have already done this. You’re welcome to do it again if you like!\nI’ll do this first so you can see what it looks like, and then I’ll ask you to do it. In your Posit.Cloud or RStudio Project, the console is one place you can type code. It’s in the lower left pane of your window, and if it’s really small, collapsed into one small line, you can click on it to make it bigger. I’m going to go into my Posit.cloud window now and type install.packages(\"tidyverse\"), being really careful to use the right syntax, with the quotation marks and the right capitalization. [Demonstrate in Posit.Cloud window].\nI’ll give you all a minute to do that now! You might get a lot of output in your console window, and that’s usually just fine. You’ll know it installed properly if …… [Go back to slides]"
  },
  {
    "objectID": "session_2.html#installing-and-loading-packages",
    "href": "session_2.html#installing-and-loading-packages",
    "title": "",
    "section": "Installing and Loading Packages",
    "text": "Installing and Loading Packages\n\n\n\n\ninstall.packages(\"tidyverse\") downloads the package (do once)\nlibrary(tidyverse) loads the package (do once per script or session)\n\n\nThe tidyverse is package (a collection of functions, data, and help documentation) that we can use to extend the innate functionality of R, which is often referred to as “base R”. In fact, tidyverse is special because it a package of packages – it’s a group of packages that work together to do a number of tasks related to importing, reshaping, visualizing, and analyzing data.\nYou can download and install a package with the command install.packages. For example, to install the tidyverse package, you would use install.packages(\"tidyverse\"). Each package you want to use needs to be installed only once on each computer for any given version of that package.\nMake sure you include the quotes when you use install.packages. When to use quotes is a tricky topic, but for now, keep in mind that you will always need to put quotes around the name of a package whenever using install.packages().\nAfter you’ve installed the package, in order to use the functions that it provides, you also need to load the package into the computer’s memory. This is done with the command library. And you want to use library every single time you start a new analysis that will use that functionality."
  },
  {
    "objectID": "session_2.html#read_csv",
    "href": "session_2.html#read_csv",
    "title": "",
    "section": "read_csv()",
    "text": "read_csv()\n\n\n\n\n\n\n\n\n\n\n\nWe can import CSV files using the read_csv() function.\nLet’s go over how you use the read_csv function to read a CSV file into a data frame object. A data frame is a type of object in R that holds tabular data: data with rows and columns."
  },
  {
    "objectID": "session_2.html#functions",
    "href": "session_2.html#functions",
    "title": "",
    "section": "Functions",
    "text": "Functions\n\n\nThis code construct is exceedingly common in R, and it’s a good moment to explain functions.\nread_csv() is a function. Functions are defined in packages. We loaded the tidyverse package to be able to use the read_csv function.\nYou may be familiar with functions from math class or perhaps also from formulas in Excel. A function takes an input, say an ‘x’ value, and returns an output, say a ‘y’ value. Functions in computer programming also take inputs and return outputs. But the inputs and outputs here are the objects that exist within the context of a programming language.\nFor read_csv, the input is the file name of a CSV file; and the output is a data frame with the contents of the file."
  },
  {
    "objectID": "session_2.html#functions-1",
    "href": "session_2.html#functions-1",
    "title": "",
    "section": "Functions",
    "text": "Functions\n\n\nIn the snippet of code that reads in a csv to create a data frame, we have a function with an argument that creates an object.\nThe input that goes into a function is called an argument. The argument to a function gets put in parentheses.\nA function can have zero, one, or many arguments. If there is more than one argument, we use commas to separate them."
  },
  {
    "objectID": "session_2.html#functions-2",
    "href": "session_2.html#functions-2",
    "title": "",
    "section": "Functions",
    "text": "Functions\n\n\nThe output of the read_csv function is a data frame object. You will usually want to capture that data frame inside of a named object so you can use it as the input for other functions, for example to summarize or visualize your data."
  },
  {
    "objectID": "session_2.html#functions-3",
    "href": "session_2.html#functions-3",
    "title": "",
    "section": "Functions",
    "text": "Functions\n\n\nTo put the output of the read_csv function into a named object, we use the assignment operator.\nThe assignment operator is a less than symbol followed by a dash and resembles an arrow pointing left. Some people like to pronounce the arrow with the word “gets.”"
  },
  {
    "objectID": "session_2.html#read_csv-1",
    "href": "session_2.html#read_csv-1",
    "title": "",
    "section": "read_csv()",
    "text": "read_csv()\n\n\nLet’s put these pieces together to load our covid data set.\nConsider this line of code. We could speak aloud the line of code above saying “covid underscore testing gets read underscore csv of covid underscore testing dot csv”, or we could gloss over the underscores and just say “covid testing” and “read csv”. When we talk with others about R, this is often what we do, so just be aware that you sometimes have to intuit underscores when someone is reading aloud or talking through a code issue.\nYou might notice that one of our “covid testing” objects is put in quotes and the other one isn’t.\nTo be honest, quotes in R can be super confusing. A couple of rules are:\n\nNames of objects such as data frames don’t get quotes.\nLiteral file names are always put in quotes.\nWhen you’re referring to a string value, like “abc123” or “jones”, you have to use quotes.\nNames of packages, when you’re installing especially, use quotes\nBut in library, putting the package name in quotes is optional!\n\nSometimes, either quoting or not quoting works. This is one of the things where you will get a good sense but not until after some trial and error. If a line of code you’re working on doesn’t seem to be working as you expect, sometimes adding or removing quotes can be a good place to start when trying to figure it out."
  },
  {
    "objectID": "session_2.html#qa-was-this-effective",
    "href": "session_2.html#qa-was-this-effective",
    "title": "",
    "section": "Q&A / Was This Effective?",
    "text": "Q&A / Was This Effective?\nIn our team, we like to measure our effectiveness.\nGoals:\n\nBe able to describe the difference between R and RStudio\nHave a Posit.cloud account ready to go\nHave some next steps in mind for your CHOP device\n\n\nNow, this is not the final slide, but we’re a group that likes to measure our effectiveness and make changes based on what we learn. So before we do questions and answers, we like to make sure to give our learners a poll to see if we made a good use of your time. We’re going to ask if we were effective in reaching our goals today, and those goals are on the screen in order to help you answer that question. Once you answer that poll, feel free to type a question into chat or come off mute and ask to clarify anything I can explain a bit better. I’ll stop our session of Q&A with about 5 minutes to spare because I do have just a couple of finishing slides I want to show.\n\n\n\n\n\nArcus Education, Children’s Hospital of Philadelphia"
  },
  {
    "objectID": "session_1.html#welcome",
    "href": "session_1.html#welcome",
    "title": "",
    "section": "Welcome",
    "text": "Welcome\nThese slides available at: https://arcus.github.io/first_steps_in_r_rstudio_skills_series/session_1.html\n\nUse keyboard arrow keys to\n\nadvance ( → ) and\ngo back ( ← )\n\nType “s” to see speaker notes\nType “?” to see other keyboard shortcuts\n\n\nAs we prepare to get started, I’d like to encourage you to open these slides on your own browser, so you will have them available to refer to later. There are also a number of links you may want to click on. I’ll copy paste that URL, where the slide deck is located, into chat, so everyone has it.\nThis first slide is just to help you navigate this slide deck if you look at these slides on your own! And yes, there are ample speaker notes, so if you missed something I said, chances are it’s going to be in the speaker notes of the slide."
  },
  {
    "objectID": "session_1.html#about-arcus-your-presenter",
    "href": "session_1.html#about-arcus-your-presenter",
    "title": "",
    "section": "About Arcus / Your Presenter",
    "text": "About Arcus / Your Presenter\n\n\nArcus is an initiative by the Research Institute aimed at promoting data discovery and reuse and increasing research reproducibility.\n\nArcus app: https://arcus.chop.edu\nArcus Sharepoint site: https://chop365.sharepoint.com/sites/Arcus\n\nAmong the many teams in Arcus, I represent Arcus Education!\n\n\n\n\n\nThanks again for joining us, and welcome to our session today! I’d like to begin by briefly introducing myself and introducing Arcus, for those of you who may not be familiar with us. My name is ______ [add pronouns here if you want], and I’ll be leading today’s session.\nArcus is an initiative by the Research Institute aimed at promoting data discovery and reuse and increasing research reproducibility throughout the research lifecycle, as you can see in the graphic on the right. [Pause, give folks a few secs to peruse the image].\nChanging the paradigm of research is a big undertaking, and it requires a broad approach.\nWe aim to improve data reuse and research reproducibility at CHOP through technology, including Arcus labs and applied data science, through the use of data archiving and cataloging, and by way of education.\nYou can find out more by checking out the Arcus application website (please note, there are some pre-requisites to using the app, such as human subjects protection training and signing our terms of use). I’ve added just a very small screenshot of part of what the Arcus application website looks like on the slide on the left side. [Pause].\nYou can also, without any prerequisites, look at our Arcus Sharepoint site, which has a calendar of events and lots more information about Arcus.\nAnd finally, a little more about me: I work in Arcus Education. Our role is to support CHOP scientists by helping researchers acquire data science skills. That’s why we have Skills Series like this one!"
  },
  {
    "objectID": "session_1.html#arcus-education",
    "href": "session_1.html#arcus-education",
    "title": "",
    "section": "Arcus Education",
    "text": "Arcus Education\n\n\n\n\nArcus education provides data science training to researchers …\n(and often this is useful to non-researchers too!).\nhttps://arcus.chop.edu/i-want-to/arcus-education\nEmail us! arcus-education@chop.edu\n\n\nThe Arcus Education team does lots of different kinds of education. We work one on one with researchers in office hours, we write how-to guides to help people understand how to use Arcus tools, we create asynchronous modules that people can use to acquire skills in their own time, and we do synchronous events like this one.\nSometimes we focus on Arcus customers, on researchers at CHOP who are doing research within the Arcus data sharing paradigm, and sometimes we broaden our reach to larger audiences, because we know that helping everyone acquire data science skills will help improve the conduct of science at CHOP and help build a data-driven workforce.\nPlease check out that education page and find out more about some of our services. You can see I’ve added a screenshot of that page to the slide here on the left side. You can also email us at arcus dash education at chop dot edu."
  },
  {
    "objectID": "session_1.html#first-steps-in-r-and-rstudio",
    "href": "session_1.html#first-steps-in-r-and-rstudio",
    "title": "",
    "section": "First Steps in R and RStudio",
    "text": "First Steps in R and RStudio\nArcus Education provides “Skills Series” for the entire CHOP community.\nThis Skills Series is a 5-session series aimed at helping you take your first steps in R and RStudio!\n\nSession 1: Review and Setup\nSession 2: Projects and File Ingestion\nSession 3: Exploring Data Visually, Using ggplot2\nSession 4: Selecting Data Using dplyr\nSession 5: Putting it All Together: Communicating Findings\n\n\nOne of our methods in Education is the Skills Series, and that’s what you’re in today.\nIn this series, we’re going to take five sessions to help you make your first steps in R and RStudio. If you’ve never coded in R or used the RStudio software, and you want some support to get started, this is a great workshop series for you.\nAfter you finish these five sessions, you’ll have a little experience with R and RStudio, and you’ll have done things like ingest data, made data visualizations, and subset specific data you want to study more closely."
  },
  {
    "objectID": "session_1.html#session-1-itinerary",
    "href": "session_1.html#session-1-itinerary",
    "title": "",
    "section": "Session 1 Itinerary",
    "text": "Session 1 Itinerary\nReview and Setup (see also: Demystifying R and RStudio)\n\nQuick review of R, RStudio, and “literate statistical programming”\nPosit.cloud: our environment for this course\nGit and GitHub: Out of scope but very useful!\nYour first Quarto Document\nGetting R and RStudio at CHOP\n\nGoals:\n\nUse Source and Visual views in RStudio to experiment with how markdown gets rendered into attractive and descriptive text\nCreate a new code chunk in a Quarto document\nRun a code chunk in a Quarto document\n\n\nSo let’s get started with this first session. In this session we’re going to very rapidly review the basics about what R and RStudio are, along with some basics about literate statistical programming, Quarto, and Posit.cloud. Those were all the subjects of a previous Skills Series entitled “Demystifying R and RStudio”, so if today feels too fast, you can always go back and review that material.\nWe’ll also quickly describe what Git and GitHub provide, and give you some tips for getting R and RStudio at CHOP.\nOur goals for today are three-fold.\nBy the end of the session I want you to use source and visual mode in RStudio to work with markdown, I want you to create a new code chunk in Quarto, and I want you to run a code chunk in Quarto. And don’t worry if you don’t know what any of that means! We’ll get there together."
  },
  {
    "objectID": "session_1.html#r-vs-rstudio",
    "href": "session_1.html#r-vs-rstudio",
    "title": "",
    "section": "R Vs RStudio",
    "text": "R Vs RStudio\n\n\n\n\n\n\n\n\nR Programming language for data analysis\n\nRStudio Integrated development environment (IDE)\n\n\nLet’s begin by distinguishing between R and RStudio.\nThe first logo you see here is for R. R is a statistical programming language that’s great for doing data analysis. There are several features that make R attractive for people who work with data.\n\nR was built specifically for statistical data analysis, so it’s got a friendly and focused user community and lots of great online resources for learning.\nR is open source, which means that it is “free” in two ways – in the meaning of having no cost and also in terms of using it freely, that is, without intellectual property concerns or licensing restrictions.\nR makes it possible to work with data and build scripts that do lots of things, from ingesting data to building data visualizations and lots of other things along the way.\n\nSo that’s R, it’s a language with a lot of benefits.\nThen, there’s RStudio. RStudio was the original name of a company as well as the name of a piece of software the company makes. A couple of years ago, the company changed its name from RStudio to Posit, but they kept the old name on at least some of their software.\nYou can think of RStudio (the software) as a fancy text editor for writing R code. The technical term for a fancy text editor for writing code is “Integrated Development Environment”, or I-D-E.\nYou don’t have to use RStudio to write R, but it makes it a lot easier. We like to give the example of typing a manuscript in Microsoft Word. If you didn’t have Microsoft Word, you could write down your thoughts in the Notes app on your phone. But Microsoft Word has lots of add-ons, like spell-check and word count that make it much more pleasant to write a paper there, rather than in the notes app on your phone!\nOne of the things you can do in RStudio really well is write code in a particular paradigm called literate statistical programming, and that’s what we’re going to talk about next."
  },
  {
    "objectID": "session_1.html#lsp-example-quarto",
    "href": "session_1.html#lsp-example-quarto",
    "title": "",
    "section": "LSP Example (Quarto)",
    "text": "LSP Example (Quarto)\n\n\n\n\nIn Literate Statistical Programming, we not only use code, but also describe what we do in human language, with things like headers, bullet points, and other formatting to make it easier for humans to make sense of the code.\n\n\nLiterate statistical programming is computer code (that’s what makes it programming) that analyzes data (that’s what makes it statistical), and does so interlaced with detailed human language that describes what’s happening in the code (that’s what makes it literate). Here’s an example.\nHere is a snippet of a script my team wrote, and you can see that it has some description of what the code is doing, to help humans. We put in a header, to separate a section that has to do more with bringing the data in and cleaning it. Then we write a paragraph describing what we’re going to do, followed by a chunk of code.\nAfter that code executes, we’ll have some data. So we have some additional description of what we want to do, this time in the form of a bulleted list. I’m not showing you all of the code that makes that bulleted list happen, because it’s kind of long, but the code chunk with the grey background below that bulleted list is code we wrote that does all the things in that bulleted list.\nThis is what literate statistical programming looks like, and working in R and RStudio is a great way to get started working this way. This kind of document, by the way, is called a Quarto document. It includes R language but also includes text that has special formatting called “markdown”. You may have also heard the term “R Markdown”, which is practically the same thing. It’s an older term that preceded the word “Quarto”.\nI want to get you creating Quarto documents as soon as possible, so let’s transition to talking about how to get you started working with R and RStudio right away!"
  },
  {
    "objectID": "session_1.html#posit.cloud-for-learning-only",
    "href": "session_1.html#posit.cloud-for-learning-only",
    "title": "",
    "section": "Posit.Cloud (for learning only!)",
    "text": "Posit.Cloud (for learning only!)\nYou can use R and RStudio using online services like https://posit.cloud. Sign up for your free account, it’s what we’ll use for this series.\nPosit.cloud is a great place for learning or practice with public datasets, BUT is not a safe or compliant place to put your regulated data.\n\n\n\n−+\n02:00\n\n\n\n\nWhen we teach R and RStudio, it can be next to impossible to deal with everyone’s different kinds of installation issues while they’re trying to get set up and deal with IS, get issues ironed out with their computers and their access permissions, etc.\nThat’s why we have our students use Posit.cloud to learn R and RStudio. Posit.cloud is an online, cloud based service provided by Posit, the company that makes the RStudio software. It’s really good and reliable and it has a very generous free tier! It means that as teachers we can concentrate on our learners really acquiring the skills around R and RStudio, without being bogged down by the fact that some people have Macs, some have PCs, some have admin rights, some don’t, and so on. Using Posit.cloud makes things a lot easier for teachers and learners. Even if you already have R and RStudio installed locally, I’m going to request that you use Posit.cloud for this Skills Series, because we do not have the time in a webinar with this many students to help you with your particular setup.\nHOWEVER, we want to make one thing very clear! Posit.cloud is absolutely NOT an appropriate place for regulated health care data. It’s for practicing and learning using public datasets. If you’re going to use R for CHOP data, you should start the process of getting R and RStudio installed on your CHOP device so that you can transfer those skills to real-life work right away. If you want to learn more about that, there are slides about that in the Demystifying R and RStudio Skills Series that will help you.\nFor now, please, if you already have a Posit account, please log in to it. If you don’t have a Posit account, please go to https://posit.cloud and create a free account. When you have your Posit account created, please give us a thumbs up on the comment in the chat, so I can measure progress. I’ll give you three minutes to start and we’ll see where we stand. [Click the timer, and copy/paste the comment “I have a Posit.cloud account and I’m logged in there!” into chat]."
  },
  {
    "objectID": "session_1.html#git-and-github-out-of-scope",
    "href": "session_1.html#git-and-github-out-of-scope",
    "title": "",
    "section": "Git and GitHub: Out of scope",
    "text": "Git and GitHub: Out of scope\n… but very useful version control software.\nVersion control allows you to track, for text-based files:\n\nWhat changed (the file name, the line numbers, the actual text)\nWhen (date and time)\nBy whom (username / ID)\nWhy (the person changing will add a message)\n\n(And that means no more analysis_final.R, analysis_final_with_changes.R, analysis_final_final_final_please_why.R)\n\nGit and GitHub are complex and very useful software. We could do a skills series, or in fact several skills series, just on these! If anyone uses them for work and wants to let us know how often they use it or what they use it for, drop a message in chat. I’m curious to see how other people use version control at CHOP!\nVersion control software allows you to record changes to text-based files, including what changed in the file or files, when the change was made, who made the change, and why. Much like the relationship between R and RStudio, Git is the original software and GitHub was built to make using Git easier, and helpful but not necessary.\nWe won’t go into all the details about how to use these software packages, but we use them daily in my team including for managing the files for these workshops. When we start hands-on coding, you’ll be hearing me mention GitHub. You’ll get the exercise files from there to work with. If there’s one thing I hope you remember about Git and GitHub, it’s that they are very useful, and if you find them a real pain in the neck at first, hang in there, because they really truly are worth the effort to learn.\nAnd the reason I’m bringing this up will become evident in the next couple of slides. I’m going to recommend that if you get R and RStudio installed that you also get Git and GitHub Desktop installed on your CHOP computer as well. Let’s briefly talk about getting things installed at CHOP."
  },
  {
    "objectID": "session_1.html#working-with-r-at-chop",
    "href": "session_1.html#working-with-r-at-chop",
    "title": "",
    "section": "Working with R at CHOP",
    "text": "Working with R at CHOP\n\nWe work with regulated data\nIRB protocols and other regulations might override what I say here!\nYou can work with R and RStudio on a CHOP device\n\nYou will probably have to request an install via a service ticket\nYou’ll need a cost center / grant / project number (even though there’s no cost)\nYes, this software has been used at CHOP before\nYou’ll need to give a reason (“I need to analyze data for my job…”)\nYou’ll need to provide the MAC address of your computer\n\n\n\nFirst, a few caveats to keep in mind. At CHOP, we work with sensitive data, whether that’s health care data, research data, or trade secrets about our enterprise. We want to be careful. You will almost certainly need to put in a ticket to get the right software installed on your CHOP device. At this point, if you’re not already following along in the slides, I’m going to really encourage you to grab this slide link because this slide and the next will have important information that will be useful for you when you decide to work with R and RStudio. I will also point out that I do not work for DTS and I cannot approve or install software for you… you have to go through the formal channels here and I don’t have any shortcuts!\nEven though all of these software are free, you’ll need a Cost Center (or grant fund) to add to your request. Get that from your manager, administrative staff, or other leadership within your area. There will be no charge, but DTS uses this information for tracking resource utilization. You’ll be asked if this is software that’s already in use at CHOP – it certainly is. You’ll be asked to provide a justification, and that’s usually that you need this to do data analysis for your job. And finally, you’ll have to provide information about your workstation, including the MAC address of your computer."
  },
  {
    "objectID": "session_1.html#what-to-get-installed",
    "href": "session_1.html#what-to-get-installed",
    "title": "",
    "section": "What To Get Installed",
    "text": "What To Get Installed\nWhat I recommend you install / get installed on your own CHOP device:\n\nR – the language we use to clean, analyze, and visualize data\nRStudio Desktop – an IDE for writing R\nGit – version control software that will allow you to easily get the latest version of our course materials and will also be helpful for tracking changes in your own projects\nGitHub Desktop – a helper, or “client” software that makes working with Git easier\n\n\nWe’ve already talked about all of these products. In addition to R and RStudio, I also highly recommend getting Git and GitHub Desktop installed as well. They work really well with RStudio, and even if you’re not ready to work with version control software now, you might want to work with these programs in the future, so it can be helpful to have everything installed all at once. Each of these links can take you to more information about installing these programs, which can be helpful for talking to DTS or your boss."
  },
  {
    "objectID": "session_1.html#researchers-only-at-chop",
    "href": "session_1.html#researchers-only-at-chop",
    "title": "",
    "section": "Researchers ONLY at CHOP",
    "text": "Researchers ONLY at CHOP\n(You’ll need a research cost center to refer to for most of these)\n\nIf you work with the High Performance Compute cluster (HPC or Respublica), you can request an RStudio session by logging in to Interactive Apps and choosing RStudio.\nYou can request a VDI that includes RStudio.\nYou can request an Arcus lab for a well-defined research project you’re planning. The Arcus lab includes RStudio.\n\n\nIf you’re a researcher at CHOP, there are additional places you might want to use R and RStudio. I won’t go into these in detail, but each of these are links that take you to more information. As a researcher, you can request access to the HPC, also known as Respublica, you can request a VDI, or you can request an Arcus lab. All of these can be ways you can get access to R and RStudio without having to install them on your local computer. And especially if you work with very big data, or you do complex, high-memory data modeling, you might have to use some of these resources, if your computer just doesn’t have enough RAM to do the job. But as always, please make sure that wherever you work with your data, you are in compliance with your IRB protocol and any other regulation."
  },
  {
    "objectID": "session_1.html#qa-was-this-effective",
    "href": "session_1.html#qa-was-this-effective",
    "title": "",
    "section": "Q&A / Was This Effective?",
    "text": "Q&A / Was This Effective?\nWe like to measure our effectiveness (and analyze it in R!)\nGoals:\n\nUse Source and Visual views in RStudio to experiment with how markdown gets rendered into attractive and descriptive text\nCreate a new code chunk in a Quarto document\nRun a code chunk in a Quarto document\n\n\nThe Arcus education team is a group that likes to measure our effectiveness and make changes based on what we learn. So before we do questions and answers and our final slides, we like to make sure to give our learners a poll to see if we made a good use of your time. We’re going to ask if we were effective in reaching our goals today, and those goals are on the screen in order to help you answer that question. Once you answer that poll, feel free to type a question into chat or come off mute and ask to clarify anything I can explain a bit better."
  },
  {
    "objectID": "session_1.html#creating-a-project-in-posit",
    "href": "session_1.html#creating-a-project-in-posit",
    "title": "",
    "section": "Creating a Project in Posit",
    "text": "Creating a Project in Posit\n\nGo to http://posit.cloud (you already have a free account, right?)\nCreate a new project from a Git repository\nURL to enter is https://github.com/arcus/first_steps_in_r_rstudio_exercises (Click OK)\nLook around your RStudio environment!\n\n\n\n\n\n\n\n\n\n\n−+\n03:00\n\n\n\n\nOK, we’re going to start a new project in Posit.cloud. This is your first hands-on work in this workshop, so get ready!\nYou’re going to find the “New Project” button in the upper right. It’s big and dark blue and it stands out a lot. It’s not quite so visible when you have RStudio on your own computer, just as a heads-up.\nYou’ll see there are a few options for a new Project. You want to choose “New Project from Git Repository.”\nWhat that means is that you’re going to copy some files from an existing location that my team uses to store the exercise files, also known as a repository. In the future, if we change anything to those files in the repository, you can update your copy, too, to stay up to date.\nIt will ask you for the URL of the repository. That’s where you want to type the URL shown in the slide: https://github.com/arcus/first_steps_r_rstudio_exercises. I’ll copy and paste that into the chat so you have it.\nLater on, you can create other kinds of Projects in your Posit.cloud account using the other options that show up when you click New Project, so that you get a feel for how the other project types work. But I’ll let you do that in your own time.\nFor now, I want to give you a couple of minutes to do these steps. Please do this now! When you’re done creating that new project, give me a nice thumbs up in the chat. [Add “I’ve created my new project from the Git repository” comment to chat]\nSo I’ll share my Posit.cloud window with you now [Do this] and I’ll do the same thing, in case anyone is stuck. I’m going to log in to my Posit.cloud account, and click the New Project button [NOTE: before the session, make sure you have space to make a new project!]. I’ll choose the “from a Git Repo” option.\nNow I’ll copy and paste in the URL of the repository my team maintains, like this.\nAnd then it will think for a couple of minutes and then create a new project and include some files for me that were in the repo. And that’s that!\nLet’s take a look around at the panes here.\nIn the lower right, you have a file browser, that shows all the files included in this project. It looks like we have a data directory, an exercises directory, a solutions directory, and a few other things that may seem unfamiliar, like a README and a couple of special files.\nOn the left, we see the R console, and that tells us about the version of R we’re running. In the upper right, we have a pane that shares a information about the environment of our project right now, but there’s nothing there yet, really, because we haven’t started working.\nThere’s a really helpful menu across the top, and I want to draw your attention to the Help item, which is the last menu option in the toolbar. If I click there, and go to Cheat Sheets, there are lots of useful one-page cheat sheets to help me remember how to do stuff in R and RStudio. Now, in my bottom right, you can see that my files disappeared, because the “Help” tab is now selected. I can just click on “Files” to bring that file viewer back.\nOK, so that’s it for cloning our project. You now have your own copy of our exercises, and you’re ready to start working on them! So let’s go back to the slide deck.\n[Go back to sharing the slide deck]"
  },
  {
    "objectID": "session_1.html#run-your-first-line-of-code",
    "href": "session_1.html#run-your-first-line-of-code",
    "title": "",
    "section": "Run Your First Line of Code!",
    "text": "Run Your First Line of Code!\nWe’ll go over what this actually accomplishes in Session 2.\nIn your R console (the lower left pane in RStudio), enter the following:\ninstall.packages(\"tidyverse\")\n\n\n\n−+\n02:00\n\n\n\n\nSo this time, I’ll do this first so you can see what it looks like, and then I’ll ask you to do it. In your Posit.Cloud or RStudio Project, the console is one place you can type code. It’s in the lower left pane of your window, and if it’s really small, collapsed into one small line, you can click on it to make it bigger. [Demonstrate what it looks like when the Console is small, if you can]. See how there are tabs that say “Console” and “Terminal” here? I want to be in Console.\nI’m going to go into my Posit.cloud console now and type install dot packages parenthesis quote tidyverse quote parenthesis, being really careful to use the right syntax, with the quotation marks and the right capitalization. [Demonstrate in Posit.Cloud console]. What I’m asking R to do is to go to a central download center and get some extra software that enriches and expands the capacity of R. This extra software is called a package. And this particular package is called “tidyverse”. It’s a really important one, and it’s one you’ll hear us talk about a lot.\nI’ll give you all a couple of minutes to do that now! You might get a lot of output in your console window, and that’s usually just fine. You’ll know it installed properly if ……"
  },
  {
    "objectID": "session_1.html#summary-of-today",
    "href": "session_1.html#summary-of-today",
    "title": "",
    "section": "Summary of Today",
    "text": "Summary of Today\nToday, you:\n\nLearned about R and RStudio\nLearned about Literate Statistical Programming\nSigned up for (or logged into) Posit.cloud\nCloned (copied) our exercise files from GitHub into a new Project\nInstalled the tidyverse package into that Project\n\nThat’s a lot! Give yourselves a round of applause.\n\nOK, so that’s session 1. Today, we talked about R and RStudio and how to acquire R and RStudio, along with Git and GitHub, using CHOP’s software installation request form. We also presented the idea of literate statistical programming, which is a way to write code that is interlaced with rich, descriptive human language that describes and contextualizes the code. And you did a lot of work, too!\nYou either signed up for Posit.cloud for the first time, or you logged in. You created a new project, basing it on a GitHub repository. The technical word for copying a GitHub project is cloning. And you did a package installation as well, using the R console in your Project. Good work!"
  },
  {
    "objectID": "session_1.html#next-session",
    "href": "session_1.html#next-session",
    "title": "",
    "section": "Next Session",
    "text": "Next Session\nProjects and File Ingestion\n\nFile systems can be challenging to navigate\nProjects in RStudio\nInstalling and loading packages\nTabular data ingestion from .csv files\nFunctions in R\n\n\nIn our next session, we’re going to talk about projects, ingesting data, and functions in R. You’ll get to work with real clinical data from the University of California, Irvine Machine Learning Data Repository, so next session is when things start to get fun. Thanks so much for your time, and I look forward to seeing you next time!\n\n\n\n\n\nArcus Education, Children’s Hospital of Philadelphia"
  },
  {
    "objectID": "session_2.html#bonus-content-file-paths-the-where",
    "href": "session_2.html#bonus-content-file-paths-the-where",
    "title": "",
    "section": "Bonus Content: File Paths – the “where”",
    "text": "Bonus Content: File Paths – the “where”\n\nA few tips:\n\n/ means “go into a child directory” (\\ in Windows)\n/ as the first symbol means “start at the root”\n. means “this directory”\n.. means “the parent directory of this directory”\n~ means “my home directory”\n\nRelative path – “directions from here”\nAbsolute path – “directions from anywhere”\nWorking directory – R’s “starting place”\n\nGreat module on Directories and File Paths\n\nThis is bonus content, that I have sort if in my back pocket in case we have time to cover it.\nOption 1: I won’t go over this slide, but if understanding file paths is interesting to you, there’s a great link there for you to learn more.\nOption 2: Read below.\nIf you have already worked in the command line, you might not have any problem finding files on your computer, but some of you might find it tricky.\nWe’re going to offer a brief handful of tips for understanding file paths, and this is true for all files, not just related to R or data analysis.\nFirst off, Windows is a weird operating system and is unlike the rest of the world’s major operating systems, like Unix, Linux, and MacOS, in how it does file paths. Most file paths use forward slashes, not backward slashes. A slash means you’re going into a new subdirectory or subfolder.\nAnd a few other special symbols are useful to know. A single dot means “this directory”, two dots means “go into the directory that holds the one I’m in now”, and a tilde means “my home directory”, which will differ from user to user on a shared system like a server.\nIn your analysis scripts, you’ll often have to decide if you want to use what’s called a “relative path” or an “absolute path” to tell R where a file is. There are advantages and disadvantages to both, but if we’re using Projects, we can usually use relative paths more easily.\nA relative path assumes that we’re starting in the same place and have common knowledge. So if I was at home, describing where my keyboard is, I’d say “go upstairs to the second floor, and then on the street side of the house, there’s my office. Then go inside and you’ll find the keyboard on my desk.” That makes sense if you’re also inside my house.\nBut if you’re NOT in my house, you’re in your house, which doesn’t have a second floor, you would say, “hey, your directions to go to the second floor don’t make sense. Path not found.” A relative path doesn’t work when we’re not starting in the same place.\nAnd that brings us to the idea of a working directory. Any time you are working in R, it’s running with a starting point, its working directory. The great thing about RStudio is that it does a good job of guessing what you want the working directory to be, based on the file you’re working on. Everyone has the same starting point, so to speak.\nAn absolute path is a path that includes enough detail so that the location is clear from anywhere in the computer. For example, in the physical world, an absolute path would be if I said, “go to 123 Main Street, Philadelphia, go inside, go to the second floor, go to the street side, open the door, go inside, and look on the desk. The keyboard is there.” Now, the benefit is that it’s very precise. But the downside is that it’s lengthy and annoying to construct sometimes, and if you move the whole folder of your project, you’ve changed addresses, essentially, and messed things up.\nIf you want to learn more, we’ve created a module all about file paths that you might find useful, so check that out if you’re interested!"
  },
  {
    "objectID": "session_1.html#create-your-first-r-code",
    "href": "session_1.html#create-your-first-r-code",
    "title": "",
    "section": "Create Your First R Code!",
    "text": "Create Your First R Code!\nThis is what we’re going to do:\n\nCreate a new Quarto Document\nAdd a bit of description describing what you’re planning to do\nAdd a “Code Chunk” doing the thing (in our case, installing tidyverse and rmarkdown)\nRun that code chunk to make sure it works\nSave that Quarto document as setup.qmd in your Exercises folder.\n\n\nThe best way to get started is to just jump in, so that’s what we’re going to do, step by step together. This is what we’re going to do.\nWe’re going to create a new Quarto document, and we’re going to start right away using a literate style. So we’re going to describe what we’re doing, then do the thing, make sure it works, then save our file.\nSo, take just a minute to look at those bullet points, and then I’ll show you some screenshots to guide you on the next few slides. So don’t worry if these instructions are too vague. You’ll get more guidance in just a sec."
  },
  {
    "objectID": "session_1.html#step-1-create-a-new-quarto-document",
    "href": "session_1.html#step-1-create-a-new-quarto-document",
    "title": "",
    "section": "Step 1: Create a New Quarto Document",
    "text": "Step 1: Create a New Quarto Document\n\nGo to File, New File, Quarto Document.\nGive it the title “Setup” and click “Create”.\nTry clicking on “Visual” and “Source” and scrolling up and down!\nYou might get a “Visual mode” pop up box – give it a read.\n\n\n\n\n\n\n\n\n\n\n−+\n01:00\n\n\n\n\nOK, so with each step, I’ll give you about a minute to do this, and then I’ll show you what it looks like and demo it live.\nFirst, please use the File, New File menu option to create a new Quarto document. You’ll be asked to provide a title. Make that title “Setup”. You can put your name in as Author if you want, but don’t change anything else. Then click the “Create” button at the bottom right. When your new file creates, please don’t click anything else, even if you see a yellow banner that is prompting you to install a program. I want you to wait, please.\nI’ll give you a minute, and then I’ll share my screen and do the same thing as you.\n[Click countdown timer].\nOK, so let me switch my screen over to my own Posit.cloud account, where I’ve got the project open. I’m going to click on File, then New File, and then Quarto Document. I’ll add the word “Setup” to the Title, and click “Create”. Simple as that.\nNow, I want to point out that there’s a banner there that is offering you a shortcut. I do NOT want you to take this shortcut. If you did already, that’s okay, but I want to show you the manual way to install packages, so please don’t click in that yellow banner. It’s a useful message, however, because it’s telling you, hey, for me to be fully effective, you need to install a package, specifically the rmarkdown package. So we’ll use this data in just a sec. \nNow, I’m going to click on these two buttons, Visual and Source, to see two different ways this sample file looks. I’ll get an informational pop up telling me “oh hey, you’re about to enter into Visual mode, here’s some info about that.” If you want to read that later, you can, but just uncheck that box so you can make it pop up again!\nYou can see that the RStudio software has given me some sample code to help guide me. This sample code is something you might hear people call “boilerplate” code. We don’t need this code, but it helps give us a guide to follow. I’m going to scroll up and down, and look at it in both Visual mode and Source mode. This will help you understand how markdown works. You can see the raw markdown by clicking on the Source button, and see things like triangle brackets and double asterisks and hash marks, and then click on Visual to see how that markdown gets rendered into html to have the formatting we want.\nDoes it matter what you use? Source or Visual? Well, for this course we’re going to have you use Source, just so we’re all doing the same thing. But for your future work, it doesn’t really matter. Use what you prefer! Or go back and forth between Source and Visual, to try things out and see what they look like. So for now, click on Source so we’re all seeing the same thing.\nOK, let’s go back to the slides for our next step.\n[Go back to slides.]"
  },
  {
    "objectID": "session_1.html#step-2-add-a-bit-of-description",
    "href": "session_1.html#step-2-add-a-bit-of-description",
    "title": "",
    "section": "Step 2: Add a bit of description",
    "text": "Step 2: Add a bit of description\n\nRemove the existing markdown and code\nStart a new header (“Installing Packages”) with two hash marks (#)\nEnter a blank line\nThen type a description of installing packages\n\n\n\n\n\n\n\n\n−+\n01:00\n\n\n\n\nAgain, I’ll give you about a minute to do this. Delete all the stuff from the line with the header “quarto” (that’s line 7 or 8 if you’re looking in the Source view). Then add a new header and description. I’ll start the timer to give you a chance to do it, then I’ll demo this for you.\n[Click countdown timer].\nOK, so let me switch my screen over to my own Posit.cloud account, where I’ve got the project open.\nI’m going to make sure I’m in “Source” view, and I’m going to put my cursor at the start of line 7. I’ll highlight everything here from line 7 and below, and just hit backspace or delete to remove it.\nNow I’ll put in two hashmarks, which, if you’re an HTML person, will make an H2 header, and put a space after the hashmarks. And I’ll put the text of the header, which can be whatever you want, but I want this to say “Installing Packages.”\nI’ll hit enter two times after this, so that there’s a blank line after my header, and then I’ll just start typing. Maybe I’ll say something like “We need to install some packages.” Now, I’ll explain in session 2 about installing packages and when you need to do that, so don’t worry if you’re not sure what this is actually doing.\nIf I want to see what this kind of formatting looks like when it is rendered into HTML, I can click on the Visual button at the top to see what it looks like. Yep, a header, and some explanatory text below that. Perfect! I’ll go back to Source view for now, and then we can go back to the slides.\n[Go back to slides.]"
  },
  {
    "objectID": "session_1.html#step-3-add-a-code-chunk",
    "href": "session_1.html#step-3-add-a-code-chunk",
    "title": "",
    "section": "Step 3: Add a Code Chunk",
    "text": "Step 3: Add a Code Chunk\n\nPosition your cursor after your explanatory text\nHit enter to make sure there’s a blank line\nThen use the green “+C” button to add a code chunk\nInside that code chunk, type this, exactly: install.packages(c(\"rmarkdown\", \"tidyverse\"))\n\n\n\n\n\n\n\n\n\n\n−+\n01:00\n\n\n\n\nAs usual, I’ll give you a minute to do this. You’re going to add a code chunk. Now, you can certainly do this by typing in all the symbols for a code chunk manually, BUT it’s much easier if you find the “Add a Code Chunk” button, which is a green button with the letter C, and click that.\nOnce you have an empty code chunk, I want you to copy the code there exactly as written, and I’ll explain it in a bit. Go ahead and try it! After a minute I’ll do it, too.\n[Click countdown timer].\nOK, so let me switch my screen over. I’m going to hit enter and move my cursor so that my code chunk is placed after my descriptive text, and after a bit of white space, too. I’ll click on the add a code chunk button, and an empty code chunk appears. Let’s look at the anatomy of this code chunk.\nFirst, it starts with three backticks (this symbol is NOT the same as a single quote!). Then, there’s the designation of what programming language is going to appear in this code chunk. We’re using the R language, so we’re going to leave this be, with the letter “r” in curly braces.\nThere’s a space to add code, and then the code chunk ends with three more back ticks.\nAnd you can see that visually, it’s grey, to give a little bit of help so we can distinguish between where the code is and where the description is.\nNow, I’m going to type in this code. First, I’ll start by typing install dot packages. As I type, predictive text might appear, and I can just hit enter to accept the suggestion.\nSo I have install.packages and a set of parentheses. Now, inside those parentheses, I want to put in a list. In r, we commonly use what’s called a concatenation to designate a list. And that’s just the letter c, followed by a set of parentheses. So I’ll put c, open parenthesis, and look, the closed parenthesis appears for free. [ Note: you should have install.packages(c())].\nAnd inside that concatenation, I want to put a comma delimited list of package names, with quotes. There are two packages I know I need. From the banner above, I know I need “rmarkdown”. I also know that later in our work together we’re going to use a lot of functionality from the tidyverse set of packages, so I’ll add “tidyverse”. So all told, this is what I have:\n\ninstall dot packages,\nopen parenthesis,\nthe letter c for concatenation,\nopen parenthesis,\nthe namd rmarkdown in quotes,\na comma,\nthe word tidyverse in quotes,\nthe closing parenthesis for my concatenation\nthe closing parenthesis for my install.packages\n\nTake a look and make sure your code chunk looks like mine.\nOK, let’s go back to the slides! [go back to slides]"
  },
  {
    "objectID": "session_1.html#step-4-run-that-code-chunk",
    "href": "session_1.html#step-4-run-that-code-chunk",
    "title": "",
    "section": "Step 4: Run that Code Chunk",
    "text": "Step 4: Run that Code Chunk\n\nUse the green triangle (“Play” button) on the chunk to run the chunk\nLook in the “Console” for output. It will be verbose, and take a while.\nYou’ll know it’s finished when the prompt &gt; appears in the Console and the Stop sign disappears!\n\n\n\n\n\n\n\n\n\n\n−+\n00:30\n\n\n\n\nAgain, you’ll do this first, then I’ll demo. You’re going to run this code by clicking on the “play” button in the code chunk, and these libraries will install. It’ll take a while! And if you mistyped something, you might get an error message. If that happens, don’t panic. Read the error message and see if you can figure out what it’s trying to communicate. I’ll give you a minute to do this, then I’ll demonstrate this step.\n[Click countdown timer].\nOK, so let me switch my screen over. Let me move my mouse over to the top of my code chunk at the top right corner, and find that green “play” button. I’ll click there, and in the console, I can watch a lot happen.\n[Do the thing]\nOK, so while this is going on I’ll explain that if there are any libraries that are dependencies, things that are required to be installed before the libraries we want to install can be successfully installed, those will come along for free. So you’re going to see not just rmarkdown and tidyverse get installed, but lots of other underlying packages, too. When the install is still running, you’ll see a stop sign in the Console, which you can click if you need the process to stop.\nOnce things finish, there will be a prompt in the Console, ready for the next command.\nNow, this is a moment where sometimes people have error messages, so let’s pause here in case there are issues, before we go on.\n…\nOK, so let’s go back to the slides.\n[Go back to slides]"
  },
  {
    "objectID": "session_1.html#step-5-save-that-quarto-document",
    "href": "session_1.html#step-5-save-that-quarto-document",
    "title": "",
    "section": "Step 5: Save that Quarto Document",
    "text": "Step 5: Save that Quarto Document\n\nClick on File, Save\nName your file “setup” (you don’t have to add “.qmd”, but you can!)\nSave it inside the “exercises” folder\n\n\n\n\n\n−+\n00:30\n\n\n\n\nOK, last step! I’m going to ask you to save this file. You shouldn’t ever have to run this code again for this project, but it might be handy to hang on to it anyway. Please use the File menu to save this file. Give it the name setup and save it in “exercises”.\nYou do it, then I’ll do it.\n[Click countdown timer].\nOK, that’s time. I’ll share my Posit.cloud window now, and I want you to notice that my file name here is red and has an asterisk, which is telling me there are unsaved changes. So let’s go into File, then Save. I’m going to type “setup” in the file name, choose “exercises” for the file location, and then “Save”.\nWhen I do that, my file name is no longer red, it’s black, and that is a good visual indicator that I’m caught up, that there are no unsaved changes.\nLet’s go back to the slides."
  },
  {
    "objectID": "session_1.html#your-chop-kit-optional",
    "href": "session_1.html#your-chop-kit-optional",
    "title": "",
    "section": "Your CHOP Kit (Optional)",
    "text": "Your CHOP Kit (Optional)\nWhat you might want to install / get installed on your own CHOP device:\n\nR – the language we use to clean, analyze, and visualize data\nRStudio Desktop – an IDE for writing R\nGit – version control software that will allow you to easily get the latest version of our course materials and will also be helpful for tracking changes in your own projects\nGitHub Desktop – a helper, or “client” software that makes working with Git easier\n\n\nI said I’d talk about what to do if you wanted to work on your own CHOP device with R and RStudio installed locally, to work safely with CHOP data for work. In addition to R and RStudio, I also highly recommend getting Git and GitHub Desktop installed as well. They work really well with RStudio, and even if you’re not ready to work with version control software now, you might want to work with these programs in the future, so it can be helpful to have everything installed all at once. Each of these links can take you to more information about installing these programs, which can be helpful for talking to DTS or your boss."
  }
]