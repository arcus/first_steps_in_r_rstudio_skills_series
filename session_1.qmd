---
format: 
  revealjs:
    theme: [serif, custom.scss]
    scrollable: true
    logo: media/chop_arcus_initiative_logo.png
    footer: Arcus Education, Children's Hospital of Philadelphia 
    css: styles.css
---

## Welcome {.smaller}

These slides available at: <https://arcus.github.io/first_steps_in_r_rstudio_skills_series/session_1.html>

-   Use keyboard arrow keys to
    -   advance ( → ) and
    -   go back ( ← )
-   Type "s" to see speaker notes
-   Type "?" to see other keyboard shortcuts


```{r echo = FALSE}
library(countdown)
```


::: notes
As we prepare to get started, I'd like to encourage you to open these slides on your own browser, so you will have them available to refer to later. There are also a number of links you may want to click on. I'll copy paste that URL, where the slide deck is located, into chat, so everyone has it.

This first slide is just to help you navigate this slide deck if you look at these slides on your own! And yes, there are ample speaker notes, so if you missed something I said, chances are it's going to be in the speaker notes of the slide.
:::

## About Arcus / Your Presenter {.smaller}

::::: {.columns .v-center-container}
::: {.column .small-text width="60%"}
Arcus is an initiative by the Research Institute aimed at promoting data discovery and reuse and increasing research reproducibility.

-   Arcus app: <https://arcus.chop.edu>
-   Arcus Sharepoint site: <https://chop365.sharepoint.com/sites/Arcus>

Among the many teams in Arcus, I represent Arcus Education!

![](media/arcus_website.png){.two-thirds .bordered}
:::

::: {.column .small-text width="40%"}
![](media/arcus_research_data_lifecycle.png)
:::
:::::

::: notes
Thanks again for joining us, and welcome to our session today! I'd like to begin by briefly introducing myself and introducing Arcus, for those of you who may not be familiar with us. My name is \_\_\_\_\_\_ \[add pronouns here if you want\], and I'll be leading today's session.

Arcus is an initiative by the Research Institute aimed at promoting data discovery and reuse and increasing research reproducibility throughout the research lifecycle, as you can see in the graphic on the right. \[Pause, give folks a few secs to peruse the image\].

Changing the paradigm of research is a big undertaking, and it requires a broad approach.

We aim to improve data reuse and research reproducibility at CHOP through technology, including Arcus labs and applied data science, through the use of data archiving and cataloging, and by way of education.

You can find out more by checking out the Arcus application website (please note, there are some pre-requisites to using the app, such as human subjects protection training and signing our terms of use). I've added just a very small screenshot of part of what the Arcus application website looks like on the slide on the left side. \[Pause\].

You can also, without any prerequisites, look at our Arcus Sharepoint site, which has a calendar of events and lots more information about Arcus.

And finally, a little more about me: I work in Arcus Education. Our role is to support CHOP scientists by helping researchers acquire data science skills. That's why we have Skills Series like this one!
:::

## Arcus Education

::::: {.columns .v-center-container}
::: {.column .small-text width="50%"}
![](media/arcus_education_page.png){.bordered}
:::

::: {.column .small-text width="50%"}
Arcus education provides data science training to researchers ...

(and often this is useful to non-researchers too!).

<https://arcus.chop.edu/i-want-to/arcus-education>

Email us! [arcus-education\@chop.edu](mailto:arcus-education@chop.edu){.email}
:::
:::::

::: notes
The Arcus Education team does lots of different kinds of education. We've been around since 2017, and we work one on one with researchers in office hours, we write how-to guides to help people understand how to use Arcus tools, we create asynchronous modules that people can use to acquire skills in their own time, and we do synchronous events like this one.

Sometimes we focus on Arcus customers, on researchers at CHOP who are doing research within the Arcus data sharing paradigm, and sometimes we broaden our reach to larger audiences, because we know that helping everyone acquire data science skills will help improve the conduct of science at CHOP and help build a data-driven workforce.

Please check out that education page and find out more about some of our services. You can see I've added a screenshot of that page to the slide here on the left side. You can also email us at arcus dash education at chop dot edu.
:::

## First Steps in R and RStudio {.smaller}

Arcus Education provides "Skills Series" for the entire CHOP community.

This Skills Series is a 5-session series aimed at helping you take your first steps in R and RStudio!

-   Session 1: Review and Setup
-   Session 2: Projects and File Ingestion
-   Session 3: Exploring Data Visually, Using ggplot2
-   Session 4: Selecting Data Using dplyr
-   Session 5: Putting it All Together: Communicating Findings

::: notes
One of our methods in Education is the Skills Series, and that's what you're in today.

In this series, we're going to take five sessions to help you make your first steps in R and RStudio. If you've never coded in R or used the RStudio software, and you want some support to get started, this is a great workshop series for you.

After you finish these five sessions, you'll have a little experience with R and RStudio, and you'll have done things like ingest data, made data visualizations, and subset specific data you want to study more closely.
:::

## Session 1 Itinerary {.smaller}

Review and Setup (see also: [Demystifying R and RStudio](https://github.com/arcus/demystifying_r_rstudio_skills_series/blob/main/README.md))

-   Quick review of R, RStudio, and "literate statistical programming"
-   Posit.cloud: our environment for this course
-   Git and GitHub: Out of scope but very useful!
-   Your first Quarto Document
-   Getting R and RStudio at CHOP 

Goals:

-  Use Source and Visual views in RStudio to experiment with how markdown gets rendered into attractive and descriptive text
-  Create a new code chunk in a Quarto document
-  Run a code chunk in a Quarto document

::: notes
So let's get started with this first session. In this session we're going to very rapidly review the basics about what R and RStudio are, along with some basics about literate statistical programming, Quarto, and Posit.cloud. Those were all the subjects of a previous Skills Series entitled "Demystifying R and RStudio", so if today feels too fast, you can always go back and review that material.

We'll also quickly describe what Git and GitHub provide, and give you some tips for getting R and RStudio at CHOP.

Our goals for today are three-fold.  

By the end of the session I want you to use source and visual mode in RStudio to work with markdown, I want you to create a new code chunk in Quarto, and I want you to run a code chunk in Quarto.  And don't worry if you don't know what any of that means!  We'll get there together.
:::

## R Vs RStudio

::::: {.columns .v-center-container}
::: {.column .small-text width="50%"}
![](media/r_logo.png){.two-thirds}
:::

::: {.column .small-text width="50%"}
![](media/rstudio_logo.png){.half}
:::
:::::

::::: {.columns .v-center-container}
::: {.column .small-text width="50%"}
**R** Programming language for data analysis
:::

::: {.column .small-text width="50%"}
**RStudio** Integrated development environment (IDE)
:::
:::::

::: notes
Let's begin by distinguishing between R and RStudio.

The first logo you see here is for **R**. R is a statistical programming language that's great for doing data analysis. There are several features that make R attractive for people who work with data.

-   R was built specifically for statistical data analysis, so it's got a friendly and focused user community and lots of great online resources for learning.
-   R is **open source**, which means that it is "free" in two ways -- in the meaning of having **no cost** and also in terms of using it freely, that is, without intellectual property concerns or licensing restrictions.
-   R makes it possible to work with data and build scripts that do lots of things, from ingesting data to building data visualizations and lots of other things along the way.

So that's R, it's a language with a lot of benefits.

Then, there's **RStudio**. RStudio was the original name of a company as well as the name of a piece of software the company makes. A couple of years ago, the company changed its name from RStudio to Posit, but they kept the old name on at least some of their software.

You can think of RStudio (the software) as a fancy text editor for writing R code. The technical term for a fancy text editor for writing code is "Integrated Development Environment", or I-D-E.

You don't **have** to use RStudio to write R, but it makes it a lot easier. We like to give the example of typing a manuscript in Microsoft Word. If you didn't have Microsoft Word, you could write down your thoughts in the Notes app on your phone. But Microsoft Word has lots of add-ons, like spell-check and word count that make it much more pleasant to write a paper there, rather than in the notes app on your phone!

One of the things you can do in RStudio really well is write code in a particular paradigm called literate statistical programming, and that's what we're going to talk about next.
:::

## LSP Example (Quarto) {.smaller}

::::: {.columns .v-center-container}
::: {.column width="50%"}
![](media/visual_view_lsp.png){.bordered}
:::

::: {.column width="50%"}
In Literate Statistical Programming, we not only use **code**, but also describe what we do in **human language**, with things like headers, bullet points, and other formatting to make it easier for humans to make sense of the code.
:::
:::::

::: notes
Literate statistical programming is computer code (that's what makes it programming) that analyzes data (that's what makes it statistical), and does so interlaced with detailed human language that describes what's happening in the code (that's what makes it literate). Here's an example.

Here is a snippet of a script my team wrote, and you can see that it has some description of what the code is doing, to help humans. We put in a header, to separate a section that has to do more with bringing the data in and cleaning it. Then we write a paragraph describing what we're going to do, followed by a chunk of code.

After that code executes, we'll have some data. So we have some additional description of what we want to do, this time in the form of a bulleted list. I'm not showing you all of the code that makes that bulleted list happen, because it's kind of long, but the code chunk with the grey background below that bulleted list is code we wrote that does all the things in that bulleted list.

This is what literate statistical programming looks like, and working in R and RStudio is a great way to get started working this way. This kind of document, by the way, is called a Quarto document. It includes R language but also includes text that has special formatting called "markdown". You may have also heard the term "R Markdown", which is practically the same thing. It's an older term that preceded the word "Quarto".

I want to get you creating Quarto documents as soon as possible, so let's transition to talking about how to get you started working with R and RStudio right away!
:::

## Posit.Cloud (for learning only!) {.smaller}

You can use R and RStudio using online services like [https://posit.cloud](https://posit.cloud).  Sign up for your free account, it's what we'll use for this series.

Posit.cloud is a great place for learning or practice with public datasets, BUT is not a safe or compliant place to put your regulated data.


```{r echo=FALSE}
countdown(minutes = 2, seconds = 0)
```


::: notes

When we teach R and RStudio, it can be next to impossible to deal with everyone's different kinds of installation issues while they're trying to get set up and deal with IS, get issues ironed out with their computers and their access permissions, etc. 

That's why we have our students use Posit.cloud to learn R and RStudio.  Posit.cloud is an online, cloud based service provided by Posit, the company that makes the RStudio software.  It's really good and reliable and it has a very generous free tier!  It means that as teachers we can concentrate on our learners really acquiring the skills around R and RStudio, without being bogged down by the fact that some people have Macs, some have PCs, some have admin rights, some don't, and so on.  Using Posit.cloud makes things a lot easier for teachers and learners.  Even if you already have R and RStudio installed locally, I'm going to request that you use Posit.cloud for this Skills Series, because we do not have the time in a webinar with this many students to help you with your particular setup.

HOWEVER, we want to make one thing very clear!  Posit.cloud is absolutely NOT an appropriate place for regulated health care data.  It's for **practicing** and **learning** using **public datasets**.  If you're going to use R for CHOP data, you should start the process of getting R and RStudio installed on your CHOP device so that you can transfer those skills to real-life work right away.  If you want to learn more about that, there are slides about that in the Demystifying R and RStudio Skills Series that will help you.

For now, please, if you already have a Posit account, please log in to it.  If you don't have a Posit account, please go to https://posit.cloud and create a free account.  When you have your Posit account created, please give us a thumbs up on the comment in the chat, so I can measure progress.  I'll give you two minutes to start and we'll see where we stand.  [Click the timer, and copy/paste the comment "I have a Posit.cloud account and I'm logged in there!" into chat].

:::

## Git and GitHub Desktop: Out of scope {.smaller}

... but very useful version control software.

Version control allows you to track, for text-based files:

* What changed (the file name, the line numbers, the actual text)
* When (date and time)
* By whom (username / ID)
* Why (the person changing will add a message)

(And that means no more `analysis_final.R`, `analysis_final_with_changes.R`, `analysis_final_final_final_please_why.R`)

::: notes

Git and GitHub Desktop are complex and very useful software.  We could do a skills series, or in fact several skills series, just on these!  If anyone uses them for work and wants to let us know how often they use it or what they use it for, drop a message in chat.  I'm curious to see how other people use version control at CHOP!

Version control software allows you to record changes to text-based files, including what changed in the file or files, when the change was made, who made the change, and why.  Much like the relationship between R and RStudio, Git is the original software and GitHub, including GitHub Desktop, was built to make using Git easier, and it's helpful but not necessary.

We won't go into all the details about how to use these software packages, but we use them daily in my team including for managing the files for these workshops.  When we start hands-on coding, you'll be hearing me mention GitHub.  You'll get the exercise files from there to work with.  If there's one thing I hope you remember about Git and GitHub, it's that they are very useful, and if you find them a real pain in the neck at first, hang in there, because they really truly are worth the effort to learn.  

And the reason I'm bringing this up will become evident in the next couple of slides, because you're going to install the exercise files from a Git repository.

:::


## Creating a Project in Posit {.smaller}

* Go to <http://posit.cloud> (you already have a free account, right?)
* Create a new project from a Git repository 
* URL to enter is <https://github.com/arcus/first_steps_in_r_rstudio_exercises> (Click OK)
* Look around your RStudio environment!

::: {.columns .v-center-container}
::: {.column .small-text width="40%"}
![](media/posit_new_from_git_repo.png)
:::
::: {.column .small-text width="40%"}
![](media/new_project_with_github_url.png)
:::
:::

```{r echo = FALSE}
countdown(minutes = 3, seconds = 0)
```

::: notes
OK, we're going to start a new project in Posit.cloud.  This is the work that lays the foundation for everything else you're going to do in this workshop, so get ready!  

When you log in to Posit.cloud, you're going to find the "New Project" button in the upper right.  It's big and dark blue and it stands out a lot.  It's not quite so visible when you use RStudio Desktop on your own computer, just as a heads-up -- you have to find "New Project" in the menu system, it's not a big button like it is in Posit.cloud.

You'll see there are a few options for a new Project.  You want to choose "New Project from Git Repository."

What that means is that you're going to copy some files from an existing location that my team uses to store the exercise files.  This location is known as a repository.  In the future, if we change anything to those files in the repository, you can update your copy, too, to stay up to date.

It will ask you for the URL of the repository.  That's where you want to type the URL shown in the slide:  https://github.com/arcus/first_steps_r_rstudio_exercises.  I'll copy and paste that into the chat so you have it.

Later on, you can create other kinds of Projects in your Posit.cloud account using the other options that show up when you click New Project, so that you get a feel for how the other project types work.  But I'll let you do that in your own time.

For now, I want to give you a couple of minutes to do these steps.  Please do this now!  When you're done creating that new project, give me a nice thumbs up in the chat. [Add "I've created my new project from the Git repository" comment to chat]

[Once the timer finishes, and/or 2/3 of participants have given thumbs up]:

So I'll share my Posit.cloud window with you now [Do this] and I'll do the same thing, in case anyone is stuck.  I'm going to log in to my  Posit.cloud account, and click the New Project button [NOTE: before the session, make sure you have space to make a new project!].  I'll choose the "from a Git Repo" option.

Now I'll copy and paste in the URL of the repository my team maintains, like this.

And then it will think for a couple of minutes and then create a new project and include some files for me that were in the repo.  And that's that! 

Let's take a look around at the panes here.

In the lower right, you have a file browser, that shows all the files included in this project.  It looks like we have a data directory, an exercises directory, a solutions directory, and a few other things that may seem unfamiliar, like a README and a couple of special files.

On the left, we see the R console, and that tells us about the version of R we're running.  In the upper right, we have a pane that shares a information about the environment of our project right now, but there's nothing there yet, really, because we haven't started working.

There's a really helpful menu across the top, and I want to draw your attention to the Help item, which is the last menu option in the toolbar.  If I click there, and go to Cheat Sheets, there are lots of useful one-page cheat sheets to help me remember how to do stuff in R and RStudio.  Now, in my bottom right, you can see that my files disappeared, because the "Help" tab is now selected.  I can just click on "Files" to bring that file viewer back. 

OK, so that's it for cloning our project.  You now have your own copy of our exercises, and you're ready to start working on them!  So let's go back to the slide deck.

[Go back to sharing the slide deck]

:::

## Create Your First Literate R Code! {.smaller}

This is what we're going to do:

* Create a new Quarto Document
* Add a bit of description describing what you're planning to do
* Add a "Code Chunk" doing the thing (in our case, installing `tidyverse` and `rmarkdown`)
* Run that code chunk to make sure it works
* Save that Quarto document as `setup.qmd` in your Exercises folder.


::: notes
The best way to get started is to just jump in, so that's what we're going to do, step by step together.  This is what we're going to do.

We're going to create a new Quarto document, and we're going to start right away using a literate style.  So we're going to describe what we're doing, then do the thing, make sure it works, then save our file.

So, take just a minute to look at those bullet points, and then I'll show you some screenshots to guide you on the next few slides.  So don't worry if these instructions are too vague.  You'll get more guidance in just a sec.

:::

## Step 1: Create a New Quarto Document {.smaller}

* Go to File, New File, Quarto Document.
* Give it the title "Setup" and click "Create".
* Try clicking on "Visual" and "Source" and scrolling up and down!
* You might get a "Visual mode" pop up box -- give it a read.

::: {.columns .v-center-container}
::: {.column .small-text width="40%"}
![](media/new_quarto_document.png)
:::
::: {.column .small-text width="40%"}
![](media/create_quarto_document.png)
:::
:::

```{r echo=FALSE}
countdown(minutes = 1, seconds = 0)
```


::: notes

OK, so with each step, I'll give you about a minute to do this, and then I'll show you what it looks like and demo it live.

First, please use the File, New File menu option to create a new Quarto document.  You'll be asked to provide a title.  Make that title "Setup".  You can put your name in as Author if you want, but don't change anything else.  Then click the "Create" button at the bottom right.  When your new file creates, please don't click anything else, even if you see a yellow banner that is prompting you to install a program.  I want you to wait, please.

I'll give you a minute, and then I'll share my screen and do the same thing as you.

[Click countdown timer].

OK, so let me switch my screen over to my own Posit.cloud account, where I've got the project open.  I'm going to click on File, then New File, and then Quarto Document.  I'll add the word "Setup" to the Title, and click "Create".  Simple as that.

Now, I want to point out that there's a banner there that is offering you a shortcut.  I do NOT want you to take this shortcut.  If you did already, that's okay, but I want to show you the manual way to install packages, so please don't click in that yellow banner.  It's a useful message, however, because it's telling you, hey, for me to be fully effective, you need to install a package, specifically the `rmarkdown` package.  So we'll use this data in just a sec.  

Now, I'm going to click on these two buttons, Visual and Source, to see two different ways this sample file looks.  I'll get an informational pop up telling me "oh hey, you're about to enter into Visual mode, here's some info about that."  If you want to read that later, you can, but just uncheck that box so you can make it pop up again!

You can see that the RStudio software has given me some sample code to help guide me.  This sample code is something you might hear people call "boilerplate" code.  We don't need this code, but it helps give us a guide to follow.  I'm going to scroll up and down, and look at it in both Visual mode and Source mode.  This will help you understand how markdown works.  You can see the raw markdown by clicking on the Source button, and see things like triangle brackets and double asterisks and hash marks, and then click on Visual to see how that markdown gets rendered into html to have the formatting we want.

Does it matter what you use?  Source or Visual?  Well, for this course we're going to have you use Source, just so we're all doing the same thing. But for your future work, it doesn't really matter. Use what you prefer!  Or go back and forth between Source and Visual, to try things out and see what they look like.  So for now, click on Source so we're all seeing the same thing.

OK, let's go back to the slides for our next step.

[Go back to slides.]
:::

## Step 2: Add a bit of description {.smaller}

* Remove the existing markdown and code 
* Start a new header ("Installing Packages") with two hash marks (#) 
* Enter a blank line
* Then type a description of installing packages

::: {.columns .v-center-container}
::: {.column .small-text width="70%"}
![](media/writing_first_markdown.png)
:::
:::

```{r echo=FALSE}
countdown(minutes = 1, seconds = 0)
```

::: notes
Again, I'll give you about a minute to do this.  Delete all the stuff from the line with the header "quarto" (that's line 7 or 8 if you're looking in the Source view).  Then add a new header and description.  I'll start the timer to give you a chance to do it, then I'll demo this for you.


[Click countdown timer].

OK, so let me switch my screen over to my own Posit.cloud account, where I've got the project open.

I'm going to make sure I'm in "Source" view, and I'm going to put my cursor at the start of line 7.  I'll highlight everything here from line 7 and below, and just hit backspace or delete to remove it.

Now I'll put in two hashmarks, which, if you're an HTML person, will make an H2 header, and put a space after the hashmarks.  And I'll put the text of the header, which can be whatever you want, but I want this to say "Installing Packages."

I'll hit enter two times after this, so that there's a blank line after my header, and then I'll just start typing.  Maybe I'll say something like "We need to install some packages."  Now, I'll explain in session 2 about installing packages and when you need to do that, so don't worry if you're not sure what this is actually doing.  

If I want to see what this kind of formatting looks like when it is rendered into HTML, I can click on the Visual button at the top to see what it looks like.  Yep, a header, and some explanatory text below that.  Perfect!  I'll go back to Source view for now, and then we can go back to the slides.

[Go back to slides.]
:::

## Step 3: Add a Code Chunk {.smaller}

* Position your cursor after your explanatory text
* Hit enter to make sure there's a blank line
* Then use the green "+C" button to add a code chunk
* Inside that code chunk, type this, exactly: `install.packages(c("rmarkdown", "tidyverse"))`

::: {.columns .v-center-container}
::: {.column .small-text width="40%"}
![](media/about_to_click_new_chunk.png)
:::
::: {.column .small-text width="40%"}
![](media/new_code_chunk.png)
:::
:::

```{r echo=FALSE}
countdown(minutes = 1, seconds = 0)
```

::: notes

As usual, I'll give you a minute to do this.  You're going to add a code chunk.  Now, you can certainly do this by typing in all the symbols for a code chunk manually, BUT it's much easier if you find the "Add a Code Chunk" button, which is a green button with the letter C, and click that.

Once you have an empty code chunk, I want you to copy the code there exactly as written, and I'll explain it in a bit.  Go ahead and try it!  After a minute I'll do it, too.

[Click countdown timer].

OK, so let me switch my screen over.  I'm going to hit enter and move my cursor so that my code chunk is placed after my descriptive text, and after a bit of white space, too.  I'll click on the add a code chunk button, and an empty code chunk appears.  Let's look at the anatomy of this code chunk.

First, it starts with three backticks (this symbol is NOT the same as a single quote!).  Then, there's the designation of what programming language is going to appear in this code chunk.  We're using the R language, so we're going to leave this be, with the letter "r" in curly braces.

There's a space to add code, and then the code chunk ends with three more back ticks.

And you can see that visually, it's grey, to give a little bit of help so we can distinguish between where the code is and where the description is.

Now, I'm going to type in this code.  First, I'll start by typing install dot packages.  As I type, predictive text might appear, and I can just hit enter to accept the suggestion.  

So I have install.packages and a set of parentheses.  Now, inside those parentheses, I want to put in a list.  In r, we commonly use what's called a concatenation to designate a list.  And that's just the letter c, followed by a set of parentheses.  So I'll put c, open parenthesis, and look, the closed parenthesis appears for free.  [ Note: you should have `install.packages(c())`].

And inside that concatenation, I want to put a comma delimited list of package names, with quotes.  There are two packages I know I need.  From the banner above, I know I need "rmarkdown".  I also know that later in our work together we're going to use a lot of functionality from the tidyverse set of packages, so I'll add "tidyverse".  So all told, this is what I have: 

* install dot packages, 
* open parenthesis, 
* the letter c for concatenation, 
* open parenthesis, 
* the namd rmarkdown in quotes, 
* a comma, 
* the word tidyverse in quotes,
* the closing parenthesis for my concatenation
* the closing parenthesis for my install.packages

Take a look and make sure your code chunk looks like mine.

OK, let's go back to the slides!
[go back to slides]

:::

## Step 4: Run that Code Chunk {.smaller}

* Use the green triangle ("Play" button) on the chunk to run the chunk
* Look in the "Console" for output.  It will be verbose, and take a while.
* You'll know it's finished when the prompt `>` appears in the Console and the Stop sign disappears!

::: {.columns .v-center-container}
::: {.column .small-text width="40%"}
![](media/run_code_chunk.png)
:::
::: {.column .small-text width="40%"}
![](media/install_in_progress.png)
:::
:::

```{r echo=FALSE}
countdown(minutes = 0, seconds = 30)
```

::: notes

Again, you'll do this first, then I'll demo.  You're going to run this code by clicking on the "play" button in the code chunk, and these libraries will install.  It'll take a while!  And if you mistyped something, you might get an error message.  If that happens, don't panic.  Read the error message and see if you can figure out what it's trying to communicate.  I'll give you a minute to do this, then I'll demonstrate this step.


[Click countdown timer].

OK, so let me switch my screen over.  Let me move my mouse over to the top of my code chunk at the top right corner, and find that green "play" button.  I'll click there, and in the console, I can watch a lot happen.  

[Do the thing]

OK, so while this is going on I'll explain that if there are any libraries that are dependencies, things that are required to be installed before the libraries we want to install can be successfully installed, those will come along for free.  So you're going to see not just rmarkdown and tidyverse get installed, but lots of other underlying packages, too.  When the install is still running, you'll see a stop sign in the Console, which you can click if you need the process to stop.

Once things finish, there will be a prompt in the Console, ready for the next command.

Now, this is a moment where sometimes people have error messages, so let's pause here in case there are issues, before we go on.

...

OK, so let's go back to the slides.

[Go back to slides]

:::

## Step 5: Save that Quarto Document {.smaller}

* Click on File, Save
* Name your file "setup" (you don't have to add ".qmd", but you can!)
* Save it inside the "exercises" folder

![](media/save_file.png)

```{r echo=FALSE}
countdown(minutes = 0, seconds = 30)
```

::: notes
OK, last step!  I'm going to ask you to save this file.  You shouldn't ever have to run this code again for this project, but it might be handy to hang on to it anyway.  Please use the File menu to save this file.  Give it the name setup and save it in "exercises".

You do it, then I'll do it.

[Click countdown timer].

OK, that's time.  I'll share my Posit.cloud window now, and I want you to notice that my file name here is red and has an asterisk, which is telling me there are unsaved changes.  So let's go into File, then Save.  I'm going to type "setup" in the file name, choose "exercises" for the file location, and then "Save".  

When I do that, my file name is no longer red, it's black, and that is a good visual indicator that I'm caught up, that there are no unsaved changes.  

Let's go back to the slides.

:::



## Summary of Today {.smaller}

Today, you:

* Learned about R and RStudio 
* Learned about Literate Statistical Programming
* Signed up for (or logged into) Posit.cloud
* Cloned (copied) our exercise files from GitHub into a new Project
* Installed the tidyverse package into that Project

That's a lot!  Give yourselves a round of applause.

::: notes
OK, so that's session 1.  Today, we talked about R and RStudio and how to acquire R and RStudio, along with Git and GitHub, using CHOP's software installation request form.  We also presented the idea of literate statistical programming, which is a way to write code that is interlaced with rich, descriptive human language that describes and contextualizes the code.  And you did a lot of work, too!

You either signed up for Posit.cloud for the first time, or you logged in. 
You created a new project, basing it on a GitHub repository.  The technical word for copying a GitHub project is cloning.  And you did a package installation as well, using the R console in your Project.  Good work!

:::


## Q&A / Was This Effective? {.smaller}

We like to measure our effectiveness (and analyze it in R!)

Goals:

-  Use Source and Visual views in RStudio to experiment with how markdown gets rendered into attractive and descriptive text
-  Create a new code chunk in a Quarto document
-  Run a code chunk in a Quarto document


::: notes

The Arcus education team is a group that likes to measure our effectiveness and make changes based on what we learn.  So before we do questions and answers and our final slides, we like to make sure to give our learners a poll to see if we made a good use of your time.  We're going to ask if we were effective in reaching our goals today, and those goals are on the screen in order to help you answer that question.  Once you answer that poll, feel free to type a question into chat or come off mute and ask to clarify anything I can explain a bit better.  

:::



## Next Session

Projects and File Ingestion

  * File systems can be challenging to navigate
  * Projects in RStudio
  * Installing and loading packages
  * Tabular data ingestion from .csv files
  * Functions in R


::: notes

In our next session, we're going to talk about projects, ingesting data, and functions in R.  You'll get to work with real clinical data from the University of California, Irvine Machine Learning Data Repository, so next session is when things start to get fun.  Thanks so much for your time, and I look forward to seeing you next time!
:::

